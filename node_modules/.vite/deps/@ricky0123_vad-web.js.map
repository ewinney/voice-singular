{
  "version": 3,
  "sources": ["../../common/lib/backend-impl.ts", "../../common/lib/backend.ts", "../../common/lib/version.ts", "../../common/lib/env-impl.ts", "../../common/lib/env.ts", "../../common/lib/tensor-conversion-impl.ts", "../../common/lib/tensor-factory-impl.ts", "../../common/lib/tensor-impl-type-mapping.ts", "../../common/lib/tensor-utils-impl.ts", "../../common/lib/tensor-impl.ts", "../../common/lib/tensor.ts", "../../common/lib/trace.ts", "../../common/lib/inference-session-impl.ts", "../../common/lib/inference-session.ts", "../../common/lib/tensor-conversion.ts", "../../common/lib/tensor-factory.ts", "../../common/lib/onnx-model.ts", "../../common/lib/onnx-value.ts", "../../common/lib/training-session-impl.ts", "../../common/lib/training-session.ts", "../../common/lib/index.ts", "../../onnxruntime-web/lib/onnxjs/instrument.ts", "../../onnxruntime-web/lib/onnxjs/opset.ts", "../../onnxruntime-web/node_modules/guid-typescript/dist/guid.js", "../../onnxruntime-web/node_modules/long/index.js", "../../onnxruntime-web/node_modules/flatbuffers/js/flatbuffers.mjs", "../../onnxruntime-web/lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts", "../../onnxruntime-web/node_modules/@protobufjs/aspromise/index.js", "../../onnxruntime-web/node_modules/@protobufjs/base64/index.js", "../../onnxruntime-web/node_modules/@protobufjs/eventemitter/index.js", "../../onnxruntime-web/node_modules/@protobufjs/float/index.js", "../../onnxruntime-web/node_modules/@protobufjs/inquire/index.js", "../../onnxruntime-web/node_modules/@protobufjs/utf8/index.js", "../../onnxruntime-web/node_modules/@protobufjs/pool/index.js", "../../onnxruntime-web/node_modules/protobufjs/src/util/longbits.js", "../../onnxruntime-web/node_modules/protobufjs/src/util/minimal.js", "../../onnxruntime-web/node_modules/protobufjs/src/writer.js", "../../onnxruntime-web/node_modules/protobufjs/src/writer_buffer.js", "../../onnxruntime-web/node_modules/protobufjs/src/reader.js", "../../onnxruntime-web/node_modules/protobufjs/src/reader_buffer.js", "../../onnxruntime-web/node_modules/protobufjs/src/rpc/service.js", "../../onnxruntime-web/node_modules/protobufjs/src/rpc.js", "../../onnxruntime-web/node_modules/protobufjs/src/roots.js", "../../onnxruntime-web/node_modules/protobufjs/src/index-minimal.js", "../../onnxruntime-web/node_modules/protobufjs/minimal.js", "../../onnxruntime-web/lib/onnxjs/ort-schema/protobuf/onnx.js", "../../onnxruntime-web/lib/onnxjs/util.ts", "../../onnxruntime-web/lib/onnxjs/tensor.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-source.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/types.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/utils.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/packing-utils.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/pack.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/unpack.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/texture-data-encoder.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/inference-handler.ts", "../../onnxruntime-web/lib/onnxjs/attribute-with-cache-key.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-definitions.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/binary-op.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/cast.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat-packed.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/unary-op.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-pack.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/dot-product.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/transpose.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/flatten.ts", "../../onnxruntime-web/lib/onnxjs/operators.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/gather.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/gemm.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/image-scaler.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/lrn.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/pad.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/pool.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/reduce.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/upsample.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/resize-packed.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/shape.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/slice.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/softmax.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/split.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/squeeze.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/sum.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/tile.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/op-resolve-rules.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/program-manager.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/texture-manager.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/session-handler.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context.ts", "../../onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context-factory.ts", "../../onnxruntime-web/lib/onnxjs/backends/backend-webgl.ts", "../../onnxruntime-web/lib/onnxjs/backend.ts", "../../onnxruntime-web/lib/onnxjs/execution-plan.ts", "../../onnxruntime-web/lib/onnxjs/attribute.ts", "../../onnxruntime-web/lib/onnxjs/graph.ts", "../../onnxruntime-web/lib/onnxjs/model.ts", "../../onnxruntime-web/lib/onnxjs/session.ts", "../../onnxruntime-web/lib/onnxjs/session-handler-inference.ts", "../../onnxruntime-web/lib/backend-onnxjs.ts", "../../onnxruntime-web/lib/wasm/wasm-utils-env.ts", "../../onnxruntime-web/lib/wasm/proxy-worker/main.ts", "../../onnxruntime-web/lib/wasm/wasm-utils-import.ts", "../../onnxruntime-web/lib/wasm/wasm-factory.ts", "../../onnxruntime-web/lib/wasm/wasm-utils.ts", "../../onnxruntime-web/lib/wasm/run-options.ts", "../../onnxruntime-web/lib/wasm/session-options.ts", "../../onnxruntime-web/lib/wasm/wasm-common.ts", "../../onnxruntime-web/lib/wasm/wasm-utils-load-file.ts", "../../onnxruntime-web/lib/wasm/wasm-core-impl.ts", "../../onnxruntime-web/lib/wasm/proxy-wrapper.ts", "../../onnxruntime-web/lib/wasm/session-handler-inference.ts", "../../onnxruntime-web/lib/backend-wasm.ts", "../../onnxruntime-web/lib/index.ts", "../../onnxruntime-web/lib/version.ts", "../../@ricky0123/vad-web/src/asset-path.ts", "../../@ricky0123/vad-web/src/default-model-fetcher.ts", "../../@ricky0123/vad-web/src/logging.ts", "../../@ricky0123/vad-web/src/messages.ts", "../../@ricky0123/vad-web/src/frame-processor.ts", "../../@ricky0123/vad-web/dist/models/common.js", "../../@ricky0123/vad-web/src/models/legacy.ts", "../../@ricky0123/vad-web/src/models/v5.ts", "../../@ricky0123/vad-web/src/models/index.ts", "../../@ricky0123/vad-web/src/resampler.ts", "../../@ricky0123/vad-web/src/non-real-time-vad.ts", "../../@ricky0123/vad-web/src/utils.ts", "../../@ricky0123/vad-web/src/real-time-vad.ts", "../../@ricky0123/vad-web/src/index.ts"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend } from './backend.js';\nimport { InferenceSession } from './inference-session.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n  error?: string;\n}\n\nconst backends: Map<string, BackendInfo> = new Map();\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n    const currentBackend = backends.get(name);\n    if (currentBackend === undefined) {\n      backends.set(name, { backend, priority });\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends.get(backendsSortedByPriority[i])!.priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async (backendName: string): Promise<Backend | string> => {\n  const backendInfo = backends.get(backendName);\n  if (!backendInfo) {\n    return 'backend not found.';\n  }\n\n  if (backendInfo.initialized) {\n    return backendInfo.backend;\n  } else if (backendInfo.aborted) {\n    return backendInfo.error!;\n  } else {\n    const isInitializing = !!backendInfo.initPromise;\n    try {\n      if (!isInitializing) {\n        backendInfo.initPromise = backendInfo.backend.init(backendName);\n      }\n      await backendInfo.initPromise;\n      backendInfo.initialized = true;\n      return backendInfo.backend;\n    } catch (e) {\n      if (!isInitializing) {\n        backendInfo.error = `${e}`;\n        backendInfo.aborted = true;\n      }\n      return backendInfo.error!;\n    } finally {\n      delete backendInfo.initPromise;\n    }\n  }\n};\n\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async (\n  options: InferenceSession.SessionOptions,\n): Promise<[backend: Backend, options: InferenceSession.SessionOptions]> => {\n  // extract backend hints from session options\n  const eps = options.executionProviders || [];\n  const backendHints = eps.map((i) => (typeof i === 'string' ? i : i.name));\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n\n  // try to resolve and initialize all requested backends\n  let backend: Backend | undefined;\n  const errors = [];\n  const availableBackendNames = new Set<string>();\n  for (const backendName of backendNames) {\n    const resolveResult = await tryResolveAndInitializeBackend(backendName);\n    if (typeof resolveResult === 'string') {\n      errors.push({ name: backendName, err: resolveResult });\n    } else {\n      if (!backend) {\n        backend = resolveResult;\n      }\n      if (backend === resolveResult) {\n        availableBackendNames.add(backendName);\n      }\n    }\n  }\n\n  // if no backend is available, throw error.\n  if (!backend) {\n    throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(', ')}`);\n  }\n\n  // for each explicitly requested backend, if it's not available, output warning message.\n  for (const { name, err } of errors) {\n    if (backendHints.includes(name)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `removing requested execution provider \"${name}\" from session options because it is not available: ${err}`,\n      );\n    }\n  }\n\n  const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n\n  return [\n    backend,\n    new Proxy(options, {\n      get: (target, prop) => {\n        if (prop === 'executionProviders') {\n          return filteredEps;\n        }\n        return Reflect.get(target, prop);\n      },\n    }),\n  ];\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { TrainingSession } from './training-session.js';\n\n/**\n * @ignore\n */\nexport declare namespace SessionHandler {\n  type FeedsType = { [name: string]: OnnxValue };\n  type FetchesType = { [name: string]: OnnxValue | null };\n  type ReturnType = { [name: string]: OnnxValue };\n}\n\n/**\n * Represents shared SessionHandler functionality\n *\n * @ignore\n */\ninterface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @ignore\n */\nexport interface InferenceSessionHandler extends SessionHandler {\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a handler instance of a training inference session.\n *\n * @ignore\n */\nexport interface TrainingSessionHandler extends SessionHandler {\n  readonly evalInputNames: readonly string[];\n  readonly evalOutputNames: readonly string[];\n\n  lazyResetGrad(): Promise<void>;\n  runTrainStep(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n  runOptimizerStep(options: InferenceSession.RunOptions): Promise<void>;\n  runEvalStep(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @ignore\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(backendName: string): Promise<void>;\n\n  createInferenceSessionHandler(\n    uriOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n\n  createTrainingSessionHandler?(\n    checkpointStateUriOrBuffer: TrainingSession.UriOrBuffer,\n    trainModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    evalModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    optimizerModelUriOrBuffer: TrainingSession.UriOrBuffer,\n    options: InferenceSession.SessionOptions,\n  ): Promise<TrainingSessionHandler>;\n}\n\nexport { registerBackend } from './backend-impl.js';\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.20.1';\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from './env.js';\nimport { version } from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: { common: version },\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', { enumerable: true });\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env as envImpl } from './env-impl.js';\n\nexport declare namespace Env {\n  export type WasmPathPrefix = string;\n  export interface WasmFilePaths {\n    /**\n     * Specify the override path for the main .wasm file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .wasm file is:\n     * - `ort-wasm-simd-threaded.wasm` for default build\n     * - `ort-wasm-simd-threaded.jsep.wasm` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.wasm` for training build\n     */\n    wasm?: URL | string;\n    /**\n     * Specify the override path for the main .mjs file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .mjs file is:\n     * - `ort-wasm-simd-threaded.mjs` for default build\n     * - `ort-wasm-simd-threaded.jsep.mjs` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.mjs` for training build\n     */\n    mjs?: URL | string;\n  }\n  export type WasmPrefixOrFilePaths = WasmPathPrefix | WasmFilePaths;\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @deprecated This property is deprecated. Since SIMD is supported by all major JavaScript engines, non-SIMD\n     * build is no longer provided. This property will be removed in future release.\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * set or get a boolean value indicating whether to enable trace.\n     *\n     * @deprecated Use `env.trace` instead. If `env.trace` is set, this property will be ignored.\n     * @defaultValue `false`\n     */\n    trace?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm/.mjs files, or an object of overrides for both .wasm/.mjs file. The override\n     * path should be an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set a custom buffer which contains the WebAssembly binary. If this property is set, the `wasmPaths` property will\n     * be ignored.\n     */\n    wasmBinary?: ArrayBufferLike | Uint8Array;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl' | 'webgl2';\n    /**\n     * Get the WebGL rendering context.\n     */\n    readonly context: WebGLRenderingContext;\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly' | 'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuProfilingDataV1TensorMetadata {\n    dims: readonly number[];\n    dataType: string;\n  }\n  export interface WebGpuProfilingDataV1 {\n    version: 1;\n    inputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    outputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    kernelId: number;\n    kernelType: string;\n    kernelName: string;\n    programName: string;\n    startTime: number;\n    endTime: number;\n  }\n\n  export type WebGpuProfilingData = WebGpuProfilingDataV1;\n\n  export interface WebGpuFlags {\n    /**\n     * Set or get the profiling mode.\n     *\n     * @deprecated Use `env.webgpu.profiling.mode` instead. If `env.webgpu.profiling.mode` is set, this property will be\n     * ignored.\n     */\n    profilingMode?: 'off' | 'default';\n    /**\n     * Set or get the profiling configuration.\n     */\n    profiling?: {\n      /**\n       * Set or get the profiling mode.\n       *\n       * @defaultValue `'off'`\n       */\n      mode?: 'off' | 'default';\n\n      /**\n       * Set or get a callback function when a profiling data is received. If not set, the profiling data will be\n       * printed to console.\n       */\n      ondata?: (data: WebGpuProfilingData) => void;\n    };\n    /**\n     * Set or get the power preference.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    powerPreference?: 'low-power' | 'high-performance';\n    /**\n     * Set or get the force fallback adapter flag.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    forceFallbackAdapter?: boolean;\n    /**\n     * Set or get the adapter for WebGPU.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as the GPU adapter for the underlying WebGPU backend to create GPU device.\n     *\n     * If this property is not set, it will be available to get after the first WebGPU inference session is created. The\n     * value will be the GPU adapter that created by the underlying WebGPU backend.\n     *\n     * When use with TypeScript, the type of this property is `GPUAdapter` defined in \"@webgpu/types\".\n     * Use `const adapter = env.webgpu.adapter as GPUAdapter;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType}\n     */\n    adapter: unknown;\n    /**\n     * Get the device for WebGPU.\n     *\n     * This property is only available after the first WebGPU inference session is created.\n     *\n     * When use with TypeScript, the type of this property is `GPUDevice` defined in \"@webgpu/types\".\n     * Use `const device = env.webgpu.device as GPUDevice;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType} for more details about why not use types defined in \"@webgpu/types\".\n     */\n    readonly device: unknown;\n    /**\n     * Set or get whether validate input content.\n     *\n     * @defaultValue `false`\n     */\n    validateInputContent?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal';\n\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * set or get a boolean value indicating whether to enable trace.\n   *\n   * @defaultValue `false`\n   */\n  trace?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    readonly common: string;\n    readonly web?: string;\n    readonly node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    readonly 'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  readonly wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  readonly webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  readonly webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport { Tensor } from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : new OffscreenCanvas(1, 1);\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext = canvas.getContext('2d') as\n    | CanvasRenderingContext2D\n    | OffscreenCanvasRenderingContext2D\n    | null;\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n        const A = aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    if ('toDataURL' in canvas) {\n      return canvas.toDataURL();\n    } else {\n      throw new Error('toDataURL is not supported');\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext =\n    typeof document !== 'undefined'\n      ? document.createElement('canvas').getContext('2d')\n      : (new OffscreenCanvas(1, 1).getContext('2d') as OffscreenCanvasRenderingContext2D);\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (\n        (options.format !== undefined && channels === 4 && options.format !== 'RGBA') ||\n        (channels === 3 && options.format !== 'RGB' && options.format !== 'BGR')\n      ) {\n        throw new Error(\"Tensor format doesn't match input tensor dims\");\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0,\n      gImagePointer = 1,\n      bImagePointer = 2,\n      aImagePointer = 3;\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (\n      let i = 0;\n      i < height * width;\n      rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++\n    ) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n      image.data[aImagePointer] =\n        aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  OptionsDimensions,\n  OptionsFormat,\n  OptionsNormalizationParameters,\n  OptionsTensorFormat,\n  OptionsTensorLayout,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\ninterface BufferToTensorOptions\n  extends OptionsDimensions,\n    OptionsTensorLayout,\n    OptionsNormalizationParameters,\n    OptionsFormat,\n    OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer: Uint8ClampedArray | undefined, options: BufferToTensorOptions): Tensor => {\n  if (buffer === undefined) {\n    throw new Error('Image buffer must be defined');\n  }\n  if (options.height === undefined || options.width === undefined) {\n    throw new Error('Image height and width must be defined');\n  }\n  if (options.tensorLayout === 'NHWC') {\n    throw new Error('NHWC Tensor layout is not supported yet');\n  }\n\n  const { height, width } = options;\n\n  const norm = options.norm ?? { mean: 255, bias: 0 };\n  let normMean: [number, number, number, number];\n  let normBias: [number, number, number, number];\n\n  if (typeof norm.mean === 'number') {\n    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n  } else {\n    normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n  }\n\n  if (typeof norm.bias === 'number') {\n    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n  } else {\n    normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n  }\n\n  const inputformat = options.format !== undefined ? options.format : 'RGBA';\n  // default value is RGBA since imagedata and HTMLImageElement uses it\n\n  const outputformat =\n    options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n  const stride = height * width;\n  const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n  // Default pointer assignments\n  let step = 4,\n    rImagePointer = 0,\n    gImagePointer = 1,\n    bImagePointer = 2,\n    aImagePointer = 3;\n  let rTensorPointer = 0,\n    gTensorPointer = stride,\n    bTensorPointer = stride * 2,\n    aTensorPointer = -1;\n\n  // Updating the pointer assignments based on the input image format\n  if (inputformat === 'RGB') {\n    step = 3;\n    rImagePointer = 0;\n    gImagePointer = 1;\n    bImagePointer = 2;\n    aImagePointer = -1;\n  }\n\n  // Updating the pointer assignments based on the output tensor format\n  if (outputformat === 'RGBA') {\n    aTensorPointer = stride * 3;\n  } else if (outputformat === 'RBG') {\n    rTensorPointer = 0;\n    bTensorPointer = stride;\n    gTensorPointer = stride * 2;\n  } else if (outputformat === 'BGR') {\n    bTensorPointer = 0;\n    gTensorPointer = stride;\n    rTensorPointer = stride * 2;\n  }\n\n  for (\n    let i = 0;\n    i < stride;\n    i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step\n  ) {\n    float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n    float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n    float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n    if (aTensorPointer !== -1 && aImagePointer !== -1) {\n      float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n    }\n  }\n\n  // Float32Array -> ort.Tensor\n  const outputTensor =\n    outputformat === 'RGBA'\n      ? new Tensor('float32', float32Data, [1, 4, height, width])\n      : new Tensor('float32', float32Data, [1, 3, height, width]);\n  return outputTensor;\n};\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async (\n  image: ImageData | HTMLImageElement | ImageBitmap | string,\n  options?:\n    | TensorFromImageDataOptions\n    | TensorFromImageElementOptions\n    | TensorFromImageBitmapOptions\n    | TensorFromUrlOptions,\n): Promise<Tensor> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof ImageData !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray | undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  const createCanvas = () => {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(1, 1);\n    } else {\n      throw new Error('Canvas is not supported');\n    }\n  };\n  const createCanvasContext = (canvas: HTMLCanvasElement | OffscreenCanvas) => {\n    if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n      return canvas.getContext('2d');\n    } else if (canvas instanceof OffscreenCanvas) {\n      return canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    } else {\n      return null;\n    }\n  };\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = createCanvas();\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = createCanvasContext(tempCanvas);\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = createCanvas();\n      const context = createCanvasContext(canvas);\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = <T extends TensorInterface.TextureDataTypes>(\n  texture: TensorInterface.TextureType,\n  options: TensorFromTextureOptions<T>,\n): Tensor => {\n  const { width, height, download, dispose } = options;\n  // Always assume RGBAF32. TODO: support different texture format\n  const dims = [1, height, width, 4];\n  return new Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = <T extends TensorInterface.GpuBufferDataTypes>(\n  gpuBuffer: TensorInterface.GpuBufferType,\n  options: TensorFromGpuBufferOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromMLTensor().\n */\nexport const tensorFromMLTensor = <T extends TensorInterface.MLTensorDataTypes>(\n  mlTensor: TensorInterface.MLTensorType,\n  options: TensorFromMLTensorOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'ml-tensor', type: dataType ?? 'float32', mlTensor, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = <T extends TensorInterface.CpuPinnedDataTypes>(\n  type: T,\n  buffer: TensorInterface.DataTypeMap[T],\n  dims?: readonly number[],\n): Tensor => new Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type SupportedTypedArrayConstructors =\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor;\nexport type SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n  ['int4', Uint8Array],\n  ['uint4', Uint8Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, Tensor.Type>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n  if (!isTypedArrayChecked) {\n    isTypedArrayChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n    const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n    const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n    if (isFloat16ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n    } else {\n      // if Float16Array is not available, use 'Uint16Array' to store the data.\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n    }\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor => {\n  switch (tensor.location) {\n    case 'cpu':\n      return new Tensor(tensor.type, tensor.data, dims);\n    case 'cpu-pinned':\n      return new Tensor({\n        location: 'cpu-pinned',\n        data: tensor.data as CpuPinnedConstructorParameters['data'],\n        type: tensor.type as CpuPinnedConstructorParameters['type'],\n        dims,\n      });\n    case 'texture':\n      return new Tensor({\n        location: 'texture',\n        texture: tensor.texture,\n        type: tensor.type as TextureConstructorParameters['type'],\n        dims,\n      });\n    case 'gpu-buffer':\n      return new Tensor({\n        location: 'gpu-buffer',\n        gpuBuffer: tensor.gpuBuffer,\n        type: tensor.type as GpuBufferConstructorParameters['type'],\n        dims,\n      });\n    case 'ml-tensor':\n      return new Tensor({\n        location: 'ml-tensor',\n        mlTensor: tensor.mlTensor,\n        type: tensor.type as MLTensorConstructorParameters['type'],\n        dims,\n      });\n    default:\n      throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { tensorToDataURL, tensorToImageData } from './tensor-conversion-impl.js';\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport {\n  tensorFromGpuBuffer,\n  tensorFromImage,\n  tensorFromMLTensor,\n  tensorFromPinnedBuffer,\n  tensorFromTexture,\n} from './tensor-factory-impl.js';\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport {\n  checkTypedArray,\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP,\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP,\n  SupportedTypedArray,\n  SupportedTypedArrayConstructors,\n} from './tensor-impl-type-mapping.js';\nimport { calculateSize, tensorReshape } from './tensor-utils-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\n// type aliases for those exported from Tensor interface\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\ntype TensorDataLocation = TensorInterface.DataLocation;\ntype TensorTextureType = TensorInterface.TextureType;\ntype TensorGpuBufferType = TensorInterface.GpuBufferType;\ntype TensorMLTensorType = TensorInterface.MLTensorType;\n\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor implements TensorInterface {\n  // #region constructors\n\n  /**\n   * Construct a new CPU tensor object from the given type, data and dims.\n   */\n  constructor(\n    type: TensorType,\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly number[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new CPU tensor object from the given data and dims. Type is inferred from data.\n   */\n  constructor(\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new tensor object from the pinned CPU data with the given type and dims.\n   *\n   * Tensor's location will be set to 'cpu-pinned'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: CpuPinnedConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGL texture with the given type and dims.\n   *\n   * Tensor's location will be set to 'texture'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: TextureConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGPU buffer with the given type and dims.\n   *\n   * Tensor's location will be set to 'gpu-buffer'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: GpuBufferConstructorParameters);\n\n  /**\n   * Construct a new tensor object from the WebNN MLTensor with the given type and dims.\n   *\n   * Tensor's location will be set to 'ml-tensor'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: MLTensorConstructorParameters);\n\n  /**\n   * implementation.\n   */\n  constructor(\n    arg0:\n      | TensorType\n      | TensorDataType\n      | Uint8ClampedArray\n      | readonly string[]\n      | readonly boolean[]\n      | CpuPinnedConstructorParameters\n      | TextureConstructorParameters\n      | GpuBufferConstructorParameters\n      | MLTensorConstructorParameters,\n    arg1?: TensorDataType | Uint8ClampedArray | readonly number[] | readonly string[] | readonly boolean[],\n    arg2?: readonly number[],\n  ) {\n    // perform one-time check for BigInt/Float16Array support\n    checkTypedArray();\n\n    let type: TensorType;\n    let dims: readonly number[];\n\n    if (typeof arg0 === 'object' && 'location' in arg0) {\n      //\n      // constructing tensor from specific location\n      //\n      this.dataLocation = arg0.location;\n      type = arg0.type;\n      dims = arg0.dims;\n      switch (arg0.location) {\n        case 'cpu-pinned': {\n          const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n          if (!expectedTypedArrayConstructor) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n          }\n          if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n            throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n          }\n          this.cpuData = arg0.data;\n          break;\n        }\n        case 'texture': {\n          if (type !== 'float32') {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n          }\n          this.gpuTextureData = arg0.texture;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'gpu-buffer': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint8' &&\n            type !== 'bool' &&\n            type !== 'uint4' &&\n            type !== 'int4'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n          }\n          this.gpuBufferData = arg0.gpuBuffer;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'ml-tensor': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint64' &&\n            type !== 'int8' &&\n            type !== 'uint8' &&\n            type !== 'bool'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from MLTensor`);\n          }\n          this.mlTensorData = arg0.mlTensor;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        default:\n          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n      }\n    } else {\n      //\n      // constructing tensor of location 'cpu'\n      //\n      let data: TensorDataType;\n      let maybeDims: typeof arg1 | typeof arg2;\n      // check whether arg0 is type or data\n      if (typeof arg0 === 'string') {\n        //\n        // Override: constructor(type, data, ...)\n        //\n        type = arg0;\n        maybeDims = arg2;\n        if (arg0 === 'string') {\n          // string tensor\n          if (!Array.isArray(arg1)) {\n            throw new TypeError(\"A string tensor's data must be a string array.\");\n          }\n          // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n          // error will be populated at inference\n          data = arg1;\n        } else {\n          // numeric tensor\n          const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n          if (typedArrayConstructor === undefined) {\n            throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n          }\n          if (Array.isArray(arg1)) {\n            if ((arg0 === 'float16' && typedArrayConstructor === Uint16Array) || arg0 === 'uint4' || arg0 === 'int4') {\n              // - 'float16':\n              //   When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n              //\n              //   Throw error here because when user try to use number array as data,\n              //   e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n              //   Uint16Array.from(arg1) which generates wrong data.\n              //\n              // - 'uint4' and 'int4':\n              //   Uint8Array.from(arg1) will generate wrong data for 'uint4' and 'int4' tensor.\n              //\n              throw new TypeError(\n                `Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`,\n              );\n            } else if (arg0 === 'uint64' || arg0 === 'int64') {\n              // use 'as any' here because:\n              // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n              // see https://github.com/microsoft/TypeScript/issues/17002\n              // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n              // does not accept parameter mapFn.\n              // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n              // type.\n\n              // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1, BigInt);\n            } else {\n              // assume 'arg1' is of type \"readonly number[]\" here.\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1);\n            }\n          } else if (arg1 instanceof typedArrayConstructor) {\n            data = arg1;\n          } else if (arg1 instanceof Uint8ClampedArray) {\n            if (arg0 === 'uint8') {\n              data = Uint8Array.from(arg1);\n            } else {\n              throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);\n            }\n          } else {\n            throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n          }\n        }\n      } else {\n        //\n        // Override: constructor(data, ...)\n        //\n        maybeDims = arg1;\n        if (Array.isArray(arg0)) {\n          // only boolean[] and string[] is supported\n          if (arg0.length === 0) {\n            throw new TypeError('Tensor type cannot be inferred from an empty array.');\n          }\n          const firstElementType = typeof arg0[0];\n          if (firstElementType === 'string') {\n            type = 'string';\n            data = arg0;\n          } else if (firstElementType === 'boolean') {\n            type = 'bool';\n            // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n            // wrong type. We use 'as any' to make it happy.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = Uint8Array.from(arg0 as any[]);\n          } else {\n            throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n          }\n        } else if (arg0 instanceof Uint8ClampedArray) {\n          type = 'uint8';\n          data = Uint8Array.from(arg0);\n        } else {\n          // get tensor type from TypedArray\n          const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(\n            arg0.constructor as SupportedTypedArrayConstructors,\n          );\n          if (mappedType === undefined) {\n            throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n          }\n          type = mappedType;\n          data = arg0 as SupportedTypedArray;\n        }\n      }\n\n      // type and data is processed, now processing dims\n      if (maybeDims === undefined) {\n        // assume 1-D tensor if dims omitted\n        maybeDims = [data.length];\n      } else if (!Array.isArray(maybeDims)) {\n        throw new TypeError(\"A tensor's dims must be a number array\");\n      }\n      dims = maybeDims as readonly number[];\n\n      this.cpuData = data;\n      this.dataLocation = 'cpu';\n    }\n\n    // perform check on dims\n    const size = calculateSize(dims);\n    // if data is on CPU, check whether data length matches tensor size\n    if (this.cpuData && size !== this.cpuData.length) {\n      if ((type === 'uint4' || type === 'int4') && Math.ceil(size / 2) === this.cpuData.length) {\n        // for (u)int4, the data length is half of the tensor size. So we check this special case when size is odd.\n      } else {\n        throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n      }\n    }\n\n    this.type = type;\n    this.dims = dims;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(\n    image: ImageData | HTMLImageElement | ImageBitmap | string,\n    options?:\n      | TensorFromImageDataOptions\n      | TensorFromImageElementOptions\n      | TensorFromImageBitmapOptions\n      | TensorFromUrlOptions,\n  ): Promise<TensorInterface> {\n    return tensorFromImage(image, options);\n  }\n\n  static fromTexture<T extends TensorInterface.TextureDataTypes>(\n    texture: TensorTextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TensorInterface {\n    return tensorFromTexture(texture, options);\n  }\n\n  static fromGpuBuffer<T extends TensorInterface.GpuBufferDataTypes>(\n    gpuBuffer: TensorGpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TensorInterface {\n    return tensorFromGpuBuffer(gpuBuffer, options);\n  }\n\n  static fromMLTensor<T extends TensorInterface.MLTensorDataTypes>(\n    mlTensor: TensorMLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TensorInterface {\n    return tensorFromMLTensor(mlTensor, options);\n  }\n\n  static fromPinnedBuffer<T extends TensorInterface.CpuPinnedDataTypes>(\n    type: T,\n    buffer: TensorInterface.DataTypeMap[T],\n    dims?: readonly number[],\n  ): Tensor {\n    return tensorFromPinnedBuffer(type, buffer, dims);\n  }\n\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region public fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly size: number;\n  // #endregion\n\n  // #region private fields\n\n  /**\n   * stores the location of the data.\n   */\n  private dataLocation: TensorDataLocation;\n\n  /**\n   * stores the data on CPU, if location is 'cpu' or 'cpu-pinned'. otherwise empty.\n   */\n  private cpuData?: TensorDataType;\n\n  /**\n   * stores the underlying texture when location is 'texture'. otherwise empty.\n   */\n  private gpuTextureData?: TensorTextureType;\n\n  /**\n   * stores the underlying GPU buffer when location is 'gpu-buffer'. otherwise empty.\n   */\n  private gpuBufferData?: TensorGpuBufferType;\n\n  /**\n   * stores the underlying WebNN MLTensor when location is 'ml-tensor'. otherwise empty.\n   */\n  private mlTensorData?: TensorMLTensorType;\n\n  /**\n   * stores an optional downloader function to download data from GPU to CPU.\n   */\n  private downloader?(): Promise<TensorDataType>;\n\n  /**\n   * a flag indicating whether the data is being downloaded from GPU to CPU.\n   */\n  private isDownloading?: boolean;\n\n  /**\n   * stores an optional disposer function to dispose the underlying data.\n   */\n  private disposer?(): void;\n  // #endregion\n\n  // #region properties\n  get data(): TensorDataType {\n    this.ensureValid();\n    if (!this.cpuData) {\n      throw new Error(\n        'The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n          'or use `texture` or `gpuBuffer` property to access the GPU data directly.',\n      );\n    }\n    return this.cpuData;\n  }\n\n  get location(): TensorDataLocation {\n    return this.dataLocation;\n  }\n\n  get texture(): TensorTextureType {\n    this.ensureValid();\n    if (!this.gpuTextureData) {\n      throw new Error('The data is not stored as a WebGL texture.');\n    }\n    return this.gpuTextureData;\n  }\n\n  get gpuBuffer(): TensorGpuBufferType {\n    this.ensureValid();\n    if (!this.gpuBufferData) {\n      throw new Error('The data is not stored as a WebGPU buffer.');\n    }\n    return this.gpuBufferData;\n  }\n\n  get mlTensor(): TensorMLTensorType {\n    this.ensureValid();\n    if (!this.mlTensorData) {\n      throw new Error('The data is not stored as a WebNN MLTensor.');\n    }\n    return this.mlTensorData;\n  }\n  // #endregion\n\n  // #region methods\n\n  async getData(releaseData?: boolean): Promise<TensorDataType> {\n    this.ensureValid();\n    switch (this.dataLocation) {\n      case 'cpu':\n      case 'cpu-pinned':\n        return this.data;\n      case 'texture':\n      case 'gpu-buffer':\n      case 'ml-tensor': {\n        if (!this.downloader) {\n          throw new Error('The current tensor is not created with a specified data downloader.');\n        }\n        if (this.isDownloading) {\n          throw new Error('The current tensor is being downloaded.');\n        }\n        try {\n          this.isDownloading = true;\n          const data = await this.downloader();\n          this.downloader = undefined;\n          this.dataLocation = 'cpu';\n          this.cpuData = data;\n\n          if (releaseData && this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n          }\n\n          return data;\n        } finally {\n          this.isDownloading = false;\n        }\n      }\n      default:\n        throw new Error(`cannot get data from location: ${this.dataLocation}`);\n    }\n  }\n\n  dispose(): void {\n    if (this.isDownloading) {\n      throw new Error('The current tensor is being downloaded.');\n    }\n\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    this.cpuData = undefined;\n    this.gpuTextureData = undefined;\n    this.gpuBufferData = undefined;\n    this.mlTensorData = undefined;\n    this.downloader = undefined;\n    this.isDownloading = undefined;\n\n    this.dataLocation = 'none';\n  }\n\n  // #endregion\n\n  // #region tensor utilities\n  private ensureValid(): void {\n    if (this.dataLocation === 'none') {\n      throw new Error('The tensor is disposed.');\n    }\n  }\n\n  reshape(dims: readonly number[]): TensorInterface {\n    this.ensureValid();\n    if (this.downloader || this.disposer) {\n      throw new Error('Cannot reshape a tensor that owns GPU resource.');\n    }\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorFactory } from './tensor-factory.js';\nimport { Tensor as TensorImpl } from './tensor-impl.js';\nimport { TypedTensorUtils } from './tensor-utils.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is not on CPU (eg. it's in the form of WebGL texture or WebGPU buffer), throw error.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n  /**\n   * Get the location of the data.\n   */\n  readonly location: Tensor.DataLocation;\n  /**\n   * Get the WebGL texture that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGL texture, throw error.\n   */\n  readonly texture: Tensor.TextureType;\n  /**\n   * Get the WebGPU buffer that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGPU buffer, throw error.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n\n  /**\n   * Get the WebNN MLTensor that holds the tensor data.\n   *\n   * If the data is not in a WebNN MLTensor, throw error.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is on CPU, returns the data immediately.\n   * If the data is on GPU, downloads the data and returns the promise.\n   *\n   * @param releaseData - whether release the data on GPU. Ignore if data is already on CPU.\n   */\n  getData(releaseData?: boolean): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * Dispose the tensor data.\n   *\n   * If the data is on CPU, remove its internal reference to the underlying data.\n   * If the data is on GPU, release the data on GPU.\n   *\n   * After calling this function, the tensor is considered no longer valid. Its location will be set to 'none'.\n   */\n  dispose(): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: Uint8Array;\n    int4: Int8Array;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: number;\n    int4: number;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * supported data types for constructing a tensor from a pinned CPU buffer\n   */\n  export type CpuPinnedDataTypes = Exclude<Tensor.Type, 'string'>;\n\n  /**\n   * type alias for WebGL texture\n   */\n  export type TextureType = WebGLTexture;\n\n  /**\n   * supported data types for constructing a tensor from a WebGL texture\n   */\n  export type TextureDataTypes = 'float32';\n\n  /**\n   * type alias for WebGPU buffer\n   *\n   * The reason why we don't use type \"GPUBuffer\" defined in webgpu.d.ts from @webgpu/types is because \"@webgpu/types\"\n   * requires \"@types/dom-webcodecs\" as peer dependency when using TypeScript < v5.1 and its version need to be chosen\n   * carefully according to the TypeScript version being used. This means so far there is not a way to keep every\n   * TypeScript version happy. It turns out that we will easily broke users on some TypeScript version.\n   *\n   * for more info see https://github.com/gpuweb/types/issues/127\n   */\n  export type GpuBufferType = { size: number; mapState: 'unmapped' | 'pending' | 'mapped' };\n\n  /**\n   * type alias for WebNN MLTensor\n   *\n   * The specification for WebNN's MLTensor is currently in flux.\n   */\n  export type MLTensorType = unknown;\n\n  /**\n   * supported data types for constructing a tensor from a WebGPU buffer\n   */\n  export type GpuBufferDataTypes = 'float32' | 'float16' | 'int32' | 'int64' | 'uint32' | 'uint8' | 'bool';\n\n  /**\n   * supported data types for constructing a tensor from a WebNN MLTensor\n   */\n  export type MLTensorDataTypes =\n    | 'float32'\n    | 'float16'\n    | 'int8'\n    | 'uint8'\n    | 'int32'\n    | 'uint32'\n    | 'int64'\n    | 'uint64'\n    | 'bool';\n\n  /**\n   * represent where the tensor data is stored\n   */\n  export type DataLocation = 'none' | 'cpu' | 'cpu-pinned' | 'texture' | 'gpu-buffer' | 'ml-tensor';\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\n/**\n * type TensorConstructor defines the constructors of 'Tensor' to create CPU tensor instances.\n */\nexport interface TensorConstructor extends TensorFactory {\n  // #region CPU tensor - specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'string',\n    data: Tensor.DataTypeMap['string'] | readonly string[],\n    dims?: readonly number[],\n  ): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'bool',\n    data: Tensor.DataTypeMap['bool'] | readonly boolean[],\n    dims?: readonly number[],\n  ): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new uint8 tensor object from a Uint8ClampedArray, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (type: 'uint8', data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends 'uint64' | 'int64'>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly bigint[] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends Exclude<Tensor.Type, 'string' | 'bool' | 'uint64' | 'int64'>>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n  // #endregion\n\n  // #region CPU tensor - infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region CPU tensor - fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: Tensor.Type,\n    data: Tensor.DataType | readonly number[] | readonly string[] | readonly bigint[] | readonly boolean[],\n    dims?: readonly number[],\n  ): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from './env-impl.js';\n\n/**\n * @ignore\n */\nexport const TRACE = (deviceType: string, label: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.timeStamp(`${deviceType}::ORT::${label}`);\n};\n\nconst TRACE_FUNC = (msg: string, extraMsg?: string) => {\n  const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n  let hasTraceFunc = false;\n  for (let i = 0; i < stack.length; i++) {\n    if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n      let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n      if (extraMsg) {\n        label += `::${extraMsg}`;\n      }\n      TRACE('CPU', label);\n      return;\n    }\n    if (stack[i].includes('TRACE_FUNC')) {\n      hasTraceFunc = true;\n    }\n  }\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('BEGIN', extraMsg);\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('END', extraMsg);\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { InferenceSessionHandler } from './backend.js';\nimport { InferenceSession as InferenceSessionInterface } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { Tensor } from './tensor.js';\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from './trace.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: InferenceSessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const fetches: { [name: string]: OnnxValue | null } = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n        \"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\",\n      );\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError(\"'fetches' cannot be a Tensor\");\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError(\"'fetches' cannot be an empty array.\");\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError(\"'fetches' must be a string array or an object.\");\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'options' must be an object.\");\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: { [name: string]: OnnxValue } = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    TRACE_FUNC_END();\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: SessionOptions,\n  ): Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n    arg0: string | ArrayBufferLike | Uint8Array,\n    arg1?: SessionOptions | number,\n    arg2?: number,\n    arg3?: SessionOptions,\n  ): Promise<InferenceSessionInterface> {\n    TRACE_FUNC_BEGIN();\n    // either load from a file or buffer\n    let filePathOrUint8Array: string | Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (\n      arg0 instanceof ArrayBuffer ||\n      (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)\n    ) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError(\"'byteOffset' must be an integer.\");\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError(\"'byteLength' must be an integer.\");\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'byteLength' must be a number.\");\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n    }\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n    TRACE_FUNC_END();\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: InferenceSessionHandler;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl.js';\nimport { OnnxModelOptions } from './onnx-model.js';\nimport { OnnxValue, OnnxValueDataLocation } from './onnx-value.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = { readonly [name: string]: OnnxValue };\n  type NullableOnnxValueMapType = { readonly [name: string]: OnnxValue | null };\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[] | NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions extends OnnxModelOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The free dimension override.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    freeDimensionOverrides?: { readonly [dimensionName: string]: number };\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled' | 'basic' | 'extended' | 'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential' | 'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Whether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Specify string as a preferred data location for all outputs, or an object that use output names as keys and a\n     * preferred data location as corresponding values.\n     *\n     * This setting is available only in ONNXRuntime Web for WebGL and WebGPU EP.\n     */\n    preferredOutputLocation?: OnnxValueDataLocation | { readonly [outputName: string]: OnnxValueDataLocation };\n\n    /**\n     * Whether enable graph capture.\n     * This setting is available only in ONNXRuntime Web for WebGPU EP.\n     */\n    enableGraphCapture?: boolean;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu', 'dml' (win32), 'coreml' (macOS) and 'cuda' (linux).\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'webgpu' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    coreml: CoreMLExecutionProviderOption;\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    dml: DmlExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n    tensorrt: TensorRtExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    webgpu: WebGpuExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    qnn: QnnExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n    | ExecutionProviderOptionMap[ExecutionProviderName]\n    | ExecutionProviderOption\n    | ExecutionProviderName\n    | string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface DmlExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'dml';\n    deviceId?: number;\n  }\n  export interface TensorRtExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'tensorrt';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebGpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgpu';\n    preferredLayout?: 'NCHW' | 'NHWC';\n  }\n\n  // #region WebNN options\n\n  interface WebNNExecutionProviderName extends ExecutionProviderOption {\n    readonly name: 'webnn';\n  }\n\n  /**\n   * Represents a set of options for creating a WebNN MLContext.\n   *\n   * @see https://www.w3.org/TR/webnn/#dictdef-mlcontextoptions\n   */\n  export interface WebNNContextOptions {\n    deviceType?: 'cpu' | 'gpu' | 'npu';\n    numThreads?: number;\n    powerPreference?: 'default' | 'low-power' | 'high-performance';\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider without MLContext.\n   */\n  export interface WebNNOptionsWithoutMLContext extends WebNNExecutionProviderName, WebNNContextOptions {\n    context?: never;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext.\n   *\n   * When MLContext is provided, the deviceType is also required so that the WebNN EP can determine the preferred\n   * channel layout.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext\n   */\n  export interface WebNNOptionsWithMLContext\n    extends WebNNExecutionProviderName,\n      Omit<WebNNContextOptions, 'deviceType'>,\n      Required<Pick<WebNNContextOptions, 'deviceType'>> {\n    context: unknown /* MLContext */;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext which is created from GPUDevice.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext-gpudevice\n   */\n  export interface WebNNOptionsWebGpu extends WebNNExecutionProviderName {\n    context: unknown /* MLContext */;\n    gpuDevice: unknown /* GPUDevice */;\n  }\n\n  /**\n   * Options for WebNN execution provider.\n   */\n  export type WebNNExecutionProviderOption =\n    | WebNNOptionsWithoutMLContext\n    | WebNNOptionsWithMLContext\n    | WebNNOptionsWebGpu;\n\n  // #endregion\n\n  export interface QnnExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'qnn';\n    // TODO add flags\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    /**\n     * The bit flags for CoreML execution provider.\n     *\n     * ```\n     * COREML_FLAG_USE_CPU_ONLY = 0x001\n     * COREML_FLAG_ENABLE_ON_SUBGRAPH = 0x002\n     * COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 0x004\n     * COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 0x008\n     * COREML_FLAG_CREATE_MLPROGRAM = 0x010\n     * COREML_FLAG_USE_CPU_AND_GPU = 0x020\n     * ```\n     *\n     * See include/onnxruntime/core/providers/coreml/coreml_provider_factory.h for more details.\n     *\n     * This flag is available only in ONNXRuntime (Node.js binding).\n     */\n    coreMlFlags?: number;\n    /**\n     * Specify whether to use CPU only in CoreML EP.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    useCPUOnly?: boolean;\n    useCPUAndGPU?: boolean;\n    /**\n     * Specify whether to enable CoreML EP on subgraph.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    enableOnSubgraph?: boolean;\n    /**\n     * Specify whether to only enable CoreML EP for Apple devices with ANE (Apple Neural Engine).\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { OptionsFormat, OptionsNormalizationParameters, OptionsTensorLayout } from './tensor-factory.js';\n\nexport interface TensorToDataUrlOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface TensorToImageDataOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface ConversionUtils {\n  /**\n   * creates a DataURL instance from tensor\n   *\n   * @param options - An optional object representing options for creating a DataURL instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns a DataURL string representing the image converted from tensor data\n   */\n  toDataURL(options?: TensorToDataUrlOptions): string;\n\n  /**\n   * creates an ImageData instance from tensor\n   *\n   * @param options - An optional object representing options for creating an ImageData instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns an ImageData instance representing the image converted from tensor data\n   */\n  toImageData(options?: TensorToImageDataOptions): ImageData;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor, TypedTensor } from './tensor.js';\n\nexport type ImageFormat = 'RGB' | 'RGBA' | 'BGR' | 'RBG';\nexport type ImageTensorLayout = 'NHWC' | 'NCHW';\n\n// the following region contains type definitions for constructing tensor from a specific location.\n\n// #region types for constructing a tensor from a specific location\n\n/**\n * represent common properties of the parameter for constructing a tensor from a specific location.\n */\ninterface CommonConstructorParameters<T> extends Pick<Tensor, 'dims'> {\n  /**\n   * Specify the data type of the tensor.\n   */\n  readonly type: T;\n}\n\n/**\n * represent the parameter for constructing a tensor from a GPU resource.\n */\ninterface GpuResourceConstructorParameters<T extends Tensor.Type> {\n  /**\n   * an optional callback function to download data from GPU to CPU.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  download?(): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * an optional callback function that will be called when the tensor is disposed.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  dispose?(): void;\n}\n\n/**\n * represent the parameter for constructing a tensor from a pinned CPU buffer\n */\nexport interface CpuPinnedConstructorParameters<T extends Tensor.CpuPinnedDataTypes = Tensor.CpuPinnedDataTypes>\n  extends CommonConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'cpu-pinned'.\n   */\n  readonly location: 'cpu-pinned';\n  /**\n   * Specify the CPU pinned buffer that holds the tensor data.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGL texture\n */\nexport interface TextureConstructorParameters<T extends Tensor.TextureDataTypes = Tensor.TextureDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'texture'.\n   */\n  readonly location: 'texture';\n  /**\n   * Specify the WebGL texture that holds the tensor data.\n   */\n  readonly texture: Tensor.TextureType;\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGPU buffer\n */\nexport interface GpuBufferConstructorParameters<T extends Tensor.GpuBufferDataTypes = Tensor.GpuBufferDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'gpu-buffer'.\n   */\n  readonly location: 'gpu-buffer';\n  /**\n   * Specify the WebGPU buffer that holds the tensor data.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n}\n\nexport interface MLTensorConstructorParameters<T extends Tensor.MLTensorDataTypes = Tensor.MLTensorDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'ml-tensor'.\n   */\n  readonly location: 'ml-tensor';\n\n  /**\n   * Specify the WebNN MLTensor that holds the tensor data.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n}\n\n// #endregion\n\n// the following region contains type definitions of each individual options.\n// the tensor factory functions use a composition of those options as the parameter type.\n\n// #region Options fields\n\nexport interface OptionsFormat {\n  /**\n   * Describes the image format represented in RGBA color space.\n   */\n  format?: ImageFormat;\n}\n\nexport interface OptionsTensorFormat {\n  /**\n   * Describes the image format of the tensor.\n   *\n   * NOTE: this is different from option 'format'. While option 'format' represents the original image, 'tensorFormat'\n   * represents the target format of the tensor. A transpose will be performed if they are different.\n   */\n  tensorFormat?: ImageFormat;\n}\n\nexport interface OptionsTensorDataType {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: 'float32' | 'uint8';\n}\n\nexport interface OptionsTensorLayout {\n  /**\n   * Describes the tensor layout when representing data of one or more image(s).\n   */\n  tensorLayout?: ImageTensorLayout;\n}\n\nexport interface OptionsDimensions {\n  /**\n   * Describes the image height in pixel\n   */\n  height?: number;\n  /**\n   * Describes the image width in pixel\n   */\n  width?: number;\n}\n\nexport interface OptionResizedDimensions {\n  /**\n   * Describes the resized height. If omitted, original height will be used.\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n}\n\nexport interface OptionsNormalizationParameters {\n  /**\n   * Describes normalization parameters when preprocessing the image as model input.\n   *\n   * Data element are ranged from 0 to 255.\n   */\n  norm?: {\n    /**\n     * The 'bias' value for image normalization.\n     * - If omitted, use default value 0.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    bias?: number | [number, number, number] | [number, number, number, number];\n    /**\n     * The 'mean' value for image normalization.\n     * - If omitted, use default value 255.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    mean?: number | [number, number, number] | [number, number, number, number];\n  };\n}\n\n// #endregion\n\n// #region Options composition\n\nexport interface TensorFromImageDataOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageElementOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromUrlOptions\n  extends OptionsDimensions,\n    OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageBitmapOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromTextureOptions<T extends Tensor.TextureDataTypes>\n  extends Required<OptionsDimensions>,\n    OptionsFormat,\n    GpuResourceConstructorParameters<T> /* TODO: add more */ {}\n\nexport interface TensorFromGpuBufferOptions<T extends Tensor.GpuBufferDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\nexport interface TensorFromMLTensorOptions<T extends Tensor.MLTensorDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\n// #endregion\n\n/**\n * type TensorFactory defines the factory functions of 'Tensor' to create tensor instances from existing data or\n * resources.\n */\nexport interface TensorFactory {\n  /**\n   * create a tensor from an ImageData object\n   *\n   * @param imageData - the ImageData object to create tensor from\n   * @param options - An optional object representing options for creating tensor from ImageData.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageData: ImageData,\n    options?: TensorFromImageDataOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a HTMLImageElement object\n   *\n   * @param imageElement - the HTMLImageElement object to create tensor from\n   * @param options - An optional object representing options for creating tensor from HTMLImageElement.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageElement: HTMLImageElement,\n    options?: TensorFromImageElementOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from URL\n   *\n   * @param urlSource - a string as a URL to the image or a data URL containing the image data.\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from an ImageBitmap object\n   *\n   * @param bitmap - the ImageBitmap object to create tensor from\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    bitmap: ImageBitmap,\n    options: TensorFromImageBitmapOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a WebGL texture\n   *\n   * @param texture - the WebGLTexture object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGL texture.\n   *\n   * The options include following properties:\n   * - `width`: the width of the texture. Required.\n   * - `height`: the height of the texture. Required.\n   * - `format`: the format of the texture. If omitted, assume 'RGBA'.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromTexture<T extends Tensor.TextureDataTypes = 'float32'>(\n    texture: Tensor.TextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TypedTensor<'float32'>;\n\n  /**\n   * create a tensor from a WebGPU buffer\n   *\n   * @param buffer - the GPUBuffer object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGPU buffer.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromGpuBuffer<T extends Tensor.GpuBufferDataTypes>(\n    buffer: Tensor.GpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a WebNN MLTensor\n   *\n   * @param tensor - the MLTensor object to create tensor from\n   * @param options - An optional object representing options for creating tensor from a WebNN MLTensor.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from the MLTensor to CPU. If omitted, the MLTensor\n   * data will not be able to download. Usually, this is provided by the WebNN backend for the inference outputs.\n   * Users don't need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on the WebNN MLTensor. If omitted, the MLTensor will\n   * not be disposed. Usually, this is provided by the WebNN backend for the inference outputs. Users don't need to\n   * provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromMLTensor<T extends Tensor.MLTensorDataTypes>(\n    tensor: Tensor.MLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a pre-allocated buffer. The buffer will be used as a pinned buffer.\n   *\n   * @param type - the tensor element type.\n   * @param buffer - a TypedArray corresponding to the type.\n   * @param dims - specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   *\n   * @returns a tensor object\n   */\n  fromPinnedBuffer<T extends Exclude<Tensor.Type, 'string'>>(\n    type: T,\n    buffer: Tensor.DataTypeMap[T],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * A string that represents a file's URL or path.\n *\n * Path is vailable only in onnxruntime-node or onnxruntime-web running in Node.js.\n */\nexport type FileUrlOrPath = string;\n\n/**\n * A Blob object that represents a file.\n */\nexport type FileBlob = Blob;\n\n/**\n * A Uint8Array, ArrayBuffer or SharedArrayBuffer object that represents a file content.\n *\n * When it is an ArrayBuffer or SharedArrayBuffer, the whole buffer is assumed to be the file content.\n */\nexport type FileData = Uint8Array | ArrayBufferLike;\n\n/**\n * Represents a file that can be loaded by the ONNX Runtime JavaScript API.\n */\nexport type FileType = FileUrlOrPath | FileBlob | FileData;\n\n/**\n * Represents an external data file.\n */\nexport interface ExternalDataFileDescription {\n  /**\n   * Specify the external data file.\n   */\n  data: FileType;\n  /**\n   * Specify the file path.\n   */\n  path: string;\n}\n\n/**\n * Represents an external data file.\n *\n * When using a string, it should be a file URL or path that in the same directory as the model file.\n */\nexport type ExternalDataFileType = ExternalDataFileDescription | FileUrlOrPath;\n\n/**\n * Options for model loading.\n */\nexport interface OnnxModelOptions {\n  /**\n   * Specifying a list of files that represents the external data.\n   */\n  externalData?: readonly ExternalDataFileType[];\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor | NonTensorType;\n\n/**\n * Type OnnxValueDataLocation represents the location of the data of an OnnxValue.\n */\nexport type OnnxValueDataLocation = Tensor.DataLocation;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { SessionHandler, TrainingSessionHandler } from './backend.js';\nimport { InferenceSession as InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { Tensor } from './tensor.js';\nimport { TrainingSession as TrainingSessionInterface, TrainingSessionCreateOptions } from './training-session.js';\n\ntype SessionOptions = InferenceSession.SessionOptions;\ntype FeedsType = InferenceSession.FeedsType;\ntype FetchesType = InferenceSession.FetchesType;\ntype ReturnType = InferenceSession.ReturnType;\ntype RunOptions = InferenceSession.RunOptions;\n\nconst noBackendErrMsg: string =\n  'Training backend could not be resolved. ' + \"Make sure you're using the correct configuration & WebAssembly files.\";\n\nexport class TrainingSession implements TrainingSessionInterface {\n  private constructor(handler: TrainingSessionHandler, hasOptimizerModel: boolean, hasEvalModel: boolean) {\n    this.handler = handler;\n    this.hasOptimizerModel = hasOptimizerModel;\n    this.hasEvalModel = hasEvalModel;\n  }\n  private handler: TrainingSessionHandler;\n  private hasOptimizerModel: boolean;\n  private hasEvalModel: boolean;\n\n  get trainingInputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get trainingOutputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  get evalInputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalInputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n  get evalOutputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalOutputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n\n  static async create(\n    trainingOptions: TrainingSessionCreateOptions,\n    sessionOptions?: SessionOptions,\n  ): Promise<TrainingSession> {\n    const evalModel: string | Uint8Array = trainingOptions.evalModel || '';\n    const optimizerModel: string | Uint8Array = trainingOptions.optimizerModel || '';\n    const options: SessionOptions = sessionOptions || {};\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    if (backend.createTrainingSessionHandler) {\n      const handler = await backend.createTrainingSessionHandler(\n        trainingOptions.checkpointState,\n        trainingOptions.trainModel,\n        evalModel,\n        optimizerModel,\n        optionsWithValidatedEPs,\n      );\n      return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);\n    } else {\n      throw new Error(noBackendErrMsg);\n    }\n  }\n\n  /**\n   * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from\n   * the given parameters to SessionHandler.FetchesType and RunOptions.\n   *\n   * @param inputNames the feeds object is checked that they contain all input names in the provided list of input\n   * names.\n   * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output\n   * names.\n   * @param feeds the required input\n   * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object\n   * @param arg2 optional RunOptions object.\n   * @returns\n   */\n  typeNarrowingForRunStep(\n    inputNames: readonly string[],\n    outputNames: readonly string[],\n    feeds: FeedsType,\n    arg1?: FetchesType | RunOptions,\n    arg2?: RunOptions,\n  ): [SessionHandler.FetchesType, RunOptions] {\n    const fetches: { [name: string]: OnnxValue | null } = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n        \"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\",\n      );\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError(\"'fetches' cannot be a Tensor\");\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError(\"'fetches' cannot be an empty array.\");\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError(\"'fetches' must be a string array or an object.\");\n          }\n          if (outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'options' must be an object.\");\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSession.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n    }\n\n    // check if all inputs are in feed\n    for (const name of inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    return [fetches, options];\n  }\n\n  /**\n   * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler\n   * and changes it into a map of Tensors.\n   *\n   * @param results\n   * @returns\n   */\n  convertHandlerReturnTypeToMapOfTensors(results: SessionHandler.ReturnType): ReturnType {\n    const returnValue: { [name: string]: OnnxValue } = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    return returnValue;\n  }\n\n  async lazyResetGrad(): Promise<void> {\n    await this.handler.lazyResetGrad();\n  }\n\n  runTrainStep(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  runTrainStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async runTrainStep(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const [fetches, options] = this.typeNarrowingForRunStep(\n      this.trainingInputNames,\n      this.trainingOutputNames,\n      feeds,\n      arg1,\n      arg2,\n    );\n    const results = await this.handler.runTrainStep(feeds, fetches, options);\n    return this.convertHandlerReturnTypeToMapOfTensors(results);\n  }\n\n  async runOptimizerStep(options?: InferenceSession.RunOptions | undefined): Promise<void> {\n    if (this.hasOptimizerModel) {\n      await this.handler.runOptimizerStep(options || {});\n    } else {\n      throw new Error('This TrainingSession has no OptimizerModel loaded.');\n    }\n  }\n\n  runEvalStep(feeds: FeedsType, options?: RunOptions | undefined): Promise<ReturnType>;\n  runEvalStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions | undefined): Promise<ReturnType>;\n  async runEvalStep(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    if (this.hasEvalModel) {\n      const [fetches, options] = this.typeNarrowingForRunStep(\n        this.evalInputNames,\n        this.evalOutputNames,\n        feeds,\n        arg1,\n        arg2,\n      );\n      const results = await this.handler.runEvalStep(feeds, fetches, options);\n      return this.convertHandlerReturnTypeToMapOfTensors(results);\n    } else {\n      throw new Error('This TrainingSession has no EvalModel loaded.');\n    }\n  }\n\n  async getParametersSize(trainableOnly = true): Promise<number> {\n    return this.handler.getParametersSize(trainableOnly);\n  }\n\n  async loadParametersBuffer(array: Uint8Array, trainableOnly = true): Promise<void> {\n    const paramsSize = await this.getParametersSize(trainableOnly);\n    // checking that the size of the Uint8Array is equivalent to the byte length of a Float32Array of the number\n    // of parameters\n    if (array.length !== 4 * paramsSize) {\n      throw new Error(\n        'Size of the buffer passed into loadParametersBuffer must match the number of parameters in ' +\n          'the model. Please use getParametersSize method to check.',\n      );\n    }\n    return this.handler.loadParametersBuffer(array, trainableOnly);\n  }\n\n  async getContiguousParameters(trainableOnly = true): Promise<OnnxValue> {\n    return this.handler.getContiguousParameters(trainableOnly);\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { TrainingSession as TrainingSessionImpl } from './training-session-impl.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace TrainingSession {\n  /**\n   * Either URI file path (string) or Uint8Array containing model or checkpoint information.\n   */\n  type UriOrBuffer = string | Uint8Array;\n}\n\n/**\n * Represent a runtime instance of an ONNX training session,\n * which contains a model that can be trained, and, optionally,\n * an eval and optimizer model.\n */\nexport interface TrainingSession {\n  // #region run()\n\n  /**\n   * Lazily resets the gradients of all trainable parameters to zero. Should happen after the invocation of\n   * runOptimizerStep.\n   */\n  lazyResetGrad(): Promise<void>;\n\n  /**\n   * Run TrainStep asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for\n   detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  runTrainStep(\n    feeds: InferenceSession.FeedsType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single train step with the given inputs and options.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runTrainStep(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Runs a single optimizer step, which performs weight updates for the trainable parameters using the optimizer model.\n   *\n   * @param options - Optional. A set of options that controls the behavior of model optimizing.\n   */\n  runOptimizerStep(options?: InferenceSession.RunOptions): Promise<void>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n    feeds: InferenceSession.FeedsType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region copy parameters\n\n  /**\n   * Retrieves the size of all parameters for the training state. Calculates the total number of primitive (datatype of\n   * the parameters) elements of all the parameters in the training state.\n   *\n   * @param trainableOnly - When set to true, the size is calculated for trainable params only. Default value is true.\n   */\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n\n  /**\n   * Copies parameter values from the given buffer to the training state. Currently, only supporting models with\n   * parameters of type Float32.\n   *\n   * @param buffer - A Uint8Array representation of Float32 parameters.\n   * @param trainableOnly - True if trainable parameters only to be modified, false otherwise. Default value is true.\n   */\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n\n  /**\n   * Copies the model parameters to a contiguous buffer. Usually used in the context of Federated Learning.\n   * Currently, only supporting models with parameters of type Float32.\n   *\n   * @param trainableOnly - When set to true, only trainable parameters are copied. Trainable parameters are parameters\n   * for which requires_grad is set to true. Default value is true.\n   * @returns A promise that resolves to a Float32 OnnxValue of the requested parameters.\n   */\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded training model.\n   */\n  readonly trainingInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded training model.\n   */\n  readonly trainingOutputNames: readonly string[];\n\n  /**\n   * Get input names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalOutputNames: readonly string[];\n\n  // #endregion\n}\n\n/**\n * Represents the optional parameters that can be passed into the TrainingSessionFactory.\n */\nexport interface TrainingSessionCreateOptions {\n  /**\n   * URI or buffer for a .ckpt file that contains the checkpoint for the training model.\n   */\n  checkpointState: TrainingSession.UriOrBuffer;\n  /**\n   * URI or buffer for the .onnx training file.\n   */\n  trainModel: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx optimizer model file.\n   */\n  optimizerModel?: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx eval model file.\n   */\n  evalModel?: TrainingSession.UriOrBuffer;\n}\n\n/**\n * Defines method overload possibilities for creating a TrainingSession.\n */\nexport interface TrainingSessionFactory {\n  // #region create()\n\n  /**\n   * Creates a new TrainingSession and asynchronously loads any models passed in through trainingOptions\n   *\n   * @param trainingOptions specify models and checkpoints to load into the Training Session\n   * @param sessionOptions specify configuration for training session behavior\n   *\n   * @returns Promise that resolves to a TrainingSession object\n   */\n  create(\n    trainingOptions: TrainingSessionCreateOptions,\n    sessionOptions?: InferenceSession.SessionOptions,\n  ): Promise<TrainingSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const TrainingSession: TrainingSessionFactory = TrainingSessionImpl;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript/)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend.js';\nexport * from './env.js';\nexport * from './inference-session.js';\nexport * from './tensor.js';\nexport * from './tensor-conversion.js';\nexport * from './tensor-factory.js';\nexport * from './trace.js';\nexport * from './onnx-model.js';\nexport * from './onnx-value.js';\nexport * from './training-session.js';\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { WebGLContext } from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none' | 'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000,\n};\n\nconst LOGGER_PROVIDER_MAP: { readonly [provider: string]: Readonly<LoggerProvider> } = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider(),\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false,\n};\nlet LOGGER_CONFIG_MAP: { [category: string]: Readonly<Required<Logger.Config>> } = {\n  ['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>,\n};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n  arg0: string | Logger.Severity,\n  arg1?: string,\n  arg2?: string | number,\n  arg3?: number,\n): Logger.CategorizedLogger | void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category),\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, _stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: config.logDateTime === undefined ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation:\n          config.logSourceLocation === undefined ? previousConfig.logSourceLocation : config.logSourceLocation,\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session' | 'node' | 'op' | 'backend';\n\n  export interface Event {\n    end(): void | Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n    public category: Profiler.EventCategory,\n    public name: string,\n    public startTime: number,\n    private endCallback: (e: Event) => void | Promise<void>,\n    public timer?: WebGLQuery,\n    public ctx?: WebGLContext,\n  ) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n    public category: Profiler.EventCategory,\n    public name: string,\n    public startTime: number,\n    public endTime: number,\n  ) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(\n    category: Profiler.EventCategory,\n    name: string,\n    func: () => T | Promise<T>,\n    ctx?: WebGLContext,\n  ): T | Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>).then(\n          async (value) => {\n            // fulfilled\n            if (event) {\n              await event.end();\n            }\n            resolve(value);\n          },\n          async (reason) => {\n            // rejected\n            if (event) {\n              await event.end();\n            }\n            reject(reason);\n          },\n        );\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          eventRes.then(\n            () => {\n              // fulfilled\n              resolve(res);\n            },\n            (reason) => {\n              // rejected\n              reject(reason);\n            },\n          );\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, (e) => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async (e) => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n      `Profiler.${event.category}`,\n      `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`,\n    );\n  }\n\n  private flush(currentTime: number) {\n    if (\n      this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n      currentTime - this._flushTime >= this._flushIntervalInMilliseconds\n    ) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (\n        const previousPointer = this._flushPointer;\n        this._flushPointer < previousPointer + this._flushBatchSize && this._flushPointer < this._timingEvents.length;\n        this._flushPointer++\n      ) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = typeof performance !== 'undefined' && performance.now ? () => performance.now() : Date.now;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from './graph';\nimport { OperatorImplementation, OperatorInitialization } from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = '' | 'ai.onnx.ml' | 'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule =\n    | [string, Domain, string, OperatorImplementation<Graph.Node>]\n    | [string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {\n      // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {\n          // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return { opImpl, opInit };\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(\n    `cannot resolve operator '${node.opType}' with opsets: ${opsets\n      .map((set) => `${set.domain || 'ai.onnx'} v${set.version}`)\n      .join(', ')}`,\n  );\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n", "\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n", "/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n", "/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n", "// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport { flatbuffers } from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {\n    UNKNOWN = 0,\n    VALUE = 1,\n    PARAM = 2,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {\n    Primitive = 0,\n    Fused = 1,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {\n    NONE = 0,\n    tensor_type = 1,\n    sequence_type = 2,\n    map_type = 3,\n  }\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Dimension()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.DimensionValue()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string | null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    denotation(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n      builder: flatbuffers.Builder,\n      valueOffset: flatbuffers.Offset,\n      denotationOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt8(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string | null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    dimParam(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n      builder: flatbuffers.Builder,\n      dimType: onnxruntime.experimental.fbs.DimensionValueType,\n      dimValue: flatbuffers.Long,\n      dimParamOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(\n      bb: flatbuffers.ByteBuffer,\n      obj?: TensorTypeAndShape,\n    ): TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Shape()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n      builder: flatbuffers.Builder,\n      elemType: onnxruntime.experimental.fbs.TensorDataType,\n      shapeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n      builder: flatbuffers.Builder,\n      keyType: onnxruntime.experimental.fbs.TensorDataType,\n      valueTypeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n      builder: flatbuffers.Builder,\n      node_index: number,\n      src_arg_index: number,\n      dst_arg_index: number,\n    ): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.EdgeEnd()).__init(\n            this.bb!.__vector(this.bb_pos + offset) + index * 12,\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.EdgeEnd,\n    ): onnxruntime.experimental.fbs.EdgeEnd | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.EdgeEnd()).__init(\n            this.bb!.__vector(this.bb_pos + offset) + index * 12,\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n      builder: flatbuffers.Builder,\n      nodeIndex: number,\n      inputEdgesOffset: flatbuffers.Offset,\n      outputEdgesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string | null;\n    opType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    opType(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string | null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    executionProviderType(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.Attribute,\n    ): onnxruntime.experimental.fbs.Attribute | null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Attribute()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset\n        ? new Int32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      domainOffset: flatbuffers.Offset,\n      sinceVersion: number,\n      index: number,\n      opTypeOffset: flatbuffers.Offset,\n      type: onnxruntime.experimental.fbs.NodeType,\n      executionProviderTypeOffset: flatbuffers.Offset,\n      inputsOffset: flatbuffers.Offset,\n      outputsOffset: flatbuffers.Offset,\n      attributesOffset: flatbuffers.Offset,\n      inputArgCountsOffset: flatbuffers.Offset,\n      implicitInputsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.TypeInfo()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      typeOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string | null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    denotation(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? /**  */ this.bb!.readUint8(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n      builder: flatbuffers.Builder,\n      denotationOffset: flatbuffers.Offset,\n      valueType: onnxruntime.experimental.fbs.TypeInfoValue,\n      valueOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n      builder: flatbuffers.Builder,\n      domainOffset: flatbuffers.Offset,\n      version: flatbuffers.Long,\n    ): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset\n        ? new Uint8Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      dimsOffset: flatbuffers.Offset,\n      dataType: onnxruntime.experimental.fbs.TensorDataType,\n      rawDataOffset: flatbuffers.Offset,\n      stringDataOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n      builder: flatbuffers.Builder,\n      valuesOffset: flatbuffers.Offset,\n      indicesOffset: flatbuffers.Offset,\n      dimsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? /**  */ this.bb!.readInt32(this.bb_pos + offset)\n        : onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string | null;\n    s(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    s(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset\n        ? new Float32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset\n        ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    strings(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n      builder: flatbuffers.Builder,\n      nameOffset: flatbuffers.Offset,\n      docStringOffset: flatbuffers.Offset,\n      type: onnxruntime.experimental.fbs.AttributeType,\n      f: number,\n      i: flatbuffers.Long,\n      sOffset: flatbuffers.Offset,\n      tOffset: flatbuffers.Offset,\n      gOffset: flatbuffers.Offset,\n      floatsOffset: flatbuffers.Offset,\n      intsOffset: flatbuffers.Offset,\n      stringsOffset: flatbuffers.Offset,\n      tensorsOffset: flatbuffers.Offset,\n      graphsOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Tensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.ValueInfo,\n    ): onnxruntime.experimental.fbs.ValueInfo | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.ValueInfo()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Node()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.NodeEdge,\n    ): onnxruntime.experimental.fbs.NodeEdge | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.NodeEdge()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.SparseTensor,\n    ): onnxruntime.experimental.fbs.SparseTensor | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SparseTensor()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(\n      builder: flatbuffers.Builder,\n      data: flatbuffers.Offset[],\n    ): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n      builder: flatbuffers.Builder,\n      initializersOffset: flatbuffers.Offset,\n      nodeArgsOffset: flatbuffers.Offset,\n      nodesOffset: flatbuffers.Offset,\n      maxNodeIndex: number,\n      nodeEdgesOffset: flatbuffers.Offset,\n      inputsOffset: flatbuffers.Offset,\n      outputsOffset: flatbuffers.Offset,\n      sparseInitializersOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.OperatorSetId,\n    ): onnxruntime.experimental.fbs.OperatorSetId | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.OperatorSetId()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string | null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    producerName(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string | null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    producerVersion(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string | null;\n    domain(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    domain(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string | null;\n    docString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    docString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph | null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Graph()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string | null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    graphDocString(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n      builder: flatbuffers.Builder,\n      irVersion: flatbuffers.Long,\n      opsetImportOffset: flatbuffers.Offset,\n      producerNameOffset: flatbuffers.Offset,\n      producerVersionOffset: flatbuffers.Offset,\n      domainOffset: flatbuffers.Offset,\n      modelVersion: flatbuffers.Long,\n      docStringOffset: flatbuffers.Offset,\n      graphOffset: flatbuffers.Offset,\n      graphDocStringOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(\n      bb: flatbuffers.ByteBuffer,\n      obj?: KernelCreateInfos,\n    ): KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? new Uint32Array(\n            this.bb!.bytes().buffer,\n            this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n            this.bb!.__vector_len(this.bb_pos + offset),\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8)\n        : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n      builder: flatbuffers.Builder,\n      nodeIndicesOffset: flatbuffers.Offset,\n      kernelDefHashesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(\n      bb: flatbuffers.ByteBuffer,\n      obj?: SubGraphSessionState,\n    ): SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string | null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    graphId(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SessionState()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4); // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n      builder: flatbuffers.Builder,\n      graphIdOffset: flatbuffers.Offset,\n      sessionStateOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(\n      obj?: onnxruntime.experimental.fbs.KernelCreateInfos,\n    ): onnxruntime.experimental.fbs.KernelCreateInfos | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(\n      index: number,\n      obj?: onnxruntime.experimental.fbs.SubGraphSessionState,\n    ): onnxruntime.experimental.fbs.SubGraphSessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState()).__init(\n            this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(\n      builder: flatbuffers.Builder,\n      data: flatbuffers.Offset[],\n    ): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n      builder: flatbuffers.Builder,\n      kernelsOffset: flatbuffers.Offset,\n      subGraphSessionStatesOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string | null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    ortVersion(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model | null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.Model()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)\n        : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState | null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset\n        ? (obj || new onnxruntime.experimental.fbs.SessionState()).__init(\n            this.bb!.__indirect(this.bb_pos + offset),\n            this.bb!,\n          )\n        : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n      builder: flatbuffers.Builder,\n      ortVersionOffset: flatbuffers.Offset,\n      modelOffset: flatbuffers.Offset,\n      sessionStateOffset: flatbuffers.Offset,\n    ): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n", "\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n", "\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n", "\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n", "\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n", "\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n", "\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n", "\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n", "\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n", "\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n", "\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n", "\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n", "\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n", "\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n", "\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n", "\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n", "\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n", "\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n", "// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n", "/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n'use strict';\n\nvar $protobuf = require('protobufjs/minimal');\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});\n\n$root.onnx = (function () {\n  /**\n   * Namespace onnx.\n   * @exports onnx\n   * @namespace\n   */\n  var onnx = {};\n\n  /**\n   * Version enum.\n   * @name onnx.Version\n   * @enum {number}\n   * @property {number} _START_VERSION=0 _START_VERSION value\n   * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n   * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n   * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n   * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n   * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n   * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n   * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n   * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n   * @property {number} IR_VERSION=9 IR_VERSION value\n   */\n  onnx.Version = (function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[(valuesById[0] = '_START_VERSION')] = 0;\n    values[(valuesById[1] = 'IR_VERSION_2017_10_10')] = 1;\n    values[(valuesById[2] = 'IR_VERSION_2017_10_30')] = 2;\n    values[(valuesById[3] = 'IR_VERSION_2017_11_3')] = 3;\n    values[(valuesById[4] = 'IR_VERSION_2019_1_22')] = 4;\n    values[(valuesById[5] = 'IR_VERSION_2019_3_18')] = 5;\n    values[(valuesById[6] = 'IR_VERSION_2019_9_19')] = 6;\n    values[(valuesById[7] = 'IR_VERSION_2020_5_8')] = 7;\n    values[(valuesById[8] = 'IR_VERSION_2021_7_30')] = 8;\n    values[(valuesById[9] = 'IR_VERSION')] = 9;\n    return values;\n  })();\n\n  onnx.AttributeProto = (function () {\n    /**\n     * Properties of an AttributeProto.\n     * @memberof onnx\n     * @interface IAttributeProto\n     * @property {string|null} [name] AttributeProto name\n     * @property {string|null} [refAttrName] AttributeProto refAttrName\n     * @property {string|null} [docString] AttributeProto docString\n     * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n     * @property {number|null} [f] AttributeProto f\n     * @property {number|Long|null} [i] AttributeProto i\n     * @property {Uint8Array|null} [s] AttributeProto s\n     * @property {onnx.ITensorProto|null} [t] AttributeProto t\n     * @property {onnx.IGraphProto|null} [g] AttributeProto g\n     * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n     * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n     * @property {Array.<number>|null} [floats] AttributeProto floats\n     * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n     * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n     * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n     * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n     * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n     * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n     */\n\n    /**\n     * Constructs a new AttributeProto.\n     * @memberof onnx\n     * @classdesc Represents an AttributeProto.\n     * @implements IAttributeProto\n     * @constructor\n     * @param {onnx.IAttributeProto=} [properties] Properties to set\n     */\n    function AttributeProto(properties) {\n      this.floats = [];\n      this.ints = [];\n      this.strings = [];\n      this.tensors = [];\n      this.graphs = [];\n      this.sparseTensors = [];\n      this.typeProtos = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AttributeProto name.\n     * @member {string} name\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.name = '';\n\n    /**\n     * AttributeProto refAttrName.\n     * @member {string} refAttrName\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.refAttrName = '';\n\n    /**\n     * AttributeProto docString.\n     * @member {string} docString\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.docString = '';\n\n    /**\n     * AttributeProto type.\n     * @member {onnx.AttributeProto.AttributeType} type\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.type = 0;\n\n    /**\n     * AttributeProto f.\n     * @member {number} f\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.f = 0;\n\n    /**\n     * AttributeProto i.\n     * @member {number|Long} i\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * AttributeProto s.\n     * @member {Uint8Array} s\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.s = $util.newBuffer([]);\n\n    /**\n     * AttributeProto t.\n     * @member {onnx.ITensorProto|null|undefined} t\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.t = null;\n\n    /**\n     * AttributeProto g.\n     * @member {onnx.IGraphProto|null|undefined} g\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.g = null;\n\n    /**\n     * AttributeProto sparseTensor.\n     * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.sparseTensor = null;\n\n    /**\n     * AttributeProto tp.\n     * @member {onnx.ITypeProto|null|undefined} tp\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.tp = null;\n\n    /**\n     * AttributeProto floats.\n     * @member {Array.<number>} floats\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.floats = $util.emptyArray;\n\n    /**\n     * AttributeProto ints.\n     * @member {Array.<number|Long>} ints\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.ints = $util.emptyArray;\n\n    /**\n     * AttributeProto strings.\n     * @member {Array.<Uint8Array>} strings\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.strings = $util.emptyArray;\n\n    /**\n     * AttributeProto tensors.\n     * @member {Array.<onnx.ITensorProto>} tensors\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.tensors = $util.emptyArray;\n\n    /**\n     * AttributeProto graphs.\n     * @member {Array.<onnx.IGraphProto>} graphs\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.graphs = $util.emptyArray;\n\n    /**\n     * AttributeProto sparseTensors.\n     * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n    /**\n     * AttributeProto typeProtos.\n     * @member {Array.<onnx.ITypeProto>} typeProtos\n     * @memberof onnx.AttributeProto\n     * @instance\n     */\n    AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n    /**\n     * Creates a new AttributeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto=} [properties] Properties to set\n     * @returns {onnx.AttributeProto} AttributeProto instance\n     */\n    AttributeProto.create = function create(properties) {\n      return new AttributeProto(properties);\n    };\n\n    /**\n     * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AttributeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.f != null && Object.hasOwnProperty.call(message, 'f'))\n        writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.f);\n      if (message.i != null && Object.hasOwnProperty.call(message, 'i'))\n        writer.uint32(/* id 3, wireType 0 =*/ 24).int64(message.i);\n      if (message.s != null && Object.hasOwnProperty.call(message, 's'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).bytes(message.s);\n      if (message.t != null && Object.hasOwnProperty.call(message, 't'))\n        $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n      if (message.g != null && Object.hasOwnProperty.call(message, 'g'))\n        $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n      if (message.floats != null && message.floats.length) {\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork();\n        for (var i = 0; i < message.floats.length; ++i) writer.float(message.floats[i]);\n        writer.ldelim();\n      }\n      if (message.ints != null && message.ints.length) {\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork();\n        for (var i = 0; i < message.ints.length; ++i) writer.int64(message.ints[i]);\n        writer.ldelim();\n      }\n      if (message.strings != null && message.strings.length)\n        for (var i = 0; i < message.strings.length; ++i)\n          writer.uint32(/* id 9, wireType 2 =*/ 74).bytes(message.strings[i]);\n      if (message.tensors != null && message.tensors.length)\n        for (var i = 0; i < message.tensors.length; ++i)\n          $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/ 82).fork()).ldelim();\n      if (message.graphs != null && message.graphs.length)\n        for (var i = 0; i < message.graphs.length; ++i)\n          $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/ 90).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 13, wireType 2 =*/ 106).string(message.docString);\n      if (message.tp != null && Object.hasOwnProperty.call(message, 'tp'))\n        $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/ 114).fork()).ldelim();\n      if (message.typeProtos != null && message.typeProtos.length)\n        for (var i = 0; i < message.typeProtos.length; ++i)\n          $root.onnx.TypeProto.encode(\n            message.typeProtos[i],\n            writer.uint32(/* id 15, wireType 2 =*/ 122).fork(),\n          ).ldelim();\n      if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n        writer.uint32(/* id 20, wireType 0 =*/ 160).int32(message.type);\n      if (message.refAttrName != null && Object.hasOwnProperty.call(message, 'refAttrName'))\n        writer.uint32(/* id 21, wireType 2 =*/ 170).string(message.refAttrName);\n      if (message.sparseTensor != null && Object.hasOwnProperty.call(message, 'sparseTensor'))\n        $root.onnx.SparseTensorProto.encode(\n          message.sparseTensor,\n          writer.uint32(/* id 22, wireType 2 =*/ 178).fork(),\n        ).ldelim();\n      if (message.sparseTensors != null && message.sparseTensors.length)\n        for (var i = 0; i < message.sparseTensors.length; ++i)\n          $root.onnx.SparseTensorProto.encode(\n            message.sparseTensors[i],\n            writer.uint32(/* id 23, wireType 2 =*/ 186).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AttributeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.AttributeProto} AttributeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AttributeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.AttributeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 21: {\n            message.refAttrName = reader.string();\n            break;\n          }\n          case 13: {\n            message.docString = reader.string();\n            break;\n          }\n          case 20: {\n            message.type = reader.int32();\n            break;\n          }\n          case 2: {\n            message.f = reader.float();\n            break;\n          }\n          case 3: {\n            message.i = reader.int64();\n            break;\n          }\n          case 4: {\n            message.s = reader.bytes();\n            break;\n          }\n          case 5: {\n            message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 6: {\n            message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 22: {\n            message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 14: {\n            message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 7: {\n            if (!(message.floats && message.floats.length)) message.floats = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.floats.push(reader.float());\n            } else message.floats.push(reader.float());\n            break;\n          }\n          case 8: {\n            if (!(message.ints && message.ints.length)) message.ints = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.ints.push(reader.int64());\n            } else message.ints.push(reader.int64());\n            break;\n          }\n          case 9: {\n            if (!(message.strings && message.strings.length)) message.strings = [];\n            message.strings.push(reader.bytes());\n            break;\n          }\n          case 10: {\n            if (!(message.tensors && message.tensors.length)) message.tensors = [];\n            message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 11: {\n            if (!(message.graphs && message.graphs.length)) message.graphs = [];\n            message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 23: {\n            if (!(message.sparseTensors && message.sparseTensors.length)) message.sparseTensors = [];\n            message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 15: {\n            if (!(message.typeProtos && message.typeProtos.length)) message.typeProtos = [];\n            message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.AttributeProto} AttributeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AttributeProto message.\n     * @function verify\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AttributeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.refAttrName != null && message.hasOwnProperty('refAttrName'))\n        if (!$util.isString(message.refAttrName)) return 'refAttrName: string expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.type != null && message.hasOwnProperty('type'))\n        switch (message.type) {\n          default:\n            return 'type: enum value expected';\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 11:\n          case 13:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 12:\n          case 14:\n            break;\n        }\n      if (message.f != null && message.hasOwnProperty('f'))\n        if (typeof message.f !== 'number') return 'f: number expected';\n      if (message.i != null && message.hasOwnProperty('i'))\n        if (\n          !$util.isInteger(message.i) &&\n          !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high))\n        )\n          return 'i: integer|Long expected';\n      if (message.s != null && message.hasOwnProperty('s'))\n        if (!((message.s && typeof message.s.length === 'number') || $util.isString(message.s)))\n          return 's: buffer expected';\n      if (message.t != null && message.hasOwnProperty('t')) {\n        var error = $root.onnx.TensorProto.verify(message.t);\n        if (error) return 't.' + error;\n      }\n      if (message.g != null && message.hasOwnProperty('g')) {\n        var error = $root.onnx.GraphProto.verify(message.g);\n        if (error) return 'g.' + error;\n      }\n      if (message.sparseTensor != null && message.hasOwnProperty('sparseTensor')) {\n        var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n        if (error) return 'sparseTensor.' + error;\n      }\n      if (message.tp != null && message.hasOwnProperty('tp')) {\n        var error = $root.onnx.TypeProto.verify(message.tp);\n        if (error) return 'tp.' + error;\n      }\n      if (message.floats != null && message.hasOwnProperty('floats')) {\n        if (!Array.isArray(message.floats)) return 'floats: array expected';\n        for (var i = 0; i < message.floats.length; ++i)\n          if (typeof message.floats[i] !== 'number') return 'floats: number[] expected';\n      }\n      if (message.ints != null && message.hasOwnProperty('ints')) {\n        if (!Array.isArray(message.ints)) return 'ints: array expected';\n        for (var i = 0; i < message.ints.length; ++i)\n          if (\n            !$util.isInteger(message.ints[i]) &&\n            !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high))\n          )\n            return 'ints: integer|Long[] expected';\n      }\n      if (message.strings != null && message.hasOwnProperty('strings')) {\n        if (!Array.isArray(message.strings)) return 'strings: array expected';\n        for (var i = 0; i < message.strings.length; ++i)\n          if (\n            !(\n              (message.strings[i] && typeof message.strings[i].length === 'number') ||\n              $util.isString(message.strings[i])\n            )\n          )\n            return 'strings: buffer[] expected';\n      }\n      if (message.tensors != null && message.hasOwnProperty('tensors')) {\n        if (!Array.isArray(message.tensors)) return 'tensors: array expected';\n        for (var i = 0; i < message.tensors.length; ++i) {\n          var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n          if (error) return 'tensors.' + error;\n        }\n      }\n      if (message.graphs != null && message.hasOwnProperty('graphs')) {\n        if (!Array.isArray(message.graphs)) return 'graphs: array expected';\n        for (var i = 0; i < message.graphs.length; ++i) {\n          var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n          if (error) return 'graphs.' + error;\n        }\n      }\n      if (message.sparseTensors != null && message.hasOwnProperty('sparseTensors')) {\n        if (!Array.isArray(message.sparseTensors)) return 'sparseTensors: array expected';\n        for (var i = 0; i < message.sparseTensors.length; ++i) {\n          var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n          if (error) return 'sparseTensors.' + error;\n        }\n      }\n      if (message.typeProtos != null && message.hasOwnProperty('typeProtos')) {\n        if (!Array.isArray(message.typeProtos)) return 'typeProtos: array expected';\n        for (var i = 0; i < message.typeProtos.length; ++i) {\n          var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n          if (error) return 'typeProtos.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.AttributeProto} AttributeProto\n     */\n    AttributeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.AttributeProto) return object;\n      var message = new $root.onnx.AttributeProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.refAttrName != null) message.refAttrName = String(object.refAttrName);\n      if (object.docString != null) message.docString = String(object.docString);\n      switch (object.type) {\n        default:\n          if (typeof object.type === 'number') {\n            message.type = object.type;\n            break;\n          }\n          break;\n        case 'UNDEFINED':\n        case 0:\n          message.type = 0;\n          break;\n        case 'FLOAT':\n        case 1:\n          message.type = 1;\n          break;\n        case 'INT':\n        case 2:\n          message.type = 2;\n          break;\n        case 'STRING':\n        case 3:\n          message.type = 3;\n          break;\n        case 'TENSOR':\n        case 4:\n          message.type = 4;\n          break;\n        case 'GRAPH':\n        case 5:\n          message.type = 5;\n          break;\n        case 'SPARSE_TENSOR':\n        case 11:\n          message.type = 11;\n          break;\n        case 'TYPE_PROTO':\n        case 13:\n          message.type = 13;\n          break;\n        case 'FLOATS':\n        case 6:\n          message.type = 6;\n          break;\n        case 'INTS':\n        case 7:\n          message.type = 7;\n          break;\n        case 'STRINGS':\n        case 8:\n          message.type = 8;\n          break;\n        case 'TENSORS':\n        case 9:\n          message.type = 9;\n          break;\n        case 'GRAPHS':\n        case 10:\n          message.type = 10;\n          break;\n        case 'SPARSE_TENSORS':\n        case 12:\n          message.type = 12;\n          break;\n        case 'TYPE_PROTOS':\n        case 14:\n          message.type = 14;\n          break;\n      }\n      if (object.f != null) message.f = Number(object.f);\n      if (object.i != null)\n        if ($util.Long) (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n        else if (typeof object.i === 'string') message.i = parseInt(object.i, 10);\n        else if (typeof object.i === 'number') message.i = object.i;\n        else if (typeof object.i === 'object')\n          message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n      if (object.s != null)\n        if (typeof object.s === 'string')\n          $util.base64.decode(object.s, (message.s = $util.newBuffer($util.base64.length(object.s))), 0);\n        else if (object.s.length >= 0) message.s = object.s;\n      if (object.t != null) {\n        if (typeof object.t !== 'object') throw TypeError('.onnx.AttributeProto.t: object expected');\n        message.t = $root.onnx.TensorProto.fromObject(object.t);\n      }\n      if (object.g != null) {\n        if (typeof object.g !== 'object') throw TypeError('.onnx.AttributeProto.g: object expected');\n        message.g = $root.onnx.GraphProto.fromObject(object.g);\n      }\n      if (object.sparseTensor != null) {\n        if (typeof object.sparseTensor !== 'object')\n          throw TypeError('.onnx.AttributeProto.sparseTensor: object expected');\n        message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n      }\n      if (object.tp != null) {\n        if (typeof object.tp !== 'object') throw TypeError('.onnx.AttributeProto.tp: object expected');\n        message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n      }\n      if (object.floats) {\n        if (!Array.isArray(object.floats)) throw TypeError('.onnx.AttributeProto.floats: array expected');\n        message.floats = [];\n        for (var i = 0; i < object.floats.length; ++i) message.floats[i] = Number(object.floats[i]);\n      }\n      if (object.ints) {\n        if (!Array.isArray(object.ints)) throw TypeError('.onnx.AttributeProto.ints: array expected');\n        message.ints = [];\n        for (var i = 0; i < object.ints.length; ++i)\n          if ($util.Long) (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n          else if (typeof object.ints[i] === 'string') message.ints[i] = parseInt(object.ints[i], 10);\n          else if (typeof object.ints[i] === 'number') message.ints[i] = object.ints[i];\n          else if (typeof object.ints[i] === 'object')\n            message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n      }\n      if (object.strings) {\n        if (!Array.isArray(object.strings)) throw TypeError('.onnx.AttributeProto.strings: array expected');\n        message.strings = [];\n        for (var i = 0; i < object.strings.length; ++i)\n          if (typeof object.strings[i] === 'string')\n            $util.base64.decode(\n              object.strings[i],\n              (message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i]))),\n              0,\n            );\n          else if (object.strings[i].length >= 0) message.strings[i] = object.strings[i];\n      }\n      if (object.tensors) {\n        if (!Array.isArray(object.tensors)) throw TypeError('.onnx.AttributeProto.tensors: array expected');\n        message.tensors = [];\n        for (var i = 0; i < object.tensors.length; ++i) {\n          if (typeof object.tensors[i] !== 'object') throw TypeError('.onnx.AttributeProto.tensors: object expected');\n          message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n        }\n      }\n      if (object.graphs) {\n        if (!Array.isArray(object.graphs)) throw TypeError('.onnx.AttributeProto.graphs: array expected');\n        message.graphs = [];\n        for (var i = 0; i < object.graphs.length; ++i) {\n          if (typeof object.graphs[i] !== 'object') throw TypeError('.onnx.AttributeProto.graphs: object expected');\n          message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n        }\n      }\n      if (object.sparseTensors) {\n        if (!Array.isArray(object.sparseTensors)) throw TypeError('.onnx.AttributeProto.sparseTensors: array expected');\n        message.sparseTensors = [];\n        for (var i = 0; i < object.sparseTensors.length; ++i) {\n          if (typeof object.sparseTensors[i] !== 'object')\n            throw TypeError('.onnx.AttributeProto.sparseTensors: object expected');\n          message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n        }\n      }\n      if (object.typeProtos) {\n        if (!Array.isArray(object.typeProtos)) throw TypeError('.onnx.AttributeProto.typeProtos: array expected');\n        message.typeProtos = [];\n        for (var i = 0; i < object.typeProtos.length; ++i) {\n          if (typeof object.typeProtos[i] !== 'object')\n            throw TypeError('.onnx.AttributeProto.typeProtos: object expected');\n          message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {onnx.AttributeProto} message AttributeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AttributeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.floats = [];\n        object.ints = [];\n        object.strings = [];\n        object.tensors = [];\n        object.graphs = [];\n        object.typeProtos = [];\n        object.sparseTensors = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.f = 0;\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.i = options.longs === String ? '0' : 0;\n        if (options.bytes === String) object.s = '';\n        else {\n          object.s = [];\n          if (options.bytes !== Array) object.s = $util.newBuffer(object.s);\n        }\n        object.t = null;\n        object.g = null;\n        object.docString = '';\n        object.tp = null;\n        object.type = options.enums === String ? 'UNDEFINED' : 0;\n        object.refAttrName = '';\n        object.sparseTensor = null;\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.f != null && message.hasOwnProperty('f'))\n        object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n      if (message.i != null && message.hasOwnProperty('i'))\n        if (typeof message.i === 'number') object.i = options.longs === String ? String(message.i) : message.i;\n        else\n          object.i =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.i)\n              : options.longs === Number\n                ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber()\n                : message.i;\n      if (message.s != null && message.hasOwnProperty('s'))\n        object.s =\n          options.bytes === String\n            ? $util.base64.encode(message.s, 0, message.s.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.s)\n              : message.s;\n      if (message.t != null && message.hasOwnProperty('t'))\n        object.t = $root.onnx.TensorProto.toObject(message.t, options);\n      if (message.g != null && message.hasOwnProperty('g'))\n        object.g = $root.onnx.GraphProto.toObject(message.g, options);\n      if (message.floats && message.floats.length) {\n        object.floats = [];\n        for (var j = 0; j < message.floats.length; ++j)\n          object.floats[j] =\n            options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n      }\n      if (message.ints && message.ints.length) {\n        object.ints = [];\n        for (var j = 0; j < message.ints.length; ++j)\n          if (typeof message.ints[j] === 'number')\n            object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n          else\n            object.ints[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.ints[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber()\n                  : message.ints[j];\n      }\n      if (message.strings && message.strings.length) {\n        object.strings = [];\n        for (var j = 0; j < message.strings.length; ++j)\n          object.strings[j] =\n            options.bytes === String\n              ? $util.base64.encode(message.strings[j], 0, message.strings[j].length)\n              : options.bytes === Array\n                ? Array.prototype.slice.call(message.strings[j])\n                : message.strings[j];\n      }\n      if (message.tensors && message.tensors.length) {\n        object.tensors = [];\n        for (var j = 0; j < message.tensors.length; ++j)\n          object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n      }\n      if (message.graphs && message.graphs.length) {\n        object.graphs = [];\n        for (var j = 0; j < message.graphs.length; ++j)\n          object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.tp != null && message.hasOwnProperty('tp'))\n        object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n      if (message.typeProtos && message.typeProtos.length) {\n        object.typeProtos = [];\n        for (var j = 0; j < message.typeProtos.length; ++j)\n          object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n      }\n      if (message.type != null && message.hasOwnProperty('type'))\n        object.type =\n          options.enums === String\n            ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined\n              ? message.type\n              : $root.onnx.AttributeProto.AttributeType[message.type]\n            : message.type;\n      if (message.refAttrName != null && message.hasOwnProperty('refAttrName'))\n        object.refAttrName = message.refAttrName;\n      if (message.sparseTensor != null && message.hasOwnProperty('sparseTensor'))\n        object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n      if (message.sparseTensors && message.sparseTensors.length) {\n        object.sparseTensors = [];\n        for (var j = 0; j < message.sparseTensors.length; ++j)\n          object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this AttributeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.AttributeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AttributeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for AttributeProto\n     * @function getTypeUrl\n     * @memberof onnx.AttributeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.AttributeProto';\n    };\n\n    /**\n     * AttributeType enum.\n     * @name onnx.AttributeProto.AttributeType\n     * @enum {number}\n     * @property {number} UNDEFINED=0 UNDEFINED value\n     * @property {number} FLOAT=1 FLOAT value\n     * @property {number} INT=2 INT value\n     * @property {number} STRING=3 STRING value\n     * @property {number} TENSOR=4 TENSOR value\n     * @property {number} GRAPH=5 GRAPH value\n     * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n     * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n     * @property {number} FLOATS=6 FLOATS value\n     * @property {number} INTS=7 INTS value\n     * @property {number} STRINGS=8 STRINGS value\n     * @property {number} TENSORS=9 TENSORS value\n     * @property {number} GRAPHS=10 GRAPHS value\n     * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n     * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n     */\n    AttributeProto.AttributeType = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'UNDEFINED')] = 0;\n      values[(valuesById[1] = 'FLOAT')] = 1;\n      values[(valuesById[2] = 'INT')] = 2;\n      values[(valuesById[3] = 'STRING')] = 3;\n      values[(valuesById[4] = 'TENSOR')] = 4;\n      values[(valuesById[5] = 'GRAPH')] = 5;\n      values[(valuesById[11] = 'SPARSE_TENSOR')] = 11;\n      values[(valuesById[13] = 'TYPE_PROTO')] = 13;\n      values[(valuesById[6] = 'FLOATS')] = 6;\n      values[(valuesById[7] = 'INTS')] = 7;\n      values[(valuesById[8] = 'STRINGS')] = 8;\n      values[(valuesById[9] = 'TENSORS')] = 9;\n      values[(valuesById[10] = 'GRAPHS')] = 10;\n      values[(valuesById[12] = 'SPARSE_TENSORS')] = 12;\n      values[(valuesById[14] = 'TYPE_PROTOS')] = 14;\n      return values;\n    })();\n\n    return AttributeProto;\n  })();\n\n  onnx.ValueInfoProto = (function () {\n    /**\n     * Properties of a ValueInfoProto.\n     * @memberof onnx\n     * @interface IValueInfoProto\n     * @property {string|null} [name] ValueInfoProto name\n     * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n     * @property {string|null} [docString] ValueInfoProto docString\n     */\n\n    /**\n     * Constructs a new ValueInfoProto.\n     * @memberof onnx\n     * @classdesc Represents a ValueInfoProto.\n     * @implements IValueInfoProto\n     * @constructor\n     * @param {onnx.IValueInfoProto=} [properties] Properties to set\n     */\n    function ValueInfoProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ValueInfoProto name.\n     * @member {string} name\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.name = '';\n\n    /**\n     * ValueInfoProto type.\n     * @member {onnx.ITypeProto|null|undefined} type\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.type = null;\n\n    /**\n     * ValueInfoProto docString.\n     * @member {string} docString\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     */\n    ValueInfoProto.prototype.docString = '';\n\n    /**\n     * Creates a new ValueInfoProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto=} [properties] Properties to set\n     * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n     */\n    ValueInfoProto.create = function create(properties) {\n      return new ValueInfoProto(properties);\n    };\n\n    /**\n     * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ValueInfoProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n        $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.docString);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ValueInfoProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ValueInfoProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.ValueInfoProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 2: {\n            message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            message.docString = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ValueInfoProto message.\n     * @function verify\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ValueInfoProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.type != null && message.hasOwnProperty('type')) {\n        var error = $root.onnx.TypeProto.verify(message.type);\n        if (error) return 'type.' + error;\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.ValueInfoProto} ValueInfoProto\n     */\n    ValueInfoProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.ValueInfoProto) return object;\n      var message = new $root.onnx.ValueInfoProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.type != null) {\n        if (typeof object.type !== 'object') throw TypeError('.onnx.ValueInfoProto.type: object expected');\n        message.type = $root.onnx.TypeProto.fromObject(object.type);\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {onnx.ValueInfoProto} message ValueInfoProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ValueInfoProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.name = '';\n        object.type = null;\n        object.docString = '';\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.type != null && message.hasOwnProperty('type'))\n        object.type = $root.onnx.TypeProto.toObject(message.type, options);\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      return object;\n    };\n\n    /**\n     * Converts this ValueInfoProto to JSON.\n     * @function toJSON\n     * @memberof onnx.ValueInfoProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ValueInfoProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for ValueInfoProto\n     * @function getTypeUrl\n     * @memberof onnx.ValueInfoProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.ValueInfoProto';\n    };\n\n    return ValueInfoProto;\n  })();\n\n  onnx.NodeProto = (function () {\n    /**\n     * Properties of a NodeProto.\n     * @memberof onnx\n     * @interface INodeProto\n     * @property {Array.<string>|null} [input] NodeProto input\n     * @property {Array.<string>|null} [output] NodeProto output\n     * @property {string|null} [name] NodeProto name\n     * @property {string|null} [opType] NodeProto opType\n     * @property {string|null} [domain] NodeProto domain\n     * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n     * @property {string|null} [docString] NodeProto docString\n     */\n\n    /**\n     * Constructs a new NodeProto.\n     * @memberof onnx\n     * @classdesc Represents a NodeProto.\n     * @implements INodeProto\n     * @constructor\n     * @param {onnx.INodeProto=} [properties] Properties to set\n     */\n    function NodeProto(properties) {\n      this.input = [];\n      this.output = [];\n      this.attribute = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NodeProto input.\n     * @member {Array.<string>} input\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.input = $util.emptyArray;\n\n    /**\n     * NodeProto output.\n     * @member {Array.<string>} output\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.output = $util.emptyArray;\n\n    /**\n     * NodeProto name.\n     * @member {string} name\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.name = '';\n\n    /**\n     * NodeProto opType.\n     * @member {string} opType\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.opType = '';\n\n    /**\n     * NodeProto domain.\n     * @member {string} domain\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.domain = '';\n\n    /**\n     * NodeProto attribute.\n     * @member {Array.<onnx.IAttributeProto>} attribute\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.attribute = $util.emptyArray;\n\n    /**\n     * NodeProto docString.\n     * @member {string} docString\n     * @memberof onnx.NodeProto\n     * @instance\n     */\n    NodeProto.prototype.docString = '';\n\n    /**\n     * Creates a new NodeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto=} [properties] Properties to set\n     * @returns {onnx.NodeProto} NodeProto instance\n     */\n    NodeProto.create = function create(properties) {\n      return new NodeProto(properties);\n    };\n\n    /**\n     * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NodeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.input[i]);\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.output[i]);\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.name);\n      if (message.opType != null && Object.hasOwnProperty.call(message, 'opType'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.opType);\n      if (message.attribute != null && message.attribute.length)\n        for (var i = 0; i < message.attribute.length; ++i)\n          $root.onnx.AttributeProto.encode(\n            message.attribute[i],\n            writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n          ).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.docString);\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.domain);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NodeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.NodeProto} NodeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NodeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.NodeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push(reader.string());\n            break;\n          }\n          case 2: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push(reader.string());\n            break;\n          }\n          case 3: {\n            message.name = reader.string();\n            break;\n          }\n          case 4: {\n            message.opType = reader.string();\n            break;\n          }\n          case 7: {\n            message.domain = reader.string();\n            break;\n          }\n          case 5: {\n            if (!(message.attribute && message.attribute.length)) message.attribute = [];\n            message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 6: {\n            message.docString = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.NodeProto} NodeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NodeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NodeProto message.\n     * @function verify\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NodeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i)\n          if (!$util.isString(message.input[i])) return 'input: string[] expected';\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i)\n          if (!$util.isString(message.output[i])) return 'output: string[] expected';\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.opType != null && message.hasOwnProperty('opType'))\n        if (!$util.isString(message.opType)) return 'opType: string expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.attribute != null && message.hasOwnProperty('attribute')) {\n        if (!Array.isArray(message.attribute)) return 'attribute: array expected';\n        for (var i = 0; i < message.attribute.length; ++i) {\n          var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n          if (error) return 'attribute.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.NodeProto} NodeProto\n     */\n    NodeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.NodeProto) return object;\n      var message = new $root.onnx.NodeProto();\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.NodeProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) message.input[i] = String(object.input[i]);\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.NodeProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) message.output[i] = String(object.output[i]);\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.opType != null) message.opType = String(object.opType);\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.attribute) {\n        if (!Array.isArray(object.attribute)) throw TypeError('.onnx.NodeProto.attribute: array expected');\n        message.attribute = [];\n        for (var i = 0; i < object.attribute.length; ++i) {\n          if (typeof object.attribute[i] !== 'object') throw TypeError('.onnx.NodeProto.attribute: object expected');\n          message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {onnx.NodeProto} message NodeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NodeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.input = [];\n        object.output = [];\n        object.attribute = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.opType = '';\n        object.docString = '';\n        object.domain = '';\n      }\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j) object.input[j] = message.input[j];\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j) object.output[j] = message.output[j];\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.opType != null && message.hasOwnProperty('opType')) object.opType = message.opType;\n      if (message.attribute && message.attribute.length) {\n        object.attribute = [];\n        for (var j = 0; j < message.attribute.length; ++j)\n          object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      return object;\n    };\n\n    /**\n     * Converts this NodeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.NodeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NodeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for NodeProto\n     * @function getTypeUrl\n     * @memberof onnx.NodeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.NodeProto';\n    };\n\n    return NodeProto;\n  })();\n\n  onnx.TrainingInfoProto = (function () {\n    /**\n     * Properties of a TrainingInfoProto.\n     * @memberof onnx\n     * @interface ITrainingInfoProto\n     * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n     * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n     */\n\n    /**\n     * Constructs a new TrainingInfoProto.\n     * @memberof onnx\n     * @classdesc Represents a TrainingInfoProto.\n     * @implements ITrainingInfoProto\n     * @constructor\n     * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n     */\n    function TrainingInfoProto(properties) {\n      this.initializationBinding = [];\n      this.updateBinding = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TrainingInfoProto initialization.\n     * @member {onnx.IGraphProto|null|undefined} initialization\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.initialization = null;\n\n    /**\n     * TrainingInfoProto algorithm.\n     * @member {onnx.IGraphProto|null|undefined} algorithm\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.algorithm = null;\n\n    /**\n     * TrainingInfoProto initializationBinding.\n     * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n    /**\n     * TrainingInfoProto updateBinding.\n     * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     */\n    TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n    /**\n     * Creates a new TrainingInfoProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n     */\n    TrainingInfoProto.create = function create(properties) {\n      return new TrainingInfoProto(properties);\n    };\n\n    /**\n     * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TrainingInfoProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.initialization != null && Object.hasOwnProperty.call(message, 'initialization'))\n        $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.algorithm != null && Object.hasOwnProperty.call(message, 'algorithm'))\n        $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.initializationBinding != null && message.initializationBinding.length)\n        for (var i = 0; i < message.initializationBinding.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.initializationBinding[i],\n            writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n          ).ldelim();\n      if (message.updateBinding != null && message.updateBinding.length)\n        for (var i = 0; i < message.updateBinding.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.updateBinding[i],\n            writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TrainingInfoProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TrainingInfoProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TrainingInfoProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 2: {\n            message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            if (!(message.initializationBinding && message.initializationBinding.length))\n              message.initializationBinding = [];\n            message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 4: {\n            if (!(message.updateBinding && message.updateBinding.length)) message.updateBinding = [];\n            message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TrainingInfoProto message.\n     * @function verify\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TrainingInfoProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.initialization != null && message.hasOwnProperty('initialization')) {\n        var error = $root.onnx.GraphProto.verify(message.initialization);\n        if (error) return 'initialization.' + error;\n      }\n      if (message.algorithm != null && message.hasOwnProperty('algorithm')) {\n        var error = $root.onnx.GraphProto.verify(message.algorithm);\n        if (error) return 'algorithm.' + error;\n      }\n      if (message.initializationBinding != null && message.hasOwnProperty('initializationBinding')) {\n        if (!Array.isArray(message.initializationBinding)) return 'initializationBinding: array expected';\n        for (var i = 0; i < message.initializationBinding.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n          if (error) return 'initializationBinding.' + error;\n        }\n      }\n      if (message.updateBinding != null && message.hasOwnProperty('updateBinding')) {\n        if (!Array.isArray(message.updateBinding)) return 'updateBinding: array expected';\n        for (var i = 0; i < message.updateBinding.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n          if (error) return 'updateBinding.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n     */\n    TrainingInfoProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TrainingInfoProto) return object;\n      var message = new $root.onnx.TrainingInfoProto();\n      if (object.initialization != null) {\n        if (typeof object.initialization !== 'object')\n          throw TypeError('.onnx.TrainingInfoProto.initialization: object expected');\n        message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n      }\n      if (object.algorithm != null) {\n        if (typeof object.algorithm !== 'object') throw TypeError('.onnx.TrainingInfoProto.algorithm: object expected');\n        message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n      }\n      if (object.initializationBinding) {\n        if (!Array.isArray(object.initializationBinding))\n          throw TypeError('.onnx.TrainingInfoProto.initializationBinding: array expected');\n        message.initializationBinding = [];\n        for (var i = 0; i < object.initializationBinding.length; ++i) {\n          if (typeof object.initializationBinding[i] !== 'object')\n            throw TypeError('.onnx.TrainingInfoProto.initializationBinding: object expected');\n          message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(\n            object.initializationBinding[i],\n          );\n        }\n      }\n      if (object.updateBinding) {\n        if (!Array.isArray(object.updateBinding))\n          throw TypeError('.onnx.TrainingInfoProto.updateBinding: array expected');\n        message.updateBinding = [];\n        for (var i = 0; i < object.updateBinding.length; ++i) {\n          if (typeof object.updateBinding[i] !== 'object')\n            throw TypeError('.onnx.TrainingInfoProto.updateBinding: object expected');\n          message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TrainingInfoProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.initializationBinding = [];\n        object.updateBinding = [];\n      }\n      if (options.defaults) {\n        object.initialization = null;\n        object.algorithm = null;\n      }\n      if (message.initialization != null && message.hasOwnProperty('initialization'))\n        object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n      if (message.algorithm != null && message.hasOwnProperty('algorithm'))\n        object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n      if (message.initializationBinding && message.initializationBinding.length) {\n        object.initializationBinding = [];\n        for (var j = 0; j < message.initializationBinding.length; ++j)\n          object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(\n            message.initializationBinding[j],\n            options,\n          );\n      }\n      if (message.updateBinding && message.updateBinding.length) {\n        object.updateBinding = [];\n        for (var j = 0; j < message.updateBinding.length; ++j)\n          object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TrainingInfoProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TrainingInfoProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TrainingInfoProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TrainingInfoProto\n     * @function getTypeUrl\n     * @memberof onnx.TrainingInfoProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TrainingInfoProto';\n    };\n\n    return TrainingInfoProto;\n  })();\n\n  onnx.ModelProto = (function () {\n    /**\n     * Properties of a ModelProto.\n     * @memberof onnx\n     * @interface IModelProto\n     * @property {number|Long|null} [irVersion] ModelProto irVersion\n     * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n     * @property {string|null} [producerName] ModelProto producerName\n     * @property {string|null} [producerVersion] ModelProto producerVersion\n     * @property {string|null} [domain] ModelProto domain\n     * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n     * @property {string|null} [docString] ModelProto docString\n     * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n     * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n     * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n     */\n\n    /**\n     * Constructs a new ModelProto.\n     * @memberof onnx\n     * @classdesc Represents a ModelProto.\n     * @implements IModelProto\n     * @constructor\n     * @param {onnx.IModelProto=} [properties] Properties to set\n     */\n    function ModelProto(properties) {\n      this.opsetImport = [];\n      this.metadataProps = [];\n      this.trainingInfo = [];\n      this.functions = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ModelProto irVersion.\n     * @member {number|Long} irVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * ModelProto opsetImport.\n     * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.opsetImport = $util.emptyArray;\n\n    /**\n     * ModelProto producerName.\n     * @member {string} producerName\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.producerName = '';\n\n    /**\n     * ModelProto producerVersion.\n     * @member {string} producerVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.producerVersion = '';\n\n    /**\n     * ModelProto domain.\n     * @member {string} domain\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.domain = '';\n\n    /**\n     * ModelProto modelVersion.\n     * @member {number|Long} modelVersion\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * ModelProto docString.\n     * @member {string} docString\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.docString = '';\n\n    /**\n     * ModelProto graph.\n     * @member {onnx.IGraphProto|null|undefined} graph\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.graph = null;\n\n    /**\n     * ModelProto metadataProps.\n     * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.metadataProps = $util.emptyArray;\n\n    /**\n     * ModelProto trainingInfo.\n     * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n    /**\n     * ModelProto functions.\n     * @member {Array.<onnx.IFunctionProto>} functions\n     * @memberof onnx.ModelProto\n     * @instance\n     */\n    ModelProto.prototype.functions = $util.emptyArray;\n\n    /**\n     * Creates a new ModelProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto=} [properties] Properties to set\n     * @returns {onnx.ModelProto} ModelProto instance\n     */\n    ModelProto.create = function create(properties) {\n      return new ModelProto(properties);\n    };\n\n    /**\n     * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModelProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.irVersion != null && Object.hasOwnProperty.call(message, 'irVersion'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.irVersion);\n      if (message.producerName != null && Object.hasOwnProperty.call(message, 'producerName'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.producerName);\n      if (message.producerVersion != null && Object.hasOwnProperty.call(message, 'producerVersion'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.producerVersion);\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.domain);\n      if (message.modelVersion != null && Object.hasOwnProperty.call(message, 'modelVersion'))\n        writer.uint32(/* id 5, wireType 0 =*/ 40).int64(message.modelVersion);\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.docString);\n      if (message.graph != null && Object.hasOwnProperty.call(message, 'graph'))\n        $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n      if (message.opsetImport != null && message.opsetImport.length)\n        for (var i = 0; i < message.opsetImport.length; ++i)\n          $root.onnx.OperatorSetIdProto.encode(\n            message.opsetImport[i],\n            writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n          ).ldelim();\n      if (message.metadataProps != null && message.metadataProps.length)\n        for (var i = 0; i < message.metadataProps.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.metadataProps[i],\n            writer.uint32(/* id 14, wireType 2 =*/ 114).fork(),\n          ).ldelim();\n      if (message.trainingInfo != null && message.trainingInfo.length)\n        for (var i = 0; i < message.trainingInfo.length; ++i)\n          $root.onnx.TrainingInfoProto.encode(\n            message.trainingInfo[i],\n            writer.uint32(/* id 20, wireType 2 =*/ 162).fork(),\n          ).ldelim();\n      if (message.functions != null && message.functions.length)\n        for (var i = 0; i < message.functions.length; ++i)\n          $root.onnx.FunctionProto.encode(\n            message.functions[i],\n            writer.uint32(/* id 25, wireType 2 =*/ 202).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ModelProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.ModelProto} ModelProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModelProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.ModelProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.irVersion = reader.int64();\n            break;\n          }\n          case 8: {\n            if (!(message.opsetImport && message.opsetImport.length)) message.opsetImport = [];\n            message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 2: {\n            message.producerName = reader.string();\n            break;\n          }\n          case 3: {\n            message.producerVersion = reader.string();\n            break;\n          }\n          case 4: {\n            message.domain = reader.string();\n            break;\n          }\n          case 5: {\n            message.modelVersion = reader.int64();\n            break;\n          }\n          case 6: {\n            message.docString = reader.string();\n            break;\n          }\n          case 7: {\n            message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 14: {\n            if (!(message.metadataProps && message.metadataProps.length)) message.metadataProps = [];\n            message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 20: {\n            if (!(message.trainingInfo && message.trainingInfo.length)) message.trainingInfo = [];\n            message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 25: {\n            if (!(message.functions && message.functions.length)) message.functions = [];\n            message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.ModelProto} ModelProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModelProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ModelProto message.\n     * @function verify\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ModelProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.irVersion != null && message.hasOwnProperty('irVersion'))\n        if (\n          !$util.isInteger(message.irVersion) &&\n          !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high))\n        )\n          return 'irVersion: integer|Long expected';\n      if (message.opsetImport != null && message.hasOwnProperty('opsetImport')) {\n        if (!Array.isArray(message.opsetImport)) return 'opsetImport: array expected';\n        for (var i = 0; i < message.opsetImport.length; ++i) {\n          var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n          if (error) return 'opsetImport.' + error;\n        }\n      }\n      if (message.producerName != null && message.hasOwnProperty('producerName'))\n        if (!$util.isString(message.producerName)) return 'producerName: string expected';\n      if (message.producerVersion != null && message.hasOwnProperty('producerVersion'))\n        if (!$util.isString(message.producerVersion)) return 'producerVersion: string expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.modelVersion != null && message.hasOwnProperty('modelVersion'))\n        if (\n          !$util.isInteger(message.modelVersion) &&\n          !(\n            message.modelVersion &&\n            $util.isInteger(message.modelVersion.low) &&\n            $util.isInteger(message.modelVersion.high)\n          )\n        )\n          return 'modelVersion: integer|Long expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.graph != null && message.hasOwnProperty('graph')) {\n        var error = $root.onnx.GraphProto.verify(message.graph);\n        if (error) return 'graph.' + error;\n      }\n      if (message.metadataProps != null && message.hasOwnProperty('metadataProps')) {\n        if (!Array.isArray(message.metadataProps)) return 'metadataProps: array expected';\n        for (var i = 0; i < message.metadataProps.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n          if (error) return 'metadataProps.' + error;\n        }\n      }\n      if (message.trainingInfo != null && message.hasOwnProperty('trainingInfo')) {\n        if (!Array.isArray(message.trainingInfo)) return 'trainingInfo: array expected';\n        for (var i = 0; i < message.trainingInfo.length; ++i) {\n          var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n          if (error) return 'trainingInfo.' + error;\n        }\n      }\n      if (message.functions != null && message.hasOwnProperty('functions')) {\n        if (!Array.isArray(message.functions)) return 'functions: array expected';\n        for (var i = 0; i < message.functions.length; ++i) {\n          var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n          if (error) return 'functions.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.ModelProto} ModelProto\n     */\n    ModelProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.ModelProto) return object;\n      var message = new $root.onnx.ModelProto();\n      if (object.irVersion != null)\n        if ($util.Long) (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n        else if (typeof object.irVersion === 'string') message.irVersion = parseInt(object.irVersion, 10);\n        else if (typeof object.irVersion === 'number') message.irVersion = object.irVersion;\n        else if (typeof object.irVersion === 'object')\n          message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n      if (object.opsetImport) {\n        if (!Array.isArray(object.opsetImport)) throw TypeError('.onnx.ModelProto.opsetImport: array expected');\n        message.opsetImport = [];\n        for (var i = 0; i < object.opsetImport.length; ++i) {\n          if (typeof object.opsetImport[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.opsetImport: object expected');\n          message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n        }\n      }\n      if (object.producerName != null) message.producerName = String(object.producerName);\n      if (object.producerVersion != null) message.producerVersion = String(object.producerVersion);\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.modelVersion != null)\n        if ($util.Long) (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n        else if (typeof object.modelVersion === 'string') message.modelVersion = parseInt(object.modelVersion, 10);\n        else if (typeof object.modelVersion === 'number') message.modelVersion = object.modelVersion;\n        else if (typeof object.modelVersion === 'object')\n          message.modelVersion = new $util.LongBits(\n            object.modelVersion.low >>> 0,\n            object.modelVersion.high >>> 0,\n          ).toNumber();\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.graph != null) {\n        if (typeof object.graph !== 'object') throw TypeError('.onnx.ModelProto.graph: object expected');\n        message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n      }\n      if (object.metadataProps) {\n        if (!Array.isArray(object.metadataProps)) throw TypeError('.onnx.ModelProto.metadataProps: array expected');\n        message.metadataProps = [];\n        for (var i = 0; i < object.metadataProps.length; ++i) {\n          if (typeof object.metadataProps[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.metadataProps: object expected');\n          message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n        }\n      }\n      if (object.trainingInfo) {\n        if (!Array.isArray(object.trainingInfo)) throw TypeError('.onnx.ModelProto.trainingInfo: array expected');\n        message.trainingInfo = [];\n        for (var i = 0; i < object.trainingInfo.length; ++i) {\n          if (typeof object.trainingInfo[i] !== 'object')\n            throw TypeError('.onnx.ModelProto.trainingInfo: object expected');\n          message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n        }\n      }\n      if (object.functions) {\n        if (!Array.isArray(object.functions)) throw TypeError('.onnx.ModelProto.functions: array expected');\n        message.functions = [];\n        for (var i = 0; i < object.functions.length; ++i) {\n          if (typeof object.functions[i] !== 'object') throw TypeError('.onnx.ModelProto.functions: object expected');\n          message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {onnx.ModelProto} message ModelProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ModelProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.opsetImport = [];\n        object.metadataProps = [];\n        object.trainingInfo = [];\n        object.functions = [];\n      }\n      if (options.defaults) {\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.irVersion =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.irVersion = options.longs === String ? '0' : 0;\n        object.producerName = '';\n        object.producerVersion = '';\n        object.domain = '';\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.modelVersion =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.modelVersion = options.longs === String ? '0' : 0;\n        object.docString = '';\n        object.graph = null;\n      }\n      if (message.irVersion != null && message.hasOwnProperty('irVersion'))\n        if (typeof message.irVersion === 'number')\n          object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n        else\n          object.irVersion =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.irVersion)\n              : options.longs === Number\n                ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber()\n                : message.irVersion;\n      if (message.producerName != null && message.hasOwnProperty('producerName'))\n        object.producerName = message.producerName;\n      if (message.producerVersion != null && message.hasOwnProperty('producerVersion'))\n        object.producerVersion = message.producerVersion;\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.modelVersion != null && message.hasOwnProperty('modelVersion'))\n        if (typeof message.modelVersion === 'number')\n          object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n        else\n          object.modelVersion =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.modelVersion)\n              : options.longs === Number\n                ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber()\n                : message.modelVersion;\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.graph != null && message.hasOwnProperty('graph'))\n        object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n      if (message.opsetImport && message.opsetImport.length) {\n        object.opsetImport = [];\n        for (var j = 0; j < message.opsetImport.length; ++j)\n          object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n      }\n      if (message.metadataProps && message.metadataProps.length) {\n        object.metadataProps = [];\n        for (var j = 0; j < message.metadataProps.length; ++j)\n          object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n      }\n      if (message.trainingInfo && message.trainingInfo.length) {\n        object.trainingInfo = [];\n        for (var j = 0; j < message.trainingInfo.length; ++j)\n          object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n      }\n      if (message.functions && message.functions.length) {\n        object.functions = [];\n        for (var j = 0; j < message.functions.length; ++j)\n          object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this ModelProto to JSON.\n     * @function toJSON\n     * @memberof onnx.ModelProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ModelProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for ModelProto\n     * @function getTypeUrl\n     * @memberof onnx.ModelProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.ModelProto';\n    };\n\n    return ModelProto;\n  })();\n\n  onnx.StringStringEntryProto = (function () {\n    /**\n     * Properties of a StringStringEntryProto.\n     * @memberof onnx\n     * @interface IStringStringEntryProto\n     * @property {string|null} [key] StringStringEntryProto key\n     * @property {string|null} [value] StringStringEntryProto value\n     */\n\n    /**\n     * Constructs a new StringStringEntryProto.\n     * @memberof onnx\n     * @classdesc Represents a StringStringEntryProto.\n     * @implements IStringStringEntryProto\n     * @constructor\n     * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n     */\n    function StringStringEntryProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StringStringEntryProto key.\n     * @member {string} key\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     */\n    StringStringEntryProto.prototype.key = '';\n\n    /**\n     * StringStringEntryProto value.\n     * @member {string} value\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     */\n    StringStringEntryProto.prototype.value = '';\n\n    /**\n     * Creates a new StringStringEntryProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n     */\n    StringStringEntryProto.create = function create(properties) {\n      return new StringStringEntryProto(properties);\n    };\n\n    /**\n     * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StringStringEntryProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && Object.hasOwnProperty.call(message, 'key'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.key);\n      if (message.value != null && Object.hasOwnProperty.call(message, 'value'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.value);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StringStringEntryProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StringStringEntryProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.StringStringEntryProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.key = reader.string();\n            break;\n          }\n          case 2: {\n            message.value = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StringStringEntryProto message.\n     * @function verify\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StringStringEntryProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.key != null && message.hasOwnProperty('key'))\n        if (!$util.isString(message.key)) return 'key: string expected';\n      if (message.value != null && message.hasOwnProperty('value'))\n        if (!$util.isString(message.value)) return 'value: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n     */\n    StringStringEntryProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.StringStringEntryProto) return object;\n      var message = new $root.onnx.StringStringEntryProto();\n      if (object.key != null) message.key = String(object.key);\n      if (object.value != null) message.value = String(object.value);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StringStringEntryProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.key = '';\n        object.value = '';\n      }\n      if (message.key != null && message.hasOwnProperty('key')) object.key = message.key;\n      if (message.value != null && message.hasOwnProperty('value')) object.value = message.value;\n      return object;\n    };\n\n    /**\n     * Converts this StringStringEntryProto to JSON.\n     * @function toJSON\n     * @memberof onnx.StringStringEntryProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StringStringEntryProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for StringStringEntryProto\n     * @function getTypeUrl\n     * @memberof onnx.StringStringEntryProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.StringStringEntryProto';\n    };\n\n    return StringStringEntryProto;\n  })();\n\n  onnx.TensorAnnotation = (function () {\n    /**\n     * Properties of a TensorAnnotation.\n     * @memberof onnx\n     * @interface ITensorAnnotation\n     * @property {string|null} [tensorName] TensorAnnotation tensorName\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n     */\n\n    /**\n     * Constructs a new TensorAnnotation.\n     * @memberof onnx\n     * @classdesc Represents a TensorAnnotation.\n     * @implements ITensorAnnotation\n     * @constructor\n     * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n     */\n    function TensorAnnotation(properties) {\n      this.quantParameterTensorNames = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorAnnotation tensorName.\n     * @member {string} tensorName\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     */\n    TensorAnnotation.prototype.tensorName = '';\n\n    /**\n     * TensorAnnotation quantParameterTensorNames.\n     * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     */\n    TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n    /**\n     * Creates a new TensorAnnotation instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n     * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n     */\n    TensorAnnotation.create = function create(properties) {\n      return new TensorAnnotation(properties);\n    };\n\n    /**\n     * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorAnnotation.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.tensorName != null && Object.hasOwnProperty.call(message, 'tensorName'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.tensorName);\n      if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n        for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.quantParameterTensorNames[i],\n            writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorAnnotation message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorAnnotation.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorAnnotation();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.tensorName = reader.string();\n            break;\n          }\n          case 2: {\n            if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n              message.quantParameterTensorNames = [];\n            message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorAnnotation message.\n     * @function verify\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorAnnotation.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.tensorName != null && message.hasOwnProperty('tensorName'))\n        if (!$util.isString(message.tensorName)) return 'tensorName: string expected';\n      if (message.quantParameterTensorNames != null && message.hasOwnProperty('quantParameterTensorNames')) {\n        if (!Array.isArray(message.quantParameterTensorNames)) return 'quantParameterTensorNames: array expected';\n        for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n          if (error) return 'quantParameterTensorNames.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorAnnotation} TensorAnnotation\n     */\n    TensorAnnotation.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorAnnotation) return object;\n      var message = new $root.onnx.TensorAnnotation();\n      if (object.tensorName != null) message.tensorName = String(object.tensorName);\n      if (object.quantParameterTensorNames) {\n        if (!Array.isArray(object.quantParameterTensorNames))\n          throw TypeError('.onnx.TensorAnnotation.quantParameterTensorNames: array expected');\n        message.quantParameterTensorNames = [];\n        for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n          if (typeof object.quantParameterTensorNames[i] !== 'object')\n            throw TypeError('.onnx.TensorAnnotation.quantParameterTensorNames: object expected');\n          message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(\n            object.quantParameterTensorNames[i],\n          );\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {onnx.TensorAnnotation} message TensorAnnotation\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorAnnotation.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.quantParameterTensorNames = [];\n      if (options.defaults) object.tensorName = '';\n      if (message.tensorName != null && message.hasOwnProperty('tensorName')) object.tensorName = message.tensorName;\n      if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n        object.quantParameterTensorNames = [];\n        for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n          object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(\n            message.quantParameterTensorNames[j],\n            options,\n          );\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TensorAnnotation to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorAnnotation\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorAnnotation.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorAnnotation\n     * @function getTypeUrl\n     * @memberof onnx.TensorAnnotation\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorAnnotation';\n    };\n\n    return TensorAnnotation;\n  })();\n\n  onnx.GraphProto = (function () {\n    /**\n     * Properties of a GraphProto.\n     * @memberof onnx\n     * @interface IGraphProto\n     * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n     * @property {string|null} [name] GraphProto name\n     * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n     * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n     * @property {string|null} [docString] GraphProto docString\n     * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n     * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n     * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n     * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n     */\n\n    /**\n     * Constructs a new GraphProto.\n     * @memberof onnx\n     * @classdesc Represents a GraphProto.\n     * @implements IGraphProto\n     * @constructor\n     * @param {onnx.IGraphProto=} [properties] Properties to set\n     */\n    function GraphProto(properties) {\n      this.node = [];\n      this.initializer = [];\n      this.sparseInitializer = [];\n      this.input = [];\n      this.output = [];\n      this.valueInfo = [];\n      this.quantizationAnnotation = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GraphProto node.\n     * @member {Array.<onnx.INodeProto>} node\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.node = $util.emptyArray;\n\n    /**\n     * GraphProto name.\n     * @member {string} name\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.name = '';\n\n    /**\n     * GraphProto initializer.\n     * @member {Array.<onnx.ITensorProto>} initializer\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.initializer = $util.emptyArray;\n\n    /**\n     * GraphProto sparseInitializer.\n     * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n    /**\n     * GraphProto docString.\n     * @member {string} docString\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.docString = '';\n\n    /**\n     * GraphProto input.\n     * @member {Array.<onnx.IValueInfoProto>} input\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.input = $util.emptyArray;\n\n    /**\n     * GraphProto output.\n     * @member {Array.<onnx.IValueInfoProto>} output\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.output = $util.emptyArray;\n\n    /**\n     * GraphProto valueInfo.\n     * @member {Array.<onnx.IValueInfoProto>} valueInfo\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.valueInfo = $util.emptyArray;\n\n    /**\n     * GraphProto quantizationAnnotation.\n     * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n     * @memberof onnx.GraphProto\n     * @instance\n     */\n    GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n    /**\n     * Creates a new GraphProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto=} [properties] Properties to set\n     * @returns {onnx.GraphProto} GraphProto instance\n     */\n    GraphProto.create = function create(properties) {\n      return new GraphProto(properties);\n    };\n\n    /**\n     * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GraphProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.node != null && message.node.length)\n        for (var i = 0; i < message.node.length; ++i)\n          $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name);\n      if (message.initializer != null && message.initializer.length)\n        for (var i = 0; i < message.initializer.length; ++i)\n          $root.onnx.TensorProto.encode(\n            message.initializer[i],\n            writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n          ).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 10, wireType 2 =*/ 82).string(message.docString);\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.input[i],\n            writer.uint32(/* id 11, wireType 2 =*/ 90).fork(),\n          ).ldelim();\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.output[i],\n            writer.uint32(/* id 12, wireType 2 =*/ 98).fork(),\n          ).ldelim();\n      if (message.valueInfo != null && message.valueInfo.length)\n        for (var i = 0; i < message.valueInfo.length; ++i)\n          $root.onnx.ValueInfoProto.encode(\n            message.valueInfo[i],\n            writer.uint32(/* id 13, wireType 2 =*/ 106).fork(),\n          ).ldelim();\n      if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n        for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n          $root.onnx.TensorAnnotation.encode(\n            message.quantizationAnnotation[i],\n            writer.uint32(/* id 14, wireType 2 =*/ 114).fork(),\n          ).ldelim();\n      if (message.sparseInitializer != null && message.sparseInitializer.length)\n        for (var i = 0; i < message.sparseInitializer.length; ++i)\n          $root.onnx.SparseTensorProto.encode(\n            message.sparseInitializer[i],\n            writer.uint32(/* id 15, wireType 2 =*/ 122).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GraphProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.GraphProto} GraphProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GraphProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.GraphProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.node && message.node.length)) message.node = [];\n            message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 2: {\n            message.name = reader.string();\n            break;\n          }\n          case 5: {\n            if (!(message.initializer && message.initializer.length)) message.initializer = [];\n            message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 15: {\n            if (!(message.sparseInitializer && message.sparseInitializer.length)) message.sparseInitializer = [];\n            message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 10: {\n            message.docString = reader.string();\n            break;\n          }\n          case 11: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 12: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 13: {\n            if (!(message.valueInfo && message.valueInfo.length)) message.valueInfo = [];\n            message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 14: {\n            if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n              message.quantizationAnnotation = [];\n            message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.GraphProto} GraphProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GraphProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GraphProto message.\n     * @function verify\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GraphProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.node != null && message.hasOwnProperty('node')) {\n        if (!Array.isArray(message.node)) return 'node: array expected';\n        for (var i = 0; i < message.node.length; ++i) {\n          var error = $root.onnx.NodeProto.verify(message.node[i]);\n          if (error) return 'node.' + error;\n        }\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.initializer != null && message.hasOwnProperty('initializer')) {\n        if (!Array.isArray(message.initializer)) return 'initializer: array expected';\n        for (var i = 0; i < message.initializer.length; ++i) {\n          var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n          if (error) return 'initializer.' + error;\n        }\n      }\n      if (message.sparseInitializer != null && message.hasOwnProperty('sparseInitializer')) {\n        if (!Array.isArray(message.sparseInitializer)) return 'sparseInitializer: array expected';\n        for (var i = 0; i < message.sparseInitializer.length; ++i) {\n          var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n          if (error) return 'sparseInitializer.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n          if (error) return 'input.' + error;\n        }\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n          if (error) return 'output.' + error;\n        }\n      }\n      if (message.valueInfo != null && message.hasOwnProperty('valueInfo')) {\n        if (!Array.isArray(message.valueInfo)) return 'valueInfo: array expected';\n        for (var i = 0; i < message.valueInfo.length; ++i) {\n          var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n          if (error) return 'valueInfo.' + error;\n        }\n      }\n      if (message.quantizationAnnotation != null && message.hasOwnProperty('quantizationAnnotation')) {\n        if (!Array.isArray(message.quantizationAnnotation)) return 'quantizationAnnotation: array expected';\n        for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n          var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n          if (error) return 'quantizationAnnotation.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.GraphProto} GraphProto\n     */\n    GraphProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.GraphProto) return object;\n      var message = new $root.onnx.GraphProto();\n      if (object.node) {\n        if (!Array.isArray(object.node)) throw TypeError('.onnx.GraphProto.node: array expected');\n        message.node = [];\n        for (var i = 0; i < object.node.length; ++i) {\n          if (typeof object.node[i] !== 'object') throw TypeError('.onnx.GraphProto.node: object expected');\n          message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n        }\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.initializer) {\n        if (!Array.isArray(object.initializer)) throw TypeError('.onnx.GraphProto.initializer: array expected');\n        message.initializer = [];\n        for (var i = 0; i < object.initializer.length; ++i) {\n          if (typeof object.initializer[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.initializer: object expected');\n          message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n        }\n      }\n      if (object.sparseInitializer) {\n        if (!Array.isArray(object.sparseInitializer))\n          throw TypeError('.onnx.GraphProto.sparseInitializer: array expected');\n        message.sparseInitializer = [];\n        for (var i = 0; i < object.sparseInitializer.length; ++i) {\n          if (typeof object.sparseInitializer[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.sparseInitializer: object expected');\n          message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.GraphProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) {\n          if (typeof object.input[i] !== 'object') throw TypeError('.onnx.GraphProto.input: object expected');\n          message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n        }\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.GraphProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) {\n          if (typeof object.output[i] !== 'object') throw TypeError('.onnx.GraphProto.output: object expected');\n          message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n        }\n      }\n      if (object.valueInfo) {\n        if (!Array.isArray(object.valueInfo)) throw TypeError('.onnx.GraphProto.valueInfo: array expected');\n        message.valueInfo = [];\n        for (var i = 0; i < object.valueInfo.length; ++i) {\n          if (typeof object.valueInfo[i] !== 'object') throw TypeError('.onnx.GraphProto.valueInfo: object expected');\n          message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n        }\n      }\n      if (object.quantizationAnnotation) {\n        if (!Array.isArray(object.quantizationAnnotation))\n          throw TypeError('.onnx.GraphProto.quantizationAnnotation: array expected');\n        message.quantizationAnnotation = [];\n        for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n          if (typeof object.quantizationAnnotation[i] !== 'object')\n            throw TypeError('.onnx.GraphProto.quantizationAnnotation: object expected');\n          message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {onnx.GraphProto} message GraphProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GraphProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.node = [];\n        object.initializer = [];\n        object.input = [];\n        object.output = [];\n        object.valueInfo = [];\n        object.quantizationAnnotation = [];\n        object.sparseInitializer = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.docString = '';\n      }\n      if (message.node && message.node.length) {\n        object.node = [];\n        for (var j = 0; j < message.node.length; ++j)\n          object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.initializer && message.initializer.length) {\n        object.initializer = [];\n        for (var j = 0; j < message.initializer.length; ++j)\n          object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j)\n          object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j)\n          object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n      }\n      if (message.valueInfo && message.valueInfo.length) {\n        object.valueInfo = [];\n        for (var j = 0; j < message.valueInfo.length; ++j)\n          object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n      }\n      if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n        object.quantizationAnnotation = [];\n        for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n          object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(\n            message.quantizationAnnotation[j],\n            options,\n          );\n      }\n      if (message.sparseInitializer && message.sparseInitializer.length) {\n        object.sparseInitializer = [];\n        for (var j = 0; j < message.sparseInitializer.length; ++j)\n          object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this GraphProto to JSON.\n     * @function toJSON\n     * @memberof onnx.GraphProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GraphProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for GraphProto\n     * @function getTypeUrl\n     * @memberof onnx.GraphProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.GraphProto';\n    };\n\n    return GraphProto;\n  })();\n\n  onnx.TensorProto = (function () {\n    /**\n     * Properties of a TensorProto.\n     * @memberof onnx\n     * @interface ITensorProto\n     * @property {Array.<number|Long>|null} [dims] TensorProto dims\n     * @property {number|null} [dataType] TensorProto dataType\n     * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n     * @property {Array.<number>|null} [floatData] TensorProto floatData\n     * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n     * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n     * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n     * @property {string|null} [name] TensorProto name\n     * @property {string|null} [docString] TensorProto docString\n     * @property {Uint8Array|null} [rawData] TensorProto rawData\n     * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n     * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n     * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n     * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n     */\n\n    /**\n     * Constructs a new TensorProto.\n     * @memberof onnx\n     * @classdesc Represents a TensorProto.\n     * @implements ITensorProto\n     * @constructor\n     * @param {onnx.ITensorProto=} [properties] Properties to set\n     */\n    function TensorProto(properties) {\n      this.dims = [];\n      this.floatData = [];\n      this.int32Data = [];\n      this.stringData = [];\n      this.int64Data = [];\n      this.externalData = [];\n      this.doubleData = [];\n      this.uint64Data = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorProto dims.\n     * @member {Array.<number|Long>} dims\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dims = $util.emptyArray;\n\n    /**\n     * TensorProto dataType.\n     * @member {number} dataType\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dataType = 0;\n\n    /**\n     * TensorProto segment.\n     * @member {onnx.TensorProto.ISegment|null|undefined} segment\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.segment = null;\n\n    /**\n     * TensorProto floatData.\n     * @member {Array.<number>} floatData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.floatData = $util.emptyArray;\n\n    /**\n     * TensorProto int32Data.\n     * @member {Array.<number>} int32Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.int32Data = $util.emptyArray;\n\n    /**\n     * TensorProto stringData.\n     * @member {Array.<Uint8Array>} stringData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.stringData = $util.emptyArray;\n\n    /**\n     * TensorProto int64Data.\n     * @member {Array.<number|Long>} int64Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.int64Data = $util.emptyArray;\n\n    /**\n     * TensorProto name.\n     * @member {string} name\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.name = '';\n\n    /**\n     * TensorProto docString.\n     * @member {string} docString\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.docString = '';\n\n    /**\n     * TensorProto rawData.\n     * @member {Uint8Array} rawData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.rawData = $util.newBuffer([]);\n\n    /**\n     * TensorProto externalData.\n     * @member {Array.<onnx.IStringStringEntryProto>} externalData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.externalData = $util.emptyArray;\n\n    /**\n     * TensorProto dataLocation.\n     * @member {onnx.TensorProto.DataLocation} dataLocation\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.dataLocation = 0;\n\n    /**\n     * TensorProto doubleData.\n     * @member {Array.<number>} doubleData\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.doubleData = $util.emptyArray;\n\n    /**\n     * TensorProto uint64Data.\n     * @member {Array.<number|Long>} uint64Data\n     * @memberof onnx.TensorProto\n     * @instance\n     */\n    TensorProto.prototype.uint64Data = $util.emptyArray;\n\n    /**\n     * Creates a new TensorProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto=} [properties] Properties to set\n     * @returns {onnx.TensorProto} TensorProto instance\n     */\n    TensorProto.create = function create(properties) {\n      return new TensorProto(properties);\n    };\n\n    /**\n     * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.dims != null && message.dims.length) {\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork();\n        for (var i = 0; i < message.dims.length; ++i) writer.int64(message.dims[i]);\n        writer.ldelim();\n      }\n      if (message.dataType != null && Object.hasOwnProperty.call(message, 'dataType'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.dataType);\n      if (message.segment != null && Object.hasOwnProperty.call(message, 'segment'))\n        $root.onnx.TensorProto.Segment.encode(\n          message.segment,\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim();\n      if (message.floatData != null && message.floatData.length) {\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork();\n        for (var i = 0; i < message.floatData.length; ++i) writer.float(message.floatData[i]);\n        writer.ldelim();\n      }\n      if (message.int32Data != null && message.int32Data.length) {\n        writer.uint32(/* id 5, wireType 2 =*/ 42).fork();\n        for (var i = 0; i < message.int32Data.length; ++i) writer.int32(message.int32Data[i]);\n        writer.ldelim();\n      }\n      if (message.stringData != null && message.stringData.length)\n        for (var i = 0; i < message.stringData.length; ++i)\n          writer.uint32(/* id 6, wireType 2 =*/ 50).bytes(message.stringData[i]);\n      if (message.int64Data != null && message.int64Data.length) {\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork();\n        for (var i = 0; i < message.int64Data.length; ++i) writer.int64(message.int64Data[i]);\n        writer.ldelim();\n      }\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.name);\n      if (message.rawData != null && Object.hasOwnProperty.call(message, 'rawData'))\n        writer.uint32(/* id 9, wireType 2 =*/ 74).bytes(message.rawData);\n      if (message.doubleData != null && message.doubleData.length) {\n        writer.uint32(/* id 10, wireType 2 =*/ 82).fork();\n        for (var i = 0; i < message.doubleData.length; ++i) writer.double(message.doubleData[i]);\n        writer.ldelim();\n      }\n      if (message.uint64Data != null && message.uint64Data.length) {\n        writer.uint32(/* id 11, wireType 2 =*/ 90).fork();\n        for (var i = 0; i < message.uint64Data.length; ++i) writer.uint64(message.uint64Data[i]);\n        writer.ldelim();\n      }\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 12, wireType 2 =*/ 98).string(message.docString);\n      if (message.externalData != null && message.externalData.length)\n        for (var i = 0; i < message.externalData.length; ++i)\n          $root.onnx.StringStringEntryProto.encode(\n            message.externalData[i],\n            writer.uint32(/* id 13, wireType 2 =*/ 106).fork(),\n          ).ldelim();\n      if (message.dataLocation != null && Object.hasOwnProperty.call(message, 'dataLocation'))\n        writer.uint32(/* id 14, wireType 0 =*/ 112).int32(message.dataLocation);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorProto} TensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.dims && message.dims.length)) message.dims = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.dims.push(reader.int64());\n            } else message.dims.push(reader.int64());\n            break;\n          }\n          case 2: {\n            message.dataType = reader.int32();\n            break;\n          }\n          case 3: {\n            message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n            break;\n          }\n          case 4: {\n            if (!(message.floatData && message.floatData.length)) message.floatData = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.floatData.push(reader.float());\n            } else message.floatData.push(reader.float());\n            break;\n          }\n          case 5: {\n            if (!(message.int32Data && message.int32Data.length)) message.int32Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.int32Data.push(reader.int32());\n            } else message.int32Data.push(reader.int32());\n            break;\n          }\n          case 6: {\n            if (!(message.stringData && message.stringData.length)) message.stringData = [];\n            message.stringData.push(reader.bytes());\n            break;\n          }\n          case 7: {\n            if (!(message.int64Data && message.int64Data.length)) message.int64Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.int64Data.push(reader.int64());\n            } else message.int64Data.push(reader.int64());\n            break;\n          }\n          case 8: {\n            message.name = reader.string();\n            break;\n          }\n          case 12: {\n            message.docString = reader.string();\n            break;\n          }\n          case 9: {\n            message.rawData = reader.bytes();\n            break;\n          }\n          case 13: {\n            if (!(message.externalData && message.externalData.length)) message.externalData = [];\n            message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 14: {\n            message.dataLocation = reader.int32();\n            break;\n          }\n          case 10: {\n            if (!(message.doubleData && message.doubleData.length)) message.doubleData = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.doubleData.push(reader.double());\n            } else message.doubleData.push(reader.double());\n            break;\n          }\n          case 11: {\n            if (!(message.uint64Data && message.uint64Data.length)) message.uint64Data = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.uint64Data.push(reader.uint64());\n            } else message.uint64Data.push(reader.uint64());\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorProto} TensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorProto message.\n     * @function verify\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.dims != null && message.hasOwnProperty('dims')) {\n        if (!Array.isArray(message.dims)) return 'dims: array expected';\n        for (var i = 0; i < message.dims.length; ++i)\n          if (\n            !$util.isInteger(message.dims[i]) &&\n            !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high))\n          )\n            return 'dims: integer|Long[] expected';\n      }\n      if (message.dataType != null && message.hasOwnProperty('dataType'))\n        if (!$util.isInteger(message.dataType)) return 'dataType: integer expected';\n      if (message.segment != null && message.hasOwnProperty('segment')) {\n        var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n        if (error) return 'segment.' + error;\n      }\n      if (message.floatData != null && message.hasOwnProperty('floatData')) {\n        if (!Array.isArray(message.floatData)) return 'floatData: array expected';\n        for (var i = 0; i < message.floatData.length; ++i)\n          if (typeof message.floatData[i] !== 'number') return 'floatData: number[] expected';\n      }\n      if (message.int32Data != null && message.hasOwnProperty('int32Data')) {\n        if (!Array.isArray(message.int32Data)) return 'int32Data: array expected';\n        for (var i = 0; i < message.int32Data.length; ++i)\n          if (!$util.isInteger(message.int32Data[i])) return 'int32Data: integer[] expected';\n      }\n      if (message.stringData != null && message.hasOwnProperty('stringData')) {\n        if (!Array.isArray(message.stringData)) return 'stringData: array expected';\n        for (var i = 0; i < message.stringData.length; ++i)\n          if (\n            !(\n              (message.stringData[i] && typeof message.stringData[i].length === 'number') ||\n              $util.isString(message.stringData[i])\n            )\n          )\n            return 'stringData: buffer[] expected';\n      }\n      if (message.int64Data != null && message.hasOwnProperty('int64Data')) {\n        if (!Array.isArray(message.int64Data)) return 'int64Data: array expected';\n        for (var i = 0; i < message.int64Data.length; ++i)\n          if (\n            !$util.isInteger(message.int64Data[i]) &&\n            !(\n              message.int64Data[i] &&\n              $util.isInteger(message.int64Data[i].low) &&\n              $util.isInteger(message.int64Data[i].high)\n            )\n          )\n            return 'int64Data: integer|Long[] expected';\n      }\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.rawData != null && message.hasOwnProperty('rawData'))\n        if (!((message.rawData && typeof message.rawData.length === 'number') || $util.isString(message.rawData)))\n          return 'rawData: buffer expected';\n      if (message.externalData != null && message.hasOwnProperty('externalData')) {\n        if (!Array.isArray(message.externalData)) return 'externalData: array expected';\n        for (var i = 0; i < message.externalData.length; ++i) {\n          var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n          if (error) return 'externalData.' + error;\n        }\n      }\n      if (message.dataLocation != null && message.hasOwnProperty('dataLocation'))\n        switch (message.dataLocation) {\n          default:\n            return 'dataLocation: enum value expected';\n          case 0:\n          case 1:\n            break;\n        }\n      if (message.doubleData != null && message.hasOwnProperty('doubleData')) {\n        if (!Array.isArray(message.doubleData)) return 'doubleData: array expected';\n        for (var i = 0; i < message.doubleData.length; ++i)\n          if (typeof message.doubleData[i] !== 'number') return 'doubleData: number[] expected';\n      }\n      if (message.uint64Data != null && message.hasOwnProperty('uint64Data')) {\n        if (!Array.isArray(message.uint64Data)) return 'uint64Data: array expected';\n        for (var i = 0; i < message.uint64Data.length; ++i)\n          if (\n            !$util.isInteger(message.uint64Data[i]) &&\n            !(\n              message.uint64Data[i] &&\n              $util.isInteger(message.uint64Data[i].low) &&\n              $util.isInteger(message.uint64Data[i].high)\n            )\n          )\n            return 'uint64Data: integer|Long[] expected';\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorProto} TensorProto\n     */\n    TensorProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorProto) return object;\n      var message = new $root.onnx.TensorProto();\n      if (object.dims) {\n        if (!Array.isArray(object.dims)) throw TypeError('.onnx.TensorProto.dims: array expected');\n        message.dims = [];\n        for (var i = 0; i < object.dims.length; ++i)\n          if ($util.Long) (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n          else if (typeof object.dims[i] === 'string') message.dims[i] = parseInt(object.dims[i], 10);\n          else if (typeof object.dims[i] === 'number') message.dims[i] = object.dims[i];\n          else if (typeof object.dims[i] === 'object')\n            message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n      }\n      if (object.dataType != null) message.dataType = object.dataType | 0;\n      if (object.segment != null) {\n        if (typeof object.segment !== 'object') throw TypeError('.onnx.TensorProto.segment: object expected');\n        message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n      }\n      if (object.floatData) {\n        if (!Array.isArray(object.floatData)) throw TypeError('.onnx.TensorProto.floatData: array expected');\n        message.floatData = [];\n        for (var i = 0; i < object.floatData.length; ++i) message.floatData[i] = Number(object.floatData[i]);\n      }\n      if (object.int32Data) {\n        if (!Array.isArray(object.int32Data)) throw TypeError('.onnx.TensorProto.int32Data: array expected');\n        message.int32Data = [];\n        for (var i = 0; i < object.int32Data.length; ++i) message.int32Data[i] = object.int32Data[i] | 0;\n      }\n      if (object.stringData) {\n        if (!Array.isArray(object.stringData)) throw TypeError('.onnx.TensorProto.stringData: array expected');\n        message.stringData = [];\n        for (var i = 0; i < object.stringData.length; ++i)\n          if (typeof object.stringData[i] === 'string')\n            $util.base64.decode(\n              object.stringData[i],\n              (message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i]))),\n              0,\n            );\n          else if (object.stringData[i].length >= 0) message.stringData[i] = object.stringData[i];\n      }\n      if (object.int64Data) {\n        if (!Array.isArray(object.int64Data)) throw TypeError('.onnx.TensorProto.int64Data: array expected');\n        message.int64Data = [];\n        for (var i = 0; i < object.int64Data.length; ++i)\n          if ($util.Long) (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n          else if (typeof object.int64Data[i] === 'string') message.int64Data[i] = parseInt(object.int64Data[i], 10);\n          else if (typeof object.int64Data[i] === 'number') message.int64Data[i] = object.int64Data[i];\n          else if (typeof object.int64Data[i] === 'object')\n            message.int64Data[i] = new $util.LongBits(\n              object.int64Data[i].low >>> 0,\n              object.int64Data[i].high >>> 0,\n            ).toNumber();\n      }\n      if (object.name != null) message.name = String(object.name);\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.rawData != null)\n        if (typeof object.rawData === 'string')\n          $util.base64.decode(\n            object.rawData,\n            (message.rawData = $util.newBuffer($util.base64.length(object.rawData))),\n            0,\n          );\n        else if (object.rawData.length >= 0) message.rawData = object.rawData;\n      if (object.externalData) {\n        if (!Array.isArray(object.externalData)) throw TypeError('.onnx.TensorProto.externalData: array expected');\n        message.externalData = [];\n        for (var i = 0; i < object.externalData.length; ++i) {\n          if (typeof object.externalData[i] !== 'object')\n            throw TypeError('.onnx.TensorProto.externalData: object expected');\n          message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n        }\n      }\n      switch (object.dataLocation) {\n        default:\n          if (typeof object.dataLocation === 'number') {\n            message.dataLocation = object.dataLocation;\n            break;\n          }\n          break;\n        case 'DEFAULT':\n        case 0:\n          message.dataLocation = 0;\n          break;\n        case 'EXTERNAL':\n        case 1:\n          message.dataLocation = 1;\n          break;\n      }\n      if (object.doubleData) {\n        if (!Array.isArray(object.doubleData)) throw TypeError('.onnx.TensorProto.doubleData: array expected');\n        message.doubleData = [];\n        for (var i = 0; i < object.doubleData.length; ++i) message.doubleData[i] = Number(object.doubleData[i]);\n      }\n      if (object.uint64Data) {\n        if (!Array.isArray(object.uint64Data)) throw TypeError('.onnx.TensorProto.uint64Data: array expected');\n        message.uint64Data = [];\n        for (var i = 0; i < object.uint64Data.length; ++i)\n          if ($util.Long) (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n          else if (typeof object.uint64Data[i] === 'string') message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n          else if (typeof object.uint64Data[i] === 'number') message.uint64Data[i] = object.uint64Data[i];\n          else if (typeof object.uint64Data[i] === 'object')\n            message.uint64Data[i] = new $util.LongBits(\n              object.uint64Data[i].low >>> 0,\n              object.uint64Data[i].high >>> 0,\n            ).toNumber(true);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {onnx.TensorProto} message TensorProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.dims = [];\n        object.floatData = [];\n        object.int32Data = [];\n        object.stringData = [];\n        object.int64Data = [];\n        object.doubleData = [];\n        object.uint64Data = [];\n        object.externalData = [];\n      }\n      if (options.defaults) {\n        object.dataType = 0;\n        object.segment = null;\n        object.name = '';\n        if (options.bytes === String) object.rawData = '';\n        else {\n          object.rawData = [];\n          if (options.bytes !== Array) object.rawData = $util.newBuffer(object.rawData);\n        }\n        object.docString = '';\n        object.dataLocation = options.enums === String ? 'DEFAULT' : 0;\n      }\n      if (message.dims && message.dims.length) {\n        object.dims = [];\n        for (var j = 0; j < message.dims.length; ++j)\n          if (typeof message.dims[j] === 'number')\n            object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n          else\n            object.dims[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dims[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber()\n                  : message.dims[j];\n      }\n      if (message.dataType != null && message.hasOwnProperty('dataType')) object.dataType = message.dataType;\n      if (message.segment != null && message.hasOwnProperty('segment'))\n        object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n      if (message.floatData && message.floatData.length) {\n        object.floatData = [];\n        for (var j = 0; j < message.floatData.length; ++j)\n          object.floatData[j] =\n            options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n      }\n      if (message.int32Data && message.int32Data.length) {\n        object.int32Data = [];\n        for (var j = 0; j < message.int32Data.length; ++j) object.int32Data[j] = message.int32Data[j];\n      }\n      if (message.stringData && message.stringData.length) {\n        object.stringData = [];\n        for (var j = 0; j < message.stringData.length; ++j)\n          object.stringData[j] =\n            options.bytes === String\n              ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length)\n              : options.bytes === Array\n                ? Array.prototype.slice.call(message.stringData[j])\n                : message.stringData[j];\n      }\n      if (message.int64Data && message.int64Data.length) {\n        object.int64Data = [];\n        for (var j = 0; j < message.int64Data.length; ++j)\n          if (typeof message.int64Data[j] === 'number')\n            object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n          else\n            object.int64Data[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.int64Data[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber()\n                  : message.int64Data[j];\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.rawData != null && message.hasOwnProperty('rawData'))\n        object.rawData =\n          options.bytes === String\n            ? $util.base64.encode(message.rawData, 0, message.rawData.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.rawData)\n              : message.rawData;\n      if (message.doubleData && message.doubleData.length) {\n        object.doubleData = [];\n        for (var j = 0; j < message.doubleData.length; ++j)\n          object.doubleData[j] =\n            options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n      }\n      if (message.uint64Data && message.uint64Data.length) {\n        object.uint64Data = [];\n        for (var j = 0; j < message.uint64Data.length; ++j)\n          if (typeof message.uint64Data[j] === 'number')\n            object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n          else\n            object.uint64Data[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.uint64Data[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true)\n                  : message.uint64Data[j];\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.externalData && message.externalData.length) {\n        object.externalData = [];\n        for (var j = 0; j < message.externalData.length; ++j)\n          object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n      }\n      if (message.dataLocation != null && message.hasOwnProperty('dataLocation'))\n        object.dataLocation =\n          options.enums === String\n            ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined\n              ? message.dataLocation\n              : $root.onnx.TensorProto.DataLocation[message.dataLocation]\n            : message.dataLocation;\n      return object;\n    };\n\n    /**\n     * Converts this TensorProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorProto\n     * @function getTypeUrl\n     * @memberof onnx.TensorProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorProto';\n    };\n\n    /**\n     * DataType enum.\n     * @name onnx.TensorProto.DataType\n     * @enum {number}\n     * @property {number} UNDEFINED=0 UNDEFINED value\n     * @property {number} FLOAT=1 FLOAT value\n     * @property {number} UINT8=2 UINT8 value\n     * @property {number} INT8=3 INT8 value\n     * @property {number} UINT16=4 UINT16 value\n     * @property {number} INT16=5 INT16 value\n     * @property {number} INT32=6 INT32 value\n     * @property {number} INT64=7 INT64 value\n     * @property {number} STRING=8 STRING value\n     * @property {number} BOOL=9 BOOL value\n     * @property {number} FLOAT16=10 FLOAT16 value\n     * @property {number} DOUBLE=11 DOUBLE value\n     * @property {number} UINT32=12 UINT32 value\n     * @property {number} UINT64=13 UINT64 value\n     * @property {number} COMPLEX64=14 COMPLEX64 value\n     * @property {number} COMPLEX128=15 COMPLEX128 value\n     * @property {number} BFLOAT16=16 BFLOAT16 value\n     * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n     * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n     * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n     * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n     */\n    TensorProto.DataType = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'UNDEFINED')] = 0;\n      values[(valuesById[1] = 'FLOAT')] = 1;\n      values[(valuesById[2] = 'UINT8')] = 2;\n      values[(valuesById[3] = 'INT8')] = 3;\n      values[(valuesById[4] = 'UINT16')] = 4;\n      values[(valuesById[5] = 'INT16')] = 5;\n      values[(valuesById[6] = 'INT32')] = 6;\n      values[(valuesById[7] = 'INT64')] = 7;\n      values[(valuesById[8] = 'STRING')] = 8;\n      values[(valuesById[9] = 'BOOL')] = 9;\n      values[(valuesById[10] = 'FLOAT16')] = 10;\n      values[(valuesById[11] = 'DOUBLE')] = 11;\n      values[(valuesById[12] = 'UINT32')] = 12;\n      values[(valuesById[13] = 'UINT64')] = 13;\n      values[(valuesById[14] = 'COMPLEX64')] = 14;\n      values[(valuesById[15] = 'COMPLEX128')] = 15;\n      values[(valuesById[16] = 'BFLOAT16')] = 16;\n      values[(valuesById[17] = 'FLOAT8E4M3FN')] = 17;\n      values[(valuesById[18] = 'FLOAT8E4M3FNUZ')] = 18;\n      values[(valuesById[19] = 'FLOAT8E5M2')] = 19;\n      values[(valuesById[20] = 'FLOAT8E5M2FNUZ')] = 20;\n      return values;\n    })();\n\n    TensorProto.Segment = (function () {\n      /**\n       * Properties of a Segment.\n       * @memberof onnx.TensorProto\n       * @interface ISegment\n       * @property {number|Long|null} [begin] Segment begin\n       * @property {number|Long|null} [end] Segment end\n       */\n\n      /**\n       * Constructs a new Segment.\n       * @memberof onnx.TensorProto\n       * @classdesc Represents a Segment.\n       * @implements ISegment\n       * @constructor\n       * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n       */\n      function Segment(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Segment begin.\n       * @member {number|Long} begin\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       */\n      Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Segment end.\n       * @member {number|Long} end\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       */\n      Segment.prototype.end = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Creates a new Segment instance using the specified properties.\n       * @function create\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n       * @returns {onnx.TensorProto.Segment} Segment instance\n       */\n      Segment.create = function create(properties) {\n        return new Segment(properties);\n      };\n\n      /**\n       * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Segment.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.begin != null && Object.hasOwnProperty.call(message, 'begin'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.begin);\n        if (message.end != null && Object.hasOwnProperty.call(message, 'end'))\n          writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.end);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Segment.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Segment message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TensorProto.Segment} Segment\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Segment.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TensorProto.Segment();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.begin = reader.int64();\n              break;\n            }\n            case 2: {\n              message.end = reader.int64();\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Segment message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TensorProto.Segment} Segment\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Segment.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Segment message.\n       * @function verify\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Segment.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.begin != null && message.hasOwnProperty('begin'))\n          if (\n            !$util.isInteger(message.begin) &&\n            !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high))\n          )\n            return 'begin: integer|Long expected';\n        if (message.end != null && message.hasOwnProperty('end'))\n          if (\n            !$util.isInteger(message.end) &&\n            !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high))\n          )\n            return 'end: integer|Long expected';\n        return null;\n      };\n\n      /**\n       * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TensorProto.Segment} Segment\n       */\n      Segment.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TensorProto.Segment) return object;\n        var message = new $root.onnx.TensorProto.Segment();\n        if (object.begin != null)\n          if ($util.Long) (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n          else if (typeof object.begin === 'string') message.begin = parseInt(object.begin, 10);\n          else if (typeof object.begin === 'number') message.begin = object.begin;\n          else if (typeof object.begin === 'object')\n            message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n        if (object.end != null)\n          if ($util.Long) (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n          else if (typeof object.end === 'string') message.end = parseInt(object.end, 10);\n          else if (typeof object.end === 'number') message.end = object.end;\n          else if (typeof object.end === 'object')\n            message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Segment message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {onnx.TensorProto.Segment} message Segment\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Segment.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.begin =\n              options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.begin = options.longs === String ? '0' : 0;\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.end = options.longs === String ? '0' : 0;\n        }\n        if (message.begin != null && message.hasOwnProperty('begin'))\n          if (typeof message.begin === 'number')\n            object.begin = options.longs === String ? String(message.begin) : message.begin;\n          else\n            object.begin =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.begin)\n                : options.longs === Number\n                  ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber()\n                  : message.begin;\n        if (message.end != null && message.hasOwnProperty('end'))\n          if (typeof message.end === 'number')\n            object.end = options.longs === String ? String(message.end) : message.end;\n          else\n            object.end =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.end)\n                : options.longs === Number\n                  ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber()\n                  : message.end;\n        return object;\n      };\n\n      /**\n       * Converts this Segment to JSON.\n       * @function toJSON\n       * @memberof onnx.TensorProto.Segment\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Segment.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Segment\n       * @function getTypeUrl\n       * @memberof onnx.TensorProto.Segment\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TensorProto.Segment';\n      };\n\n      return Segment;\n    })();\n\n    /**\n     * DataLocation enum.\n     * @name onnx.TensorProto.DataLocation\n     * @enum {number}\n     * @property {number} DEFAULT=0 DEFAULT value\n     * @property {number} EXTERNAL=1 EXTERNAL value\n     */\n    TensorProto.DataLocation = (function () {\n      var valuesById = {},\n        values = Object.create(valuesById);\n      values[(valuesById[0] = 'DEFAULT')] = 0;\n      values[(valuesById[1] = 'EXTERNAL')] = 1;\n      return values;\n    })();\n\n    return TensorProto;\n  })();\n\n  onnx.SparseTensorProto = (function () {\n    /**\n     * Properties of a SparseTensorProto.\n     * @memberof onnx\n     * @interface ISparseTensorProto\n     * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n     * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n     * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n     */\n\n    /**\n     * Constructs a new SparseTensorProto.\n     * @memberof onnx\n     * @classdesc Represents a SparseTensorProto.\n     * @implements ISparseTensorProto\n     * @constructor\n     * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n     */\n    function SparseTensorProto(properties) {\n      this.dims = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SparseTensorProto values.\n     * @member {onnx.ITensorProto|null|undefined} values\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.values = null;\n\n    /**\n     * SparseTensorProto indices.\n     * @member {onnx.ITensorProto|null|undefined} indices\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.indices = null;\n\n    /**\n     * SparseTensorProto dims.\n     * @member {Array.<number|Long>} dims\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     */\n    SparseTensorProto.prototype.dims = $util.emptyArray;\n\n    /**\n     * Creates a new SparseTensorProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n     * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n     */\n    SparseTensorProto.create = function create(properties) {\n      return new SparseTensorProto(properties);\n    };\n\n    /**\n     * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SparseTensorProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.values != null && Object.hasOwnProperty.call(message, 'values'))\n        $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n      if (message.indices != null && Object.hasOwnProperty.call(message, 'indices'))\n        $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n      if (message.dims != null && message.dims.length) {\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork();\n        for (var i = 0; i < message.dims.length; ++i) writer.int64(message.dims[i]);\n        writer.ldelim();\n      }\n      return writer;\n    };\n\n    /**\n     * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SparseTensorProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SparseTensorProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.SparseTensorProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 2: {\n            message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n            break;\n          }\n          case 3: {\n            if (!(message.dims && message.dims.length)) message.dims = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.dims.push(reader.int64());\n            } else message.dims.push(reader.int64());\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SparseTensorProto message.\n     * @function verify\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SparseTensorProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.values != null && message.hasOwnProperty('values')) {\n        var error = $root.onnx.TensorProto.verify(message.values);\n        if (error) return 'values.' + error;\n      }\n      if (message.indices != null && message.hasOwnProperty('indices')) {\n        var error = $root.onnx.TensorProto.verify(message.indices);\n        if (error) return 'indices.' + error;\n      }\n      if (message.dims != null && message.hasOwnProperty('dims')) {\n        if (!Array.isArray(message.dims)) return 'dims: array expected';\n        for (var i = 0; i < message.dims.length; ++i)\n          if (\n            !$util.isInteger(message.dims[i]) &&\n            !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high))\n          )\n            return 'dims: integer|Long[] expected';\n      }\n      return null;\n    };\n\n    /**\n     * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.SparseTensorProto} SparseTensorProto\n     */\n    SparseTensorProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.SparseTensorProto) return object;\n      var message = new $root.onnx.SparseTensorProto();\n      if (object.values != null) {\n        if (typeof object.values !== 'object') throw TypeError('.onnx.SparseTensorProto.values: object expected');\n        message.values = $root.onnx.TensorProto.fromObject(object.values);\n      }\n      if (object.indices != null) {\n        if (typeof object.indices !== 'object') throw TypeError('.onnx.SparseTensorProto.indices: object expected');\n        message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n      }\n      if (object.dims) {\n        if (!Array.isArray(object.dims)) throw TypeError('.onnx.SparseTensorProto.dims: array expected');\n        message.dims = [];\n        for (var i = 0; i < object.dims.length; ++i)\n          if ($util.Long) (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n          else if (typeof object.dims[i] === 'string') message.dims[i] = parseInt(object.dims[i], 10);\n          else if (typeof object.dims[i] === 'number') message.dims[i] = object.dims[i];\n          else if (typeof object.dims[i] === 'object')\n            message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {onnx.SparseTensorProto} message SparseTensorProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SparseTensorProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.dims = [];\n      if (options.defaults) {\n        object.values = null;\n        object.indices = null;\n      }\n      if (message.values != null && message.hasOwnProperty('values'))\n        object.values = $root.onnx.TensorProto.toObject(message.values, options);\n      if (message.indices != null && message.hasOwnProperty('indices'))\n        object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n      if (message.dims && message.dims.length) {\n        object.dims = [];\n        for (var j = 0; j < message.dims.length; ++j)\n          if (typeof message.dims[j] === 'number')\n            object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n          else\n            object.dims[j] =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dims[j])\n                : options.longs === Number\n                  ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber()\n                  : message.dims[j];\n      }\n      return object;\n    };\n\n    /**\n     * Converts this SparseTensorProto to JSON.\n     * @function toJSON\n     * @memberof onnx.SparseTensorProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SparseTensorProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for SparseTensorProto\n     * @function getTypeUrl\n     * @memberof onnx.SparseTensorProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.SparseTensorProto';\n    };\n\n    return SparseTensorProto;\n  })();\n\n  onnx.TensorShapeProto = (function () {\n    /**\n     * Properties of a TensorShapeProto.\n     * @memberof onnx\n     * @interface ITensorShapeProto\n     * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n     */\n\n    /**\n     * Constructs a new TensorShapeProto.\n     * @memberof onnx\n     * @classdesc Represents a TensorShapeProto.\n     * @implements ITensorShapeProto\n     * @constructor\n     * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n     */\n    function TensorShapeProto(properties) {\n      this.dim = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TensorShapeProto dim.\n     * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n     * @memberof onnx.TensorShapeProto\n     * @instance\n     */\n    TensorShapeProto.prototype.dim = $util.emptyArray;\n\n    /**\n     * Creates a new TensorShapeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n     * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n     */\n    TensorShapeProto.create = function create(properties) {\n      return new TensorShapeProto(properties);\n    };\n\n    /**\n     * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorShapeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.dim != null && message.dim.length)\n        for (var i = 0; i < message.dim.length; ++i)\n          $root.onnx.TensorShapeProto.Dimension.encode(\n            message.dim[i],\n            writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TensorShapeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorShapeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TensorShapeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            if (!(message.dim && message.dim.length)) message.dim = [];\n            message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TensorShapeProto message.\n     * @function verify\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TensorShapeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.dim != null && message.hasOwnProperty('dim')) {\n        if (!Array.isArray(message.dim)) return 'dim: array expected';\n        for (var i = 0; i < message.dim.length; ++i) {\n          var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n          if (error) return 'dim.' + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TensorShapeProto} TensorShapeProto\n     */\n    TensorShapeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TensorShapeProto) return object;\n      var message = new $root.onnx.TensorShapeProto();\n      if (object.dim) {\n        if (!Array.isArray(object.dim)) throw TypeError('.onnx.TensorShapeProto.dim: array expected');\n        message.dim = [];\n        for (var i = 0; i < object.dim.length; ++i) {\n          if (typeof object.dim[i] !== 'object') throw TypeError('.onnx.TensorShapeProto.dim: object expected');\n          message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {onnx.TensorShapeProto} message TensorShapeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TensorShapeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.dim = [];\n      if (message.dim && message.dim.length) {\n        object.dim = [];\n        for (var j = 0; j < message.dim.length; ++j)\n          object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TensorShapeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TensorShapeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TensorShapeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TensorShapeProto\n     * @function getTypeUrl\n     * @memberof onnx.TensorShapeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TensorShapeProto';\n    };\n\n    TensorShapeProto.Dimension = (function () {\n      /**\n       * Properties of a Dimension.\n       * @memberof onnx.TensorShapeProto\n       * @interface IDimension\n       * @property {number|Long|null} [dimValue] Dimension dimValue\n       * @property {string|null} [dimParam] Dimension dimParam\n       * @property {string|null} [denotation] Dimension denotation\n       */\n\n      /**\n       * Constructs a new Dimension.\n       * @memberof onnx.TensorShapeProto\n       * @classdesc Represents a Dimension.\n       * @implements IDimension\n       * @constructor\n       * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n       */\n      function Dimension(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Dimension dimValue.\n       * @member {number|Long|null|undefined} dimValue\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.dimValue = null;\n\n      /**\n       * Dimension dimParam.\n       * @member {string|null|undefined} dimParam\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.dimParam = null;\n\n      /**\n       * Dimension denotation.\n       * @member {string} denotation\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Dimension.prototype.denotation = '';\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * Dimension value.\n       * @member {\"dimValue\"|\"dimParam\"|undefined} value\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       */\n      Object.defineProperty(Dimension.prototype, 'value', {\n        get: $util.oneOfGetter(($oneOfFields = ['dimValue', 'dimParam'])),\n        set: $util.oneOfSetter($oneOfFields),\n      });\n\n      /**\n       * Creates a new Dimension instance using the specified properties.\n       * @function create\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n       */\n      Dimension.create = function create(properties) {\n        return new Dimension(properties);\n      };\n\n      /**\n       * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Dimension.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.dimValue != null && Object.hasOwnProperty.call(message, 'dimValue'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.dimValue);\n        if (message.dimParam != null && Object.hasOwnProperty.call(message, 'dimParam'))\n          writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.dimParam);\n        if (message.denotation != null && Object.hasOwnProperty.call(message, 'denotation'))\n          writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.denotation);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Dimension message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Dimension.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TensorShapeProto.Dimension();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.dimValue = reader.int64();\n              break;\n            }\n            case 2: {\n              message.dimParam = reader.string();\n              break;\n            }\n            case 3: {\n              message.denotation = reader.string();\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Dimension message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Dimension.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Dimension message.\n       * @function verify\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Dimension.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        var properties = {};\n        if (message.dimValue != null && message.hasOwnProperty('dimValue')) {\n          properties.value = 1;\n          if (\n            !$util.isInteger(message.dimValue) &&\n            !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high))\n          )\n            return 'dimValue: integer|Long expected';\n        }\n        if (message.dimParam != null && message.hasOwnProperty('dimParam')) {\n          if (properties.value === 1) return 'value: multiple values';\n          properties.value = 1;\n          if (!$util.isString(message.dimParam)) return 'dimParam: string expected';\n        }\n        if (message.denotation != null && message.hasOwnProperty('denotation'))\n          if (!$util.isString(message.denotation)) return 'denotation: string expected';\n        return null;\n      };\n\n      /**\n       * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TensorShapeProto.Dimension} Dimension\n       */\n      Dimension.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TensorShapeProto.Dimension) return object;\n        var message = new $root.onnx.TensorShapeProto.Dimension();\n        if (object.dimValue != null)\n          if ($util.Long) (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n          else if (typeof object.dimValue === 'string') message.dimValue = parseInt(object.dimValue, 10);\n          else if (typeof object.dimValue === 'number') message.dimValue = object.dimValue;\n          else if (typeof object.dimValue === 'object')\n            message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n        if (object.dimParam != null) message.dimParam = String(object.dimParam);\n        if (object.denotation != null) message.denotation = String(object.denotation);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {onnx.TensorShapeProto.Dimension} message Dimension\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Dimension.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.denotation = '';\n        if (message.dimValue != null && message.hasOwnProperty('dimValue')) {\n          if (typeof message.dimValue === 'number')\n            object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n          else\n            object.dimValue =\n              options.longs === String\n                ? $util.Long.prototype.toString.call(message.dimValue)\n                : options.longs === Number\n                  ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber()\n                  : message.dimValue;\n          if (options.oneofs) object.value = 'dimValue';\n        }\n        if (message.dimParam != null && message.hasOwnProperty('dimParam')) {\n          object.dimParam = message.dimParam;\n          if (options.oneofs) object.value = 'dimParam';\n        }\n        if (message.denotation != null && message.hasOwnProperty('denotation')) object.denotation = message.denotation;\n        return object;\n      };\n\n      /**\n       * Converts this Dimension to JSON.\n       * @function toJSON\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Dimension.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Dimension\n       * @function getTypeUrl\n       * @memberof onnx.TensorShapeProto.Dimension\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TensorShapeProto.Dimension';\n      };\n\n      return Dimension;\n    })();\n\n    return TensorShapeProto;\n  })();\n\n  onnx.TypeProto = (function () {\n    /**\n     * Properties of a TypeProto.\n     * @memberof onnx\n     * @interface ITypeProto\n     * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n     * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n     * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n     * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n     * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n     * @property {string|null} [denotation] TypeProto denotation\n     */\n\n    /**\n     * Constructs a new TypeProto.\n     * @memberof onnx\n     * @classdesc Represents a TypeProto.\n     * @implements ITypeProto\n     * @constructor\n     * @param {onnx.ITypeProto=} [properties] Properties to set\n     */\n    function TypeProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeProto tensorType.\n     * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.tensorType = null;\n\n    /**\n     * TypeProto sequenceType.\n     * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.sequenceType = null;\n\n    /**\n     * TypeProto mapType.\n     * @member {onnx.TypeProto.IMap|null|undefined} mapType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.mapType = null;\n\n    /**\n     * TypeProto optionalType.\n     * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.optionalType = null;\n\n    /**\n     * TypeProto sparseTensorType.\n     * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.sparseTensorType = null;\n\n    /**\n     * TypeProto denotation.\n     * @member {string} denotation\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    TypeProto.prototype.denotation = '';\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * TypeProto value.\n     * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n     * @memberof onnx.TypeProto\n     * @instance\n     */\n    Object.defineProperty(TypeProto.prototype, 'value', {\n      get: $util.oneOfGetter(\n        ($oneOfFields = ['tensorType', 'sequenceType', 'mapType', 'optionalType', 'sparseTensorType']),\n      ),\n      set: $util.oneOfSetter($oneOfFields),\n    });\n\n    /**\n     * Creates a new TypeProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto=} [properties] Properties to set\n     * @returns {onnx.TypeProto} TypeProto instance\n     */\n    TypeProto.create = function create(properties) {\n      return new TypeProto(properties);\n    };\n\n    /**\n     * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.tensorType != null && Object.hasOwnProperty.call(message, 'tensorType'))\n        $root.onnx.TypeProto.Tensor.encode(\n          message.tensorType,\n          writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n        ).ldelim();\n      if (message.sequenceType != null && Object.hasOwnProperty.call(message, 'sequenceType'))\n        $root.onnx.TypeProto.Sequence.encode(\n          message.sequenceType,\n          writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n        ).ldelim();\n      if (message.mapType != null && Object.hasOwnProperty.call(message, 'mapType'))\n        $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n      if (message.denotation != null && Object.hasOwnProperty.call(message, 'denotation'))\n        writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.denotation);\n      if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, 'sparseTensorType'))\n        $root.onnx.TypeProto.SparseTensor.encode(\n          message.sparseTensorType,\n          writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n        ).ldelim();\n      if (message.optionalType != null && Object.hasOwnProperty.call(message, 'optionalType'))\n        $root.onnx.TypeProto.Optional.encode(\n          message.optionalType,\n          writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n        ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.TypeProto} TypeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.TypeProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n            break;\n          }\n          case 4: {\n            message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n            break;\n          }\n          case 5: {\n            message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n            break;\n          }\n          case 9: {\n            message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n            break;\n          }\n          case 8: {\n            message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n            break;\n          }\n          case 6: {\n            message.denotation = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.TypeProto} TypeProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeProto message.\n     * @function verify\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      var properties = {};\n      if (message.tensorType != null && message.hasOwnProperty('tensorType')) {\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n          if (error) return 'tensorType.' + error;\n        }\n      }\n      if (message.sequenceType != null && message.hasOwnProperty('sequenceType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n          if (error) return 'sequenceType.' + error;\n        }\n      }\n      if (message.mapType != null && message.hasOwnProperty('mapType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n          if (error) return 'mapType.' + error;\n        }\n      }\n      if (message.optionalType != null && message.hasOwnProperty('optionalType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n          if (error) return 'optionalType.' + error;\n        }\n      }\n      if (message.sparseTensorType != null && message.hasOwnProperty('sparseTensorType')) {\n        if (properties.value === 1) return 'value: multiple values';\n        properties.value = 1;\n        {\n          var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n          if (error) return 'sparseTensorType.' + error;\n        }\n      }\n      if (message.denotation != null && message.hasOwnProperty('denotation'))\n        if (!$util.isString(message.denotation)) return 'denotation: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.TypeProto} TypeProto\n     */\n    TypeProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.TypeProto) return object;\n      var message = new $root.onnx.TypeProto();\n      if (object.tensorType != null) {\n        if (typeof object.tensorType !== 'object') throw TypeError('.onnx.TypeProto.tensorType: object expected');\n        message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n      }\n      if (object.sequenceType != null) {\n        if (typeof object.sequenceType !== 'object') throw TypeError('.onnx.TypeProto.sequenceType: object expected');\n        message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n      }\n      if (object.mapType != null) {\n        if (typeof object.mapType !== 'object') throw TypeError('.onnx.TypeProto.mapType: object expected');\n        message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n      }\n      if (object.optionalType != null) {\n        if (typeof object.optionalType !== 'object') throw TypeError('.onnx.TypeProto.optionalType: object expected');\n        message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n      }\n      if (object.sparseTensorType != null) {\n        if (typeof object.sparseTensorType !== 'object')\n          throw TypeError('.onnx.TypeProto.sparseTensorType: object expected');\n        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n      }\n      if (object.denotation != null) message.denotation = String(object.denotation);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {onnx.TypeProto} message TypeProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) object.denotation = '';\n      if (message.tensorType != null && message.hasOwnProperty('tensorType')) {\n        object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n        if (options.oneofs) object.value = 'tensorType';\n      }\n      if (message.sequenceType != null && message.hasOwnProperty('sequenceType')) {\n        object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n        if (options.oneofs) object.value = 'sequenceType';\n      }\n      if (message.mapType != null && message.hasOwnProperty('mapType')) {\n        object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n        if (options.oneofs) object.value = 'mapType';\n      }\n      if (message.denotation != null && message.hasOwnProperty('denotation')) object.denotation = message.denotation;\n      if (message.sparseTensorType != null && message.hasOwnProperty('sparseTensorType')) {\n        object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n        if (options.oneofs) object.value = 'sparseTensorType';\n      }\n      if (message.optionalType != null && message.hasOwnProperty('optionalType')) {\n        object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n        if (options.oneofs) object.value = 'optionalType';\n      }\n      return object;\n    };\n\n    /**\n     * Converts this TypeProto to JSON.\n     * @function toJSON\n     * @memberof onnx.TypeProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for TypeProto\n     * @function getTypeUrl\n     * @memberof onnx.TypeProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.TypeProto';\n    };\n\n    TypeProto.Tensor = (function () {\n      /**\n       * Properties of a Tensor.\n       * @memberof onnx.TypeProto\n       * @interface ITensor\n       * @property {number|null} [elemType] Tensor elemType\n       * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n       */\n\n      /**\n       * Constructs a new Tensor.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Tensor.\n       * @implements ITensor\n       * @constructor\n       * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n       */\n      function Tensor(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Tensor elemType.\n       * @member {number} elemType\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       */\n      Tensor.prototype.elemType = 0;\n\n      /**\n       * Tensor shape.\n       * @member {onnx.ITensorShapeProto|null|undefined} shape\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       */\n      Tensor.prototype.shape = null;\n\n      /**\n       * Creates a new Tensor instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Tensor} Tensor instance\n       */\n      Tensor.create = function create(properties) {\n        return new Tensor(properties);\n      };\n\n      /**\n       * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Tensor.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.elemType);\n        if (message.shape != null && Object.hasOwnProperty.call(message, 'shape'))\n          $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Tensor message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Tensor.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Tensor();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Tensor message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Tensor.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Tensor message.\n       * @function verify\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Tensor.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          if (!$util.isInteger(message.elemType)) return 'elemType: integer expected';\n        if (message.shape != null && message.hasOwnProperty('shape')) {\n          var error = $root.onnx.TensorShapeProto.verify(message.shape);\n          if (error) return 'shape.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Tensor} Tensor\n       */\n      Tensor.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Tensor) return object;\n        var message = new $root.onnx.TypeProto.Tensor();\n        if (object.elemType != null) message.elemType = object.elemType | 0;\n        if (object.shape != null) {\n          if (typeof object.shape !== 'object') throw TypeError('.onnx.TypeProto.Tensor.shape: object expected');\n          message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {onnx.TypeProto.Tensor} message Tensor\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Tensor.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.elemType = 0;\n          object.shape = null;\n        }\n        if (message.elemType != null && message.hasOwnProperty('elemType')) object.elemType = message.elemType;\n        if (message.shape != null && message.hasOwnProperty('shape'))\n          object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n        return object;\n      };\n\n      /**\n       * Converts this Tensor to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Tensor\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Tensor.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Tensor\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Tensor\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Tensor';\n      };\n\n      return Tensor;\n    })();\n\n    TypeProto.Sequence = (function () {\n      /**\n       * Properties of a Sequence.\n       * @memberof onnx.TypeProto\n       * @interface ISequence\n       * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n       */\n\n      /**\n       * Constructs a new Sequence.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Sequence.\n       * @implements ISequence\n       * @constructor\n       * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n       */\n      function Sequence(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Sequence elemType.\n       * @member {onnx.ITypeProto|null|undefined} elemType\n       * @memberof onnx.TypeProto.Sequence\n       * @instance\n       */\n      Sequence.prototype.elemType = null;\n\n      /**\n       * Creates a new Sequence instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Sequence} Sequence instance\n       */\n      Sequence.create = function create(properties) {\n        return new Sequence(properties);\n      };\n\n      /**\n       * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Sequence.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Sequence message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Sequence.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Sequence();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Sequence message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Sequence.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Sequence message.\n       * @function verify\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Sequence.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType')) {\n          var error = $root.onnx.TypeProto.verify(message.elemType);\n          if (error) return 'elemType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Sequence} Sequence\n       */\n      Sequence.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Sequence) return object;\n        var message = new $root.onnx.TypeProto.Sequence();\n        if (object.elemType != null) {\n          if (typeof object.elemType !== 'object')\n            throw TypeError('.onnx.TypeProto.Sequence.elemType: object expected');\n          message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {onnx.TypeProto.Sequence} message Sequence\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Sequence.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.elemType = null;\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Sequence to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Sequence\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Sequence.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Sequence\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Sequence\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Sequence';\n      };\n\n      return Sequence;\n    })();\n\n    TypeProto.Map = (function () {\n      /**\n       * Properties of a Map.\n       * @memberof onnx.TypeProto\n       * @interface IMap\n       * @property {number|null} [keyType] Map keyType\n       * @property {onnx.ITypeProto|null} [valueType] Map valueType\n       */\n\n      /**\n       * Constructs a new Map.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a Map.\n       * @implements IMap\n       * @constructor\n       * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n       */\n      function Map(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Map keyType.\n       * @member {number} keyType\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       */\n      Map.prototype.keyType = 0;\n\n      /**\n       * Map valueType.\n       * @member {onnx.ITypeProto|null|undefined} valueType\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       */\n      Map.prototype.valueType = null;\n\n      /**\n       * Creates a new Map instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Map} Map instance\n       */\n      Map.create = function create(properties) {\n        return new Map(properties);\n      };\n\n      /**\n       * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Map.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.keyType != null && Object.hasOwnProperty.call(message, 'keyType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.keyType);\n        if (message.valueType != null && Object.hasOwnProperty.call(message, 'valueType'))\n          $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Map.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Map message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Map} Map\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Map.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Map();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.keyType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Map message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Map} Map\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Map.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Map message.\n       * @function verify\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Map.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.keyType != null && message.hasOwnProperty('keyType'))\n          if (!$util.isInteger(message.keyType)) return 'keyType: integer expected';\n        if (message.valueType != null && message.hasOwnProperty('valueType')) {\n          var error = $root.onnx.TypeProto.verify(message.valueType);\n          if (error) return 'valueType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Map message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Map} Map\n       */\n      Map.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Map) return object;\n        var message = new $root.onnx.TypeProto.Map();\n        if (object.keyType != null) message.keyType = object.keyType | 0;\n        if (object.valueType != null) {\n          if (typeof object.valueType !== 'object') throw TypeError('.onnx.TypeProto.Map.valueType: object expected');\n          message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Map message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {onnx.TypeProto.Map} message Map\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Map.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.keyType = 0;\n          object.valueType = null;\n        }\n        if (message.keyType != null && message.hasOwnProperty('keyType')) object.keyType = message.keyType;\n        if (message.valueType != null && message.hasOwnProperty('valueType'))\n          object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Map to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Map\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Map.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Map\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Map\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Map';\n      };\n\n      return Map;\n    })();\n\n    TypeProto.Optional = (function () {\n      /**\n       * Properties of an Optional.\n       * @memberof onnx.TypeProto\n       * @interface IOptional\n       * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n       */\n\n      /**\n       * Constructs a new Optional.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents an Optional.\n       * @implements IOptional\n       * @constructor\n       * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n       */\n      function Optional(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Optional elemType.\n       * @member {onnx.ITypeProto|null|undefined} elemType\n       * @memberof onnx.TypeProto.Optional\n       * @instance\n       */\n      Optional.prototype.elemType = null;\n\n      /**\n       * Creates a new Optional instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n       * @returns {onnx.TypeProto.Optional} Optional instance\n       */\n      Optional.create = function create(properties) {\n        return new Optional(properties);\n      };\n\n      /**\n       * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Optional.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Optional.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an Optional message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.Optional} Optional\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Optional.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.Optional();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an Optional message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.Optional} Optional\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Optional.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an Optional message.\n       * @function verify\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Optional.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType')) {\n          var error = $root.onnx.TypeProto.verify(message.elemType);\n          if (error) return 'elemType.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.Optional} Optional\n       */\n      Optional.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.Optional) return object;\n        var message = new $root.onnx.TypeProto.Optional();\n        if (object.elemType != null) {\n          if (typeof object.elemType !== 'object')\n            throw TypeError('.onnx.TypeProto.Optional.elemType: object expected');\n          message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an Optional message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {onnx.TypeProto.Optional} message Optional\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Optional.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.elemType = null;\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n        return object;\n      };\n\n      /**\n       * Converts this Optional to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.Optional\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Optional.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Optional\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.Optional\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.Optional';\n      };\n\n      return Optional;\n    })();\n\n    TypeProto.SparseTensor = (function () {\n      /**\n       * Properties of a SparseTensor.\n       * @memberof onnx.TypeProto\n       * @interface ISparseTensor\n       * @property {number|null} [elemType] SparseTensor elemType\n       * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n       */\n\n      /**\n       * Constructs a new SparseTensor.\n       * @memberof onnx.TypeProto\n       * @classdesc Represents a SparseTensor.\n       * @implements ISparseTensor\n       * @constructor\n       * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n       */\n      function SparseTensor(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SparseTensor elemType.\n       * @member {number} elemType\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       */\n      SparseTensor.prototype.elemType = 0;\n\n      /**\n       * SparseTensor shape.\n       * @member {onnx.ITensorShapeProto|null|undefined} shape\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       */\n      SparseTensor.prototype.shape = null;\n\n      /**\n       * Creates a new SparseTensor instance using the specified properties.\n       * @function create\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n       */\n      SparseTensor.create = function create(properties) {\n        return new SparseTensor(properties);\n      };\n\n      /**\n       * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n       * @function encode\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SparseTensor.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.elemType != null && Object.hasOwnProperty.call(message, 'elemType'))\n          writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.elemType);\n        if (message.shape != null && Object.hasOwnProperty.call(message, 'shape'))\n          $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a SparseTensor message from the specified reader or buffer.\n       * @function decode\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SparseTensor.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.onnx.TypeProto.SparseTensor();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1: {\n              message.elemType = reader.int32();\n              break;\n            }\n            case 2: {\n              message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n              break;\n            }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a SparseTensor message.\n       * @function verify\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      SparseTensor.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null) return 'object expected';\n        if (message.elemType != null && message.hasOwnProperty('elemType'))\n          if (!$util.isInteger(message.elemType)) return 'elemType: integer expected';\n        if (message.shape != null && message.hasOwnProperty('shape')) {\n          var error = $root.onnx.TensorShapeProto.verify(message.shape);\n          if (error) return 'shape.' + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n       */\n      SparseTensor.fromObject = function fromObject(object) {\n        if (object instanceof $root.onnx.TypeProto.SparseTensor) return object;\n        var message = new $root.onnx.TypeProto.SparseTensor();\n        if (object.elemType != null) message.elemType = object.elemType | 0;\n        if (object.shape != null) {\n          if (typeof object.shape !== 'object') throw TypeError('.onnx.TypeProto.SparseTensor.shape: object expected');\n          message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      SparseTensor.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.elemType = 0;\n          object.shape = null;\n        }\n        if (message.elemType != null && message.hasOwnProperty('elemType')) object.elemType = message.elemType;\n        if (message.shape != null && message.hasOwnProperty('shape'))\n          object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n        return object;\n      };\n\n      /**\n       * Converts this SparseTensor to JSON.\n       * @function toJSON\n       * @memberof onnx.TypeProto.SparseTensor\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      SparseTensor.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for SparseTensor\n       * @function getTypeUrl\n       * @memberof onnx.TypeProto.SparseTensor\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = 'type.googleapis.com';\n        }\n        return typeUrlPrefix + '/onnx.TypeProto.SparseTensor';\n      };\n\n      return SparseTensor;\n    })();\n\n    return TypeProto;\n  })();\n\n  onnx.OperatorSetIdProto = (function () {\n    /**\n     * Properties of an OperatorSetIdProto.\n     * @memberof onnx\n     * @interface IOperatorSetIdProto\n     * @property {string|null} [domain] OperatorSetIdProto domain\n     * @property {number|Long|null} [version] OperatorSetIdProto version\n     */\n\n    /**\n     * Constructs a new OperatorSetIdProto.\n     * @memberof onnx\n     * @classdesc Represents an OperatorSetIdProto.\n     * @implements IOperatorSetIdProto\n     * @constructor\n     * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n     */\n    function OperatorSetIdProto(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * OperatorSetIdProto domain.\n     * @member {string} domain\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     */\n    OperatorSetIdProto.prototype.domain = '';\n\n    /**\n     * OperatorSetIdProto version.\n     * @member {number|Long} version\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     */\n    OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * Creates a new OperatorSetIdProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n     */\n    OperatorSetIdProto.create = function create(properties) {\n      return new OperatorSetIdProto(properties);\n    };\n\n    /**\n     * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    OperatorSetIdProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.domain);\n      if (message.version != null && Object.hasOwnProperty.call(message, 'version'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.version);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    OperatorSetIdProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.OperatorSetIdProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.domain = reader.string();\n            break;\n          }\n          case 2: {\n            message.version = reader.int64();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an OperatorSetIdProto message.\n     * @function verify\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    OperatorSetIdProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      if (message.version != null && message.hasOwnProperty('version'))\n        if (\n          !$util.isInteger(message.version) &&\n          !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high))\n        )\n          return 'version: integer|Long expected';\n      return null;\n    };\n\n    /**\n     * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n     */\n    OperatorSetIdProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.OperatorSetIdProto) return object;\n      var message = new $root.onnx.OperatorSetIdProto();\n      if (object.domain != null) message.domain = String(object.domain);\n      if (object.version != null)\n        if ($util.Long) (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n        else if (typeof object.version === 'string') message.version = parseInt(object.version, 10);\n        else if (typeof object.version === 'number') message.version = object.version;\n        else if (typeof object.version === 'object')\n          message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    OperatorSetIdProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.domain = '';\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.version =\n            options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.version = options.longs === String ? '0' : 0;\n      }\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.version != null && message.hasOwnProperty('version'))\n        if (typeof message.version === 'number')\n          object.version = options.longs === String ? String(message.version) : message.version;\n        else\n          object.version =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.version)\n              : options.longs === Number\n                ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber()\n                : message.version;\n      return object;\n    };\n\n    /**\n     * Converts this OperatorSetIdProto to JSON.\n     * @function toJSON\n     * @memberof onnx.OperatorSetIdProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    OperatorSetIdProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for OperatorSetIdProto\n     * @function getTypeUrl\n     * @memberof onnx.OperatorSetIdProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.OperatorSetIdProto';\n    };\n\n    return OperatorSetIdProto;\n  })();\n\n  /**\n   * OperatorStatus enum.\n   * @name onnx.OperatorStatus\n   * @enum {number}\n   * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n   * @property {number} STABLE=1 STABLE value\n   */\n  onnx.OperatorStatus = (function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[(valuesById[0] = 'EXPERIMENTAL')] = 0;\n    values[(valuesById[1] = 'STABLE')] = 1;\n    return values;\n  })();\n\n  onnx.FunctionProto = (function () {\n    /**\n     * Properties of a FunctionProto.\n     * @memberof onnx\n     * @interface IFunctionProto\n     * @property {string|null} [name] FunctionProto name\n     * @property {Array.<string>|null} [input] FunctionProto input\n     * @property {Array.<string>|null} [output] FunctionProto output\n     * @property {Array.<string>|null} [attribute] FunctionProto attribute\n     * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n     * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n     * @property {string|null} [docString] FunctionProto docString\n     * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n     * @property {string|null} [domain] FunctionProto domain\n     */\n\n    /**\n     * Constructs a new FunctionProto.\n     * @memberof onnx\n     * @classdesc Represents a FunctionProto.\n     * @implements IFunctionProto\n     * @constructor\n     * @param {onnx.IFunctionProto=} [properties] Properties to set\n     */\n    function FunctionProto(properties) {\n      this.input = [];\n      this.output = [];\n      this.attribute = [];\n      this.attributeProto = [];\n      this.node = [];\n      this.opsetImport = [];\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FunctionProto name.\n     * @member {string} name\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.name = '';\n\n    /**\n     * FunctionProto input.\n     * @member {Array.<string>} input\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.input = $util.emptyArray;\n\n    /**\n     * FunctionProto output.\n     * @member {Array.<string>} output\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.output = $util.emptyArray;\n\n    /**\n     * FunctionProto attribute.\n     * @member {Array.<string>} attribute\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.attribute = $util.emptyArray;\n\n    /**\n     * FunctionProto attributeProto.\n     * @member {Array.<onnx.IAttributeProto>} attributeProto\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n    /**\n     * FunctionProto node.\n     * @member {Array.<onnx.INodeProto>} node\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.node = $util.emptyArray;\n\n    /**\n     * FunctionProto docString.\n     * @member {string} docString\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.docString = '';\n\n    /**\n     * FunctionProto opsetImport.\n     * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n    /**\n     * FunctionProto domain.\n     * @member {string} domain\n     * @memberof onnx.FunctionProto\n     * @instance\n     */\n    FunctionProto.prototype.domain = '';\n\n    /**\n     * Creates a new FunctionProto instance using the specified properties.\n     * @function create\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto=} [properties] Properties to set\n     * @returns {onnx.FunctionProto} FunctionProto instance\n     */\n    FunctionProto.create = function create(properties) {\n      return new FunctionProto(properties);\n    };\n\n    /**\n     * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n     * @function encode\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FunctionProto.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n      if (message.input != null && message.input.length)\n        for (var i = 0; i < message.input.length; ++i)\n          writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.input[i]);\n      if (message.output != null && message.output.length)\n        for (var i = 0; i < message.output.length; ++i)\n          writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.output[i]);\n      if (message.attribute != null && message.attribute.length)\n        for (var i = 0; i < message.attribute.length; ++i)\n          writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.attribute[i]);\n      if (message.node != null && message.node.length)\n        for (var i = 0; i < message.node.length; ++i)\n          $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n      if (message.docString != null && Object.hasOwnProperty.call(message, 'docString'))\n        writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.docString);\n      if (message.opsetImport != null && message.opsetImport.length)\n        for (var i = 0; i < message.opsetImport.length; ++i)\n          $root.onnx.OperatorSetIdProto.encode(\n            message.opsetImport[i],\n            writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n          ).ldelim();\n      if (message.domain != null && Object.hasOwnProperty.call(message, 'domain'))\n        writer.uint32(/* id 10, wireType 2 =*/ 82).string(message.domain);\n      if (message.attributeProto != null && message.attributeProto.length)\n        for (var i = 0; i < message.attributeProto.length; ++i)\n          $root.onnx.AttributeProto.encode(\n            message.attributeProto[i],\n            writer.uint32(/* id 11, wireType 2 =*/ 90).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FunctionProto message from the specified reader or buffer.\n     * @function decode\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {onnx.FunctionProto} FunctionProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FunctionProto.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.onnx.FunctionProto();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1: {\n            message.name = reader.string();\n            break;\n          }\n          case 4: {\n            if (!(message.input && message.input.length)) message.input = [];\n            message.input.push(reader.string());\n            break;\n          }\n          case 5: {\n            if (!(message.output && message.output.length)) message.output = [];\n            message.output.push(reader.string());\n            break;\n          }\n          case 6: {\n            if (!(message.attribute && message.attribute.length)) message.attribute = [];\n            message.attribute.push(reader.string());\n            break;\n          }\n          case 11: {\n            if (!(message.attributeProto && message.attributeProto.length)) message.attributeProto = [];\n            message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 7: {\n            if (!(message.node && message.node.length)) message.node = [];\n            message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 8: {\n            message.docString = reader.string();\n            break;\n          }\n          case 9: {\n            if (!(message.opsetImport && message.opsetImport.length)) message.opsetImport = [];\n            message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n            break;\n          }\n          case 10: {\n            message.domain = reader.string();\n            break;\n          }\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {onnx.FunctionProto} FunctionProto\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FunctionProto message.\n     * @function verify\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FunctionProto.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name'))\n        if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.input != null && message.hasOwnProperty('input')) {\n        if (!Array.isArray(message.input)) return 'input: array expected';\n        for (var i = 0; i < message.input.length; ++i)\n          if (!$util.isString(message.input[i])) return 'input: string[] expected';\n      }\n      if (message.output != null && message.hasOwnProperty('output')) {\n        if (!Array.isArray(message.output)) return 'output: array expected';\n        for (var i = 0; i < message.output.length; ++i)\n          if (!$util.isString(message.output[i])) return 'output: string[] expected';\n      }\n      if (message.attribute != null && message.hasOwnProperty('attribute')) {\n        if (!Array.isArray(message.attribute)) return 'attribute: array expected';\n        for (var i = 0; i < message.attribute.length; ++i)\n          if (!$util.isString(message.attribute[i])) return 'attribute: string[] expected';\n      }\n      if (message.attributeProto != null && message.hasOwnProperty('attributeProto')) {\n        if (!Array.isArray(message.attributeProto)) return 'attributeProto: array expected';\n        for (var i = 0; i < message.attributeProto.length; ++i) {\n          var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n          if (error) return 'attributeProto.' + error;\n        }\n      }\n      if (message.node != null && message.hasOwnProperty('node')) {\n        if (!Array.isArray(message.node)) return 'node: array expected';\n        for (var i = 0; i < message.node.length; ++i) {\n          var error = $root.onnx.NodeProto.verify(message.node[i]);\n          if (error) return 'node.' + error;\n        }\n      }\n      if (message.docString != null && message.hasOwnProperty('docString'))\n        if (!$util.isString(message.docString)) return 'docString: string expected';\n      if (message.opsetImport != null && message.hasOwnProperty('opsetImport')) {\n        if (!Array.isArray(message.opsetImport)) return 'opsetImport: array expected';\n        for (var i = 0; i < message.opsetImport.length; ++i) {\n          var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n          if (error) return 'opsetImport.' + error;\n        }\n      }\n      if (message.domain != null && message.hasOwnProperty('domain'))\n        if (!$util.isString(message.domain)) return 'domain: string expected';\n      return null;\n    };\n\n    /**\n     * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {onnx.FunctionProto} FunctionProto\n     */\n    FunctionProto.fromObject = function fromObject(object) {\n      if (object instanceof $root.onnx.FunctionProto) return object;\n      var message = new $root.onnx.FunctionProto();\n      if (object.name != null) message.name = String(object.name);\n      if (object.input) {\n        if (!Array.isArray(object.input)) throw TypeError('.onnx.FunctionProto.input: array expected');\n        message.input = [];\n        for (var i = 0; i < object.input.length; ++i) message.input[i] = String(object.input[i]);\n      }\n      if (object.output) {\n        if (!Array.isArray(object.output)) throw TypeError('.onnx.FunctionProto.output: array expected');\n        message.output = [];\n        for (var i = 0; i < object.output.length; ++i) message.output[i] = String(object.output[i]);\n      }\n      if (object.attribute) {\n        if (!Array.isArray(object.attribute)) throw TypeError('.onnx.FunctionProto.attribute: array expected');\n        message.attribute = [];\n        for (var i = 0; i < object.attribute.length; ++i) message.attribute[i] = String(object.attribute[i]);\n      }\n      if (object.attributeProto) {\n        if (!Array.isArray(object.attributeProto))\n          throw TypeError('.onnx.FunctionProto.attributeProto: array expected');\n        message.attributeProto = [];\n        for (var i = 0; i < object.attributeProto.length; ++i) {\n          if (typeof object.attributeProto[i] !== 'object')\n            throw TypeError('.onnx.FunctionProto.attributeProto: object expected');\n          message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n        }\n      }\n      if (object.node) {\n        if (!Array.isArray(object.node)) throw TypeError('.onnx.FunctionProto.node: array expected');\n        message.node = [];\n        for (var i = 0; i < object.node.length; ++i) {\n          if (typeof object.node[i] !== 'object') throw TypeError('.onnx.FunctionProto.node: object expected');\n          message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n        }\n      }\n      if (object.docString != null) message.docString = String(object.docString);\n      if (object.opsetImport) {\n        if (!Array.isArray(object.opsetImport)) throw TypeError('.onnx.FunctionProto.opsetImport: array expected');\n        message.opsetImport = [];\n        for (var i = 0; i < object.opsetImport.length; ++i) {\n          if (typeof object.opsetImport[i] !== 'object')\n            throw TypeError('.onnx.FunctionProto.opsetImport: object expected');\n          message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n        }\n      }\n      if (object.domain != null) message.domain = String(object.domain);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {onnx.FunctionProto} message FunctionProto\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FunctionProto.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.input = [];\n        object.output = [];\n        object.attribute = [];\n        object.node = [];\n        object.opsetImport = [];\n        object.attributeProto = [];\n      }\n      if (options.defaults) {\n        object.name = '';\n        object.docString = '';\n        object.domain = '';\n      }\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.input && message.input.length) {\n        object.input = [];\n        for (var j = 0; j < message.input.length; ++j) object.input[j] = message.input[j];\n      }\n      if (message.output && message.output.length) {\n        object.output = [];\n        for (var j = 0; j < message.output.length; ++j) object.output[j] = message.output[j];\n      }\n      if (message.attribute && message.attribute.length) {\n        object.attribute = [];\n        for (var j = 0; j < message.attribute.length; ++j) object.attribute[j] = message.attribute[j];\n      }\n      if (message.node && message.node.length) {\n        object.node = [];\n        for (var j = 0; j < message.node.length; ++j)\n          object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n      }\n      if (message.docString != null && message.hasOwnProperty('docString')) object.docString = message.docString;\n      if (message.opsetImport && message.opsetImport.length) {\n        object.opsetImport = [];\n        for (var j = 0; j < message.opsetImport.length; ++j)\n          object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n      }\n      if (message.domain != null && message.hasOwnProperty('domain')) object.domain = message.domain;\n      if (message.attributeProto && message.attributeProto.length) {\n        object.attributeProto = [];\n        for (var j = 0; j < message.attributeProto.length; ++j)\n          object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this FunctionProto to JSON.\n     * @function toJSON\n     * @memberof onnx.FunctionProto\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FunctionProto.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for FunctionProto\n     * @function getTypeUrl\n     * @memberof onnx.FunctionProto\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = 'type.googleapis.com';\n      }\n      return typeUrlPrefix + '/onnx.FunctionProto';\n    };\n\n    return FunctionProto;\n  })();\n\n  return onnx;\n})();\n\nmodule.exports = $root;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long from 'long';\n\nimport { Graph } from './graph';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n    n1:\n      | readonly number[]\n      | Int8Array\n      | Uint8Array\n      | Int16Array\n      | Uint16Array\n      | Int32Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array,\n    n2:\n      | readonly number[]\n      | Int8Array\n      | Uint8Array\n      | Int16Array\n      | Uint16Array\n      | Int32Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array,\n  ) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(\n    dimsA: readonly number[],\n    dimsB: readonly number[],\n  ): [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = dimsA.length === 1 ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = dimsB.length === 1 ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number] | undefined {\n    return a[1] !== b[0] ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(\n    adims: readonly number[],\n    bdims: readonly number[],\n    isMatMul = false,\n  ): readonly number[] | undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul = MatMulUtil.calcMatMulShape(\n        [adims[arank - 2], adims[arank - 1]],\n        [bdims[brank - 2], bdims[brank - 1]],\n      );\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n    a: Tensor,\n    b: Tensor,\n    op: (a: string | number, b: string | number) => string | number,\n    inplace: boolean,\n    resultType?: Tensor.DataType,\n  ): Tensor | undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string | number = 0;\n        let valB: string | number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n  target: number[] | Tensor.NumberType,\n  source: number[] | Tensor.NumberType,\n  targetIndex: number,\n  sourceIndex: number,\n  blockSize: number,\n) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n    leftShape: readonly number[],\n    transLeft: boolean,\n    rightShape: readonly number[],\n    transRight: boolean,\n    biasShape?: readonly number[],\n  ): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(\n    typeProto: onnx.TensorProto.DataType | onnxruntime.experimental.fbs.TensorDataType,\n  ): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number | Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map((d) => (Long.isLong(d) ? d.toNumber() : d));\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: { dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map((d) => d.dimValue!)) },\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional parameter to convert to a unsigned number.\n  static longToNumber(n: Long | flatbuffers.Long | number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({ low: n.low, high: n.high, unsigned: unsigned ?? false }).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.',\n        );\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map((x) => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(\n          `the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims\n          }] Output shape: [${shapeHints}]`,\n        );\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error(\"reshapedDims and originalDims don't have matching sizes\");\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error(\"'axes' has an out of range axis\");\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error(\"'axes' has a duplicate axis\");\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n    alpha: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += alpha * source[sourceIndex + offset];\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n    b: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n    target: number[] | Tensor.NumberType,\n    source: number[] | Tensor.NumberType,\n    targetIndex: number,\n    sourceIndex: number,\n    blockSize: number,\n  ) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = source[sourceIndex + offset] * target[targetIndex + offset];\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(\n    dims: readonly number[],\n    axis: number,\n    split: number[],\n    numOutputs?: number,\n  ): [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error(\"need to know number of outputs when the 'split' attribute is not specified\");\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n    a: Tensor,\n    axes: number[],\n    keepdims: boolean,\n    op1: (b: number) => number,\n    op2: (a: number, b: number) => number,\n  ): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((_d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n        indices,\n        ReduceUtil.calcReduceByAxis(\n          a.numberData,\n          axes,\n          dims,\n          0,\n          ShapeUtil.indicesToOffset(indicesY, inputStrides),\n          op1,\n          op2,\n        ),\n      );\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n        ReduceUtil.calcReduceShape(dims, axes, keepdims),\n        y.type,\n        undefined,\n        undefined,\n        y.data,\n        y.dataId,\n      );\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n    input: Tensor.NumberType,\n    axes: number[],\n    dims: number[],\n    curAxisInd: number,\n    pos: number,\n    op1: (b: number) => number,\n    op2: (a: number, b: number) => number,\n  ): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res =\n        i === 0\n          ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2)\n          : op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter((dim) => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    kernelShape: number[],\n    strides: number[],\n    dilations: number[],\n    pads: number[],\n  ) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n    inputDims: readonly number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== inputDims.length - 2) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n        inputDims[dim + 2],\n        strides[dim],\n        dilations[dim],\n        kernelShape[dim],\n        pads,\n        dim,\n        dim + inputDims.length - 2,\n        autoPad,\n      );\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n      isGlobalOperator,\n      inputDims,\n      outputDims,\n      strides,\n      dilations,\n      kernelShape,\n      pads,\n      autoPad,\n    );\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n    inputDims: readonly number[],\n    filterDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    outputDims: number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(\n          PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2],\n            strides[dim],\n            dilations[dim],\n            kernelShape[dim],\n            pads,\n            dim,\n            dim + inputDims.length - 2,\n            autoPad,\n          ),\n        );\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n    inSize: number,\n    stride: number,\n    dilation: number,\n    kernel: number,\n    pads: number[],\n    padHeadIndex: number,\n    padTailIndex: number,\n    autoPad?: string,\n  ): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor((inSize - dkernel) / stride + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] = autoPad === 'SAME_LOWER' ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor((inSize + padNeeded - kernel) / stride + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e38;\nexport const MAX_CLIP = 3.4028234663852886e38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Guid } from 'guid-typescript';\nimport Long from 'long';\n\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { decodeUtf8String, ProtoUtil, ShapeUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType =\n    | Tensor.DataTypeMap['int8']\n    | Tensor.DataTypeMap['uint8']\n    | Tensor.DataTypeMap['int16']\n    | Tensor.DataTypeMap['uint16']\n    | Tensor.DataTypeMap['int32']\n    | Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32'] | Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType | IntegerType | FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n    /**\n     * get the dimensions of the tensor\n     */\n    public readonly dims: readonly number[],\n    /**\n     * get the type of the tensor\n     */\n    public readonly type: Tensor.DataType,\n    private dataProvider?: DataProvider,\n    private asyncDataProvider?: AsyncDataProvider,\n    private cache?: TensorData,\n    /**\n     * get the data ID that used to map to a tensor data\n     */\n    public readonly dataId: Guid = Guid.create(),\n  ) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = dataProvider === undefined && asyncDataProvider === undefined && cache === undefined;\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError(\"Input dims doesn't match data length.\");\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every((i) => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n    } else if (\n      tensorProto.rawData &&\n      typeof tensorProto.rawData.byteLength === 'number' &&\n      tensorProto.rawData.byteLength > 0\n    ) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n        tensorProto.rawData.buffer,\n        tensorProto.rawData.byteOffset,\n        tensorProto.rawData.byteLength,\n      );\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number | Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n    } else if (\n      ortTensor.rawDataArray() &&\n      typeof ortTensor.rawDataLength() === 'number' &&\n      ortTensor.rawDataLength() > 0\n    ) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n        ortTensor.rawDataArray()!.buffer,\n        ortTensor.rawDataArray()!.byteOffset,\n        ortTensor.rawDataLength(),\n      );\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType | ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType | ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n    type === onnx.TensorProto.DataType.UINT32 ||\n    type === ortFbs.TensorDataType.UINT32 ||\n    type === onnx.TensorProto.DataType.UINT64 ||\n    type === ortFbs.TensorDataType.UINT64\n  ) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(\n  view: DataView,\n  type: onnx.TensorProto.DataType | ortFbs.TensorDataType,\n  byteOffset: number,\n): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n        Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false),\n        type,\n      );\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n        Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true),\n        type,\n      );\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1 | 2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1 | 2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1 | 2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1 | 2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1 | 2 | 3 | 4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked, // <-- normal unpacked texture\n  unpackedReversed, // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed, // <-- normal packed texture\n  downloadUint8AsFloat, // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension, // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n  data: number | number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float' | 'int';\n  name: string;\n  arrayLength?: number;\n  data: number | number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D' | VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: { position: number; textureCoord: number };\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number | number[];\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { assert } from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n  checkFn: () => boolean,\n  delayFn = (_counter: number) => 0,\n  maxCounter?: number,\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map((d) => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getGlChannels } from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map((d) => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { getChannels } from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed],\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.packed },\n    shaderSource,\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader => ({\n  ...packProgramMetadata,\n  get: () => createPackProgramInfo(handler, input),\n});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordinates\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { unpackFromChannel } from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) => ({\n  name: 'Reshape (packed)',\n  inputTypes: [TextureType.packed],\n  inputNames: ['A'],\n  cacheHint: `${outputShape3D}`,\n});\n\nconst createPackedReshape3DProgramInfo = (\n  handler: WebGLInferenceHandler,\n  input3D: Tensor,\n  metadata: ProgramMetadata,\n  outputShape3D: readonly number[],\n): ProgramInfo => {\n  const inputShape3D = input3D.dims as [number, number, number];\n  const squeezedOutputShape = outputShape3D as [number, number, number];\n\n  let mainLoop = '';\n  for (let i = 0; i < 4; i++) {\n    let outputCoords = '';\n    switch (i) {\n      case 0:\n        outputCoords = 'outputCoords = rc;';\n        break;\n      case 1:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n        break;\n      case 2:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n        break;\n      case 3:\n        outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n        break;\n      default:\n        throw new Error();\n    }\n\n    mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n  }\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n\n  const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n  return {\n    ...metadata,\n    output: { dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedReshape3DProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  input3D: Tensor,\n  outputShape3D: readonly number[],\n): ProgramInfoLoader => {\n  const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n  return { ...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D) };\n};\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {\n    // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {\n    // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {\n    // 2D +\n    isCheapReshape =\n      dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n      dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n    .map((stride, i) => {\n      const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n      const line2 =\n        i === strides.length - 1\n          ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}`\n          : `index -= ${coords[i]} * ${stride}`;\n      return `${line1}; ${line2};`;\n    })\n    .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { TextureData, TextureType } from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: { dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat },\n    shaderSource,\n    hasMain: true,\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { getChannels, unpackFromChannel } from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = input.dims.length === 0;\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader => ({\n  ...unpackProgramMetadata,\n  get: () => createUnpackProgramInfo(handler, input),\n});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const enum EncoderUsage {\n  Default = 0,\n  UploadOnly,\n  Download4BytesAsFloat32,\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => (result[i] = v));\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => (dest[i * 4] = v));\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA; // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ShapeUtil } from '../../util';\n\nimport { TextureLayoutStrategy, WidthHeightPrefs } from './texture-layout-strategy';\nimport { TextureLayout, TextureType } from './types';\n\nexport const createTextureLayoutFromTextureType = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  textureType: TextureType,\n): TextureLayout => {\n  const channel = textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed ? 1 : 4;\n  const isPacked = textureType === TextureType.packed;\n  const reverseWH = textureType === TextureType.unpackedReversed || textureType === TextureType.packed;\n  const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n  const unpackedShape =\n    textureType === TextureType.packedLastDimension\n      ? shape.map((d, i) => (i === shape.length - 1 ? d * 4 : d))\n      : undefined;\n  return createTextureLayoutFromShape(textureLayoutStrategy, shape, channel, unpackedShape, {\n    isPacked,\n    reverseWH,\n    breakAxis,\n  });\n};\n\nexport const calculateTextureWidthAndHeight = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  textureType: TextureType,\n): [number, number] => {\n  const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n  return [layout.width, layout.height];\n};\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape = (\n  textureLayoutStrategy: TextureLayoutStrategy,\n  shape: readonly number[],\n  channels: 1 | 4 = 1,\n  unpackedShape?: readonly number[],\n  prefs?: WidthHeightPrefs,\n): TextureLayout => {\n  const isPacked = !!(prefs && prefs.isPacked);\n  const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n  const rank = shape.length;\n  let inferredDims = shape.slice(0);\n  if (rank === 0) {\n    inferredDims = [1];\n  }\n  if (channels === 1) {\n    // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n    unpackedShape = shape;\n  } else if (isPacked) {\n    if (channels !== 4) {\n      throw new Error('a packed texture must be 4-channel');\n    }\n    unpackedShape = shape;\n    if (rank > 0) {\n      inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n    }\n    if (rank > 1) {\n      inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n    }\n  } else if (!unpackedShape) {\n    throw new Error('Unpacked shape is needed when using channels > 1');\n  }\n  return {\n    width,\n    height,\n    channels,\n    isPacked,\n    shape: inferredDims,\n    strides: ShapeUtil.computeStrides(inferredDims),\n    unpackedShape,\n    reversedWH: prefs && prefs.reverseWH,\n  };\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceHandler } from '../../backend';\nimport { Logger } from '../../instrument';\nimport { Tensor } from '../../tensor';\nimport { ShapeUtil } from '../../util';\n\nimport { createPackProgramInfoLoader } from './ops/pack';\nimport { createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D } from './ops/reshape-packed';\nimport { encodeAsUint8 } from './ops/uint8-encode';\nimport { createUnpackProgramInfoLoader } from './ops/unpack';\nimport { WebGLSessionHandler } from './session-handler';\nimport { EncoderUsage } from './texture-data-encoder';\nimport {\n  calculateTextureWidthAndHeight,\n  createTextureLayoutFromShape,\n  createTextureLayoutFromTextureType,\n} from './texture-layout';\nimport { Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType } from './types';\n\nconst getProgramInfoUniqueKey = (\n  programInfo: ProgramInfo | ProgramInfoLoader,\n  inputTextureDatas: TextureData[],\n): string => {\n  const inputs = inputTextureDatas\n    .map((texture) => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n    .join('_');\n  let key = programInfo.name;\n  if (programInfo.cacheHint) {\n    key += '[' + programInfo.cacheHint + ']';\n  }\n  key += ':' + inputs;\n  return key;\n};\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo | ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact\n      ? artifact.programInfo\n      : typeof (program as ProgramInfoLoader).get === 'function'\n        ? (program as ProgramInfoLoader).get()\n        : (program as ProgramInfo);\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n      this.session.layoutStrategy,\n      programInfo.output.dims,\n      programInfo.output.textureType,\n    );\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout = createTextureLayoutFromTextureType(\n            this.session.layoutStrategy,\n            adjustedKernelShape,\n            textureType,\n          );\n          let buffer = tensor.numberData;\n          if ((shape[1] * shape[2] * shape[3]) % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil((oldRowSize * group) / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + (f % group) * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, EncoderUsage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout = createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {\n          reverseWH: true,\n        });\n        const unpackedTextureData = this.createTextureData(\n          unpackedTextureLayout,\n          tensor.type,\n          tensor.numberData,\n          tensor,\n          EncoderUsage.UploadOnly,\n        );\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    data: Tensor.NumberType,\n    tensor: Tensor,\n  ): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, EncoderUsage.UploadOnly);\n  }\n\n  private createTextureData(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    data?: Tensor.NumberType,\n    tensor?: Tensor,\n    usage?: EncoderUsage,\n  ): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true,\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n      createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape),\n      [squeezedInputTensor],\n    );\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n    layout: TextureLayout,\n    dataType: Tensor.DataType,\n    texture: WebGLTexture,\n    tensor?: Tensor,\n    tensorId?: Tensor.Id,\n  ) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor:\n        tensor ||\n        new Tensor(\n          layout.unpackedShape,\n          dataType,\n          (_id: Tensor.Id) => this.readTexture(textureData),\n          async (_id: Tensor.Id) => this.readTextureAsync(textureData),\n          undefined,\n          tensorId,\n        ),\n      texture,\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData | undefined {\n    return this.session.isInitializer(tensorId)\n      ? this.session.getTextureData(tensorId, isPacked)\n      : isPacked\n        ? this.packedTextureDataCache.get(tensorId)\n        : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach((td) => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach((td) => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key = Object.getOwnPropertyNames(this)\n        .sort()\n        .map((name) => `${(this as Record<string, unknown>)[name]}`)\n        .join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(\n  attribute: T,\n): T & AttributeWithCacheKey => new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes: [\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n    TextureType.unpacked,\n  ],\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: BatchNormalizationAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...batchNormalizationProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> = (\n  node: Graph.Node,\n): BatchNormalizationAttributes => {\n  const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n  const momentum = node.attributes.getFloat('momentum', 0.9);\n  const spatial = node.attributes.getInt('spatial', 1);\n  return createAttributeWithCacheKey({ epsilon, momentum, spatial });\n};\n\nconst createBatchNormalizationProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: BatchNormalizationAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const rank = inputs[0].dims.length;\n  const [scaleWidth, scaleHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    inputs[1].dims,\n    TextureType.unpacked,\n  );\n  const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n  return {\n    ...batchNormalizationProgramMetadata,\n    output: { dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (\n    X.dims.length < 3 ||\n    scale.dims.length !== 1 ||\n    B.dims.length !== 1 ||\n    mean.dims.length !== 1 ||\n    var_.dims.length !== 1\n  ) {\n    throw new Error('invalid input shape.');\n  }\n  if (\n    scale.dims[0] !== X.dims[1] ||\n    B.dims[0] !== X.dims[1] ||\n    mean.dims[0] !== X.dims[1] ||\n    var_.dims[0] !== X.dims[1]\n  ) {\n    throw new Error('invalid input shape.');\n  }\n  if (\n    (X.type !== 'float32' && X.type !== 'float64') ||\n    (scale.type !== 'float32' && scale.type !== 'float64') ||\n    (B.type !== 'float32' && B.type !== 'float64') ||\n    (mean.type !== 'float32' && mean.type !== 'float64') ||\n    (var_.type !== 'float32' && var_.type !== 'float64')\n  ) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ProgramInfo, TextureLayout } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional,\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n    public glContext: WebGLContext,\n    public programInfo: ProgramInfo,\n    public inputTextureLayouts: TextureLayout[],\n    public outputTextureLayout: TextureLayout,\n  ) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): { [name: string]: GlslLibRoutine };\n  abstract getCustomTypes(): { [name: string]: string };\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(\n    public routineBody: string,\n    public dependencies?: string[],\n  ) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(\n    public name: string,\n    routineBody?: string,\n    dependencies?: GlslLibRoutineNode[],\n  ) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n    graphNodes: GlslLibRoutineNode[],\n    cycleCheck: Set<string>,\n    alreadyTraversed: Set<string>,\n    result: GlslLibRoutineNode[],\n  ) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n    root: GlslLibRoutineNode,\n    cycleCheck: Set<string>,\n    alreadyTraversed: Set<string>,\n    result: GlslLibRoutineNode[],\n  ) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error(\"Cyclic dependency detected. Can't topologically sort routines needed for shader.\");\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { FunctionType, GlslValueFunction } from '../glsl-definitions';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\nconst createBinaryProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  glslFunc: GlslValueFunction,\n  outputTensorType: Tensor.DataType = inputs[0].type,\n  cacheKey?: string,\n): ProgramInfoLoader => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  return {\n    name: glslFunc.name,\n    inputNames: ['A', 'B'],\n    inputTypes: [textureType, textureType],\n    cacheHint: cacheKey,\n    get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType),\n  };\n};\n\nconst createBinaryProgramInfo = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  glslFunc: GlslValueFunction,\n  outputTensorType: Tensor.DataType = inputs[0].type,\n): ProgramInfo => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n  let outputShape = inputs[0].dims;\n\n  const usePackedTexture = handler.session.pack;\n\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform binary op on the given tensors\");\n    }\n    outputShape = calculatedShape;\n    const outputRank = outputShape.length;\n    const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n    const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n    const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n    const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = usePackedTexture\n      ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }`\n      : `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n    return {\n      name: glslFunc.name,\n      inputNames: ['A', 'B'],\n      inputTypes: [textureType, textureType],\n      output: { dims: outputShape, type: outputTensorType, textureType },\n      shaderSource,\n      hasMain: usePackedTexture,\n    };\n  }\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n  return {\n    name: glslFunc.name,\n    inputNames: ['A', 'B'],\n    inputTypes: [textureType, textureType],\n    output: { dims: inputs[0].dims, type: outputTensorType, textureType },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs),\n];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs),\n];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs),\n];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs),\n];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs),\n];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs),\n];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs),\n];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs),\n];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs),\n];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs),\n];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs),\n];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs),\n];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ProtoUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  to: Tensor.DataType,\n): Tensor[] => {\n  validateInputs(inputs);\n  return [handler.cast(inputs[0], to)];\n};\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n  ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { ConcatAttributes } from './concat';\nimport { getChannels, unpackFromChannel } from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({ length: inputCount }, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint,\n});\n\nconst createPackedConcatProgramInfo = (\n  handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  if (axis >= inputShape.length || axis < -1 * inputShape.length) {\n    throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n  }\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n  // ensure all of the non-concatenated axes match each other\n  // calculate the shape of the output tensor while we do that\n  const outputShape = inputShape.slice(0);\n  for (let i = 1; i < inputs.length; i++) {\n    const dataNShape = inputs[i].dims.slice();\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        outputShape[axis] += dataNShape[axisIndex];\n      }\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error('non concat dimensions must match');\n      }\n    }\n  }\n\n  const rank = outputShape.length;\n  const coords = getChannels('coords', rank);\n  const dtype = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n\n  const shapes = inputs.map((i) => i.dims);\n  const channels = getGlChannels(rank);\n  const offsets: number[] = new Array(shapes.length - 1);\n\n  offsets[0] = shapes[0][axis];\n  for (let i = 1; i < offsets.length; i++) {\n    offsets[i] = offsets[i - 1] + shapes[i][axis];\n  }\n\n  const channel = channels[axis];\n  const lastChannels = channels.slice(-2);\n  const allChannels = channels.join();\n\n  let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n  for (let i = 1; i < offsets.length; i++) {\n    const shift = offsets[i - 1];\n    getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n  }\n  const lastIndex = offsets.length;\n  const shift = offsets[offsets.length - 1];\n  getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n\n  const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map((x) => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedConcatProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n  return { ...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { createPackedConcatProgramInfoLoader } from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n    const output = inferenceHandler.run(\n      createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes),\n      inputs,\n    );\n    return [output];\n  } else {\n    const output = inferenceHandler.run(\n      createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes),\n      inputs,\n    );\n    return [output];\n  }\n};\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({ length: inputCount }, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint,\n});\n\nconst createUnpackedConcatProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  if (axis >= inputShape.length || axis < -1 * inputShape.length) {\n    throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n  }\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n  // ensure all of the non-concatenated axes match each other\n  // calculate the shape of the output tensor while we do that\n  const outputShape = inputShape.slice(0);\n  for (let i = 1; i < inputs.length; i++) {\n    const dataNShape = inputs[i].dims.slice();\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        outputShape[axis] += dataNShape[axisIndex];\n      }\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error('non concat dimensions must match');\n      }\n    }\n  }\n\n  const rank = outputShape.length;\n\n  const sizeInConcatAxis = new Array<number>(inputs.length);\n  let previousSum = 0;\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    previousSum += inputs[i].dims[axis];\n    sizeInConcatAxis[i] = previousSum;\n  }\n\n  let getTextureIndexWhereDataResidesMethod = '';\n  // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n  if (inputs.length < 5) {\n    getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n  } else {\n    getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n  }\n\n  const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n  const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n  const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createUnpackedConcatProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConcatAttributes,\n): ProgramInfoLoader => {\n  const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n  return { ...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map(\n    (size, i) => `if(index<${size}) {return ${i};}\n`,\n  );\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n  getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push('\\t' + `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push('\\t' + `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push('\\t' + `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push('\\t' + `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n  createAttributeWithCacheKey({ axis: node.attributes.getInt('axis') });\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { Tensor } from '../../../tensor';\nimport { MAX_CLIP, MIN_CLIP } from '../../../util';\nimport { FunctionType, GlslValueFunction } from '../glsl-definitions';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return { body, name, type: FunctionType.ValueBased };\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo = (\n  handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  input: Tensor,\n  glslFunc: GlslValueFunction,\n): ProgramInfo => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  return {\n    ...metadata,\n    output: { dims: input.dims, type: input.type, textureType },\n    shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n    hasMain: true,\n  };\n};\n\nconst createElementwiseProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  input: Tensor,\n  glslFunc: GlslValueFunction,\n  cacheKey?: string,\n): ProgramInfoLoader => {\n  const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n  const metadata = { name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey };\n  return { ...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc) };\n};\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs),\n];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs),\n];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs),\n];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs),\n];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip = (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(\n      handler,\n      inputs[0],\n      glslClip(attributes.min, attributes.max),\n      attributes.cacheKey,\n    ),\n    inputs,\n  ),\n];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes =>\n  createAttributeWithCacheKey({\n    min: node.attributes.getFloat('min', MIN_CLIP),\n    max: node.attributes.getFloat('max', MAX_CLIP),\n  });\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (\n    inputs.length >= 3 &&\n    (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))\n  ) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = inputs.length >= 3 ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = inputs.length >= 3 ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({ min, max });\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs),\n];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs),\n];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu = (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n    inputs,\n  ),\n];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n  createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 1.0) });\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs),\n];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs),\n];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs),\n];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: LeakyReluAttributes,\n): Tensor[] => [\n  handler.run(\n    createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n    inputs,\n  ),\n];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n  createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 0.01) });\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs),\n];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs),\n];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs),\n];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs),\n];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs),\n];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs),\n];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs),\n];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs),\n];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => [\n  handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs),\n];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Attribute } from '../../../attribute';\nimport { MAX_CLIP, MIN_CLIP } from '../../../util';\nimport { GlslValueFunction } from '../glsl-definitions';\n\nimport { glslClip, glslRelu, glslSigmoid } from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return { activationFunction: '', applyActivation: '' };\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return { activationFunction, applyActivation };\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return { activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}` };\n  }\n  return { activation, activationCacheKey: activation };\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../../instrument';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { calculateOutputShape, ConvAttributes } from './conv';\nimport { getActivationSnippet } from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nconst createUnpackedGroupedConvProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  metadata: ProgramMetadata,\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n  const xShape = inputs[0].dims.slice();\n  const wShape = inputs[1].dims.slice();\n  const outputChannelsPerGroup = wShape[0] / attributes.group;\n  Logger.verbose(\n    'GroupedConv',\n    `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n      attributes.kernelShape\n    }, pads:${attributes.pads}, strides:${attributes.strides}`,\n  );\n  const outputShape = calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n\n  const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createUnpackedGroupedConvProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes),\n  };\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\nimport { unpackFromChannel } from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const xshape = x.dims;\n  const wshape = w.dims;\n  const rowDim = 2;\n  const colDim = 3;\n  const rank = outputShape.length;\n  const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n  const kernelSize = wshape[2] * wshape[3];\n  const unpackChannel = unpackFromChannel();\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  let unrolled = '';\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n    }\n  }\n\n  const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n  return {\n    ...metadata,\n    output: { dims: im2colShape, type: x.type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedIm2ColProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes),\n  };\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createPackedMatmulProgramInfoLoader } from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: InternalActivationAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  if (inferenceHandler.session.pack) {\n    return [inferenceHandler.run(createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n  } else {\n    return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n  }\n};\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> = (\n  node: Graph.Node,\n): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nfunction createMatmulProgramInfo(\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet = hasBias\n    ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}`\n    : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return { ...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes) };\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (\n    (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n    (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')\n  ) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n  coordsDataType: string,\n  allGlChannels: readonly string[],\n  inShape: readonly number[],\n  outShape: readonly number[],\n  isPacked: boolean,\n): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map((d) => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked\n    ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}`\n    : `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { BroadcastUtil, ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\nimport { getCoordsDataType, getGlChannels } from '../utils';\n\nimport { getActivationSnippet, InternalActivationAttributes } from './fuse-utils';\nimport { getBiasForMatmul } from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias\n    ? [TextureType.packed, TextureType.packed, TextureType.packed]\n    : [TextureType.packed, TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedMatmulProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const sharedDim = aShape[aShape.length - 1];\n  const sharedDimIndex = Math.ceil(sharedDim / 2);\n  const aRank = aShape.length;\n  const bRank = bShape.length;\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const outRank = outputShape.length;\n  const allGlChannels = getGlChannels();\n  const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes);\n\n  const getBiasForMatmulSnippet = hasBias\n    ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}`\n    : '';\n\n  const getBcastedSamplerForMatmulSnippet = isBroadcast\n    ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}`\n    : '';\n\n  const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n  const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n  const getOutputCoordsSnippet = isBroadcast\n    ? ''\n    : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n  const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nexport const createPackedMatmulProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  activationAttributes: InternalActivationAttributes,\n): ProgramInfoLoader => {\n  const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {\n    ...metadata,\n    get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes),\n  };\n};\n\nfunction getBcastSamplerForMatmul(\n  coordsDataType: string,\n  allGlChannels: readonly string[],\n  inputs: Tensor[],\n  outShape: readonly number[],\n): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((_s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((_s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map((d) => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map((d) => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` + 'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' + `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { calculateOutputShape, ConvAttributes } from './conv';\nimport { createPackedIm2ColProgramInfoLoader } from './im2col-pack';\nimport { createPackedMatmulProgramInfoLoader } from './matmul-pack';\n\nexport const conv2DPackedPointwise = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n  const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n  const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n  const matmulOutput = inferenceHandler.run(\n    createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes),\n    matmulInputs,\n  );\n  return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n};\n\nexport const conv2DPacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n  // run im2col\n  const im2colOutput = inferenceHandler.run(\n    createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n    [inputs[0]],\n  );\n\n  // reshape kernel\n  const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n  // run matmul\n  const matmulInputs = inputs.length === 3 ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n  const matmulOutput = inferenceHandler.run(\n    createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes),\n    matmulInputs,\n  );\n\n  // reshape output\n  const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n  return outputReshaped;\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfo => {\n  const xshape = x.dims;\n  const wshape = w.dims;\n\n  const rank = outputShape.length;\n  const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n  const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n  return {\n    ...metadata,\n    output: { dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension },\n    shaderSource,\n  };\n};\n\nexport const createIm2ColProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  x: Tensor,\n  w: Tensor,\n  outputShape: readonly number[],\n  attributes: ConvAttributes,\n): ProgramInfoLoader => {\n  const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes),\n  };\n};\n\nexport const calculateIm2ColDims = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  outputShape: readonly number[],\n  channels = 4,\n): number[] => [\n  outputShape[0],\n  outputShape[2],\n  outputShape[3],\n  Math.ceil((inputShape[1] * kernelShape[2] * kernelShape[3]) / channels),\n];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { getActivationSnippet, InternalActivationAttributes } from './fuse-utils';\nimport { calculateIm2ColDims } from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey,\n});\n\nconst createDotProductProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: readonly Tensor[],\n  outputShape: number[],\n  attributes: InternalActivationAttributes,\n): ProgramInfo => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n  const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n  const [kWidth, kHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    adjustedKernelShape,\n    TextureType.packedLastDimension,\n  );\n\n  const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n  const [im2colWidth, im2colHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    im2colShape,\n    TextureType.packedLastDimension,\n  );\n  const rank = outputShape.length;\n\n  const initValue = inputs.length < 3 ? '0.0' : '_B(b)';\n  const sharedDim = Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n    im2colStrides[2]\n  };\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const createDotProductProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  outputShape: number[],\n  attributes: InternalActivationAttributes,\n): ProgramInfoLoader => {\n  const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n  return {\n    ...metadata,\n    get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes),\n  };\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { InferenceHandler } from '../../../backend';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { PoolConvUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { createUnpackedGroupedConvProgramInfoLoader } from './conv-grouped';\nimport { conv2DPacked } from './conv-pack';\nimport { createDotProductProgramInfoLoader } from './dot-product';\nimport { InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createIm2ColProgramInfoLoader } from './im2col';\nimport { createMatmulProgramInfoLoader } from './matmul';\n\nexport const calculateOutputShape = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  adjustPads: readonly number[],\n  strides: readonly number[],\n): number[] => {\n  const batchSize = inputShape[0];\n  const inputSpatialShape = inputShape.slice(2);\n  const spatialRank = inputSpatialShape.length;\n  const outChannels = kernelShape[0];\n  const kernelSpatialShape = kernelShape.slice(2);\n  const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n  const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n  const outputSpatialShape = inputSpatialShapeWithPad.map((v, i) =>\n    Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]),\n  );\n  const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n  return outputShape;\n};\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> = (\n  inferenceHandler: InferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes); // currently will fail if not conv2D\n  return conv2d(inferenceHandler, inputs, attributes);\n};\n\nconst conv2d: OperatorImplementation<ConvAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvAttributes,\n): Tensor[] => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n  const packMode = inferenceHandler.session.pack;\n  const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n  if (adjustedAttributes.group > 1) {\n    const result = inferenceHandler.run(\n      createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes),\n      inputs,\n    );\n    return [result];\n  } else if (isPointwise && packMode) {\n    return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n  } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n    return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n  } else {\n    return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n  }\n};\n\nconst conv2DUnpackedPointwise = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n  const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n  const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n  const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n  return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n};\n\nconst conv2DUnpacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvAttributes,\n): Tensor => {\n  const xshape = inputs[0].dims;\n  const kshape = inputs[1].dims;\n  const outputShape = calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n  const xIm2Col = inferenceHandler.run(\n    createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n    [inputs[0]],\n  );\n\n  const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n  const output = inferenceHandler.run(\n    createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes),\n    dotProductInputs,\n  );\n  return output;\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n    inputs[0].dims,\n    attributes.strides,\n    attributes.dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, cacheKey: attributes.cacheKey });\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    dilations,\n    group,\n    kernelShape,\n    pads,\n    strides,\n    ...activationAttributes,\n  });\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { InferenceHandler } from '../../../backend';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nimport { ConvAttributes } from './conv';\nimport { getActivationSnippet, parseInternalActivationAttributes } from './fuse-utils';\n\nconst computeTotalPad = (\n  inDim: number,\n  stride: number,\n  adj: number,\n  kernel: number,\n  dilation: number,\n  outSize: number,\n) => (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  autoPad: string,\n  pads: number[],\n  strides: readonly number[],\n  outputPadding: readonly number[],\n  outputShape: number[],\n) => {\n  const spatialRank = inputShape.length - 2;\n  const updateShape = outputShape.length === 0;\n  for (let i = 0; i < spatialRank; ++i) {\n    const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n    const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n    distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n    if (updateShape) {\n      outputShape.push(\n        strides[i] * (inputShape[i + 2] - 1) +\n          outputPadding[i] +\n          (kernelShape[i] - 1) * dilations[i] +\n          1 -\n          pads[i] -\n          pads[i + spatialRank],\n      );\n    }\n  }\n};\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> = (\n  inferenceHandler: InferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes); // currently will fail if not convTranspose2D\n  return convTranspose2d(inferenceHandler, inputs, attributes);\n};\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor[] => {\n  const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n  return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n};\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias\n    ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n    : [TextureType.unpacked, TextureType.unpacked],\n  cacheHint,\n});\n\nconst createUnpackedConvTransposeProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  metadata: ProgramMetadata,\n  attributes: ConvTransposeAttributes,\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n  const xShape = inputs[0].dims;\n  const wShape = inputs[1].dims;\n  const outputChannelsPerGroup = wShape[1];\n  const inputChannelsPerGroup = wShape[0] / attributes.group;\n  const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const { activationFunction, applyActivation } = getActivationSnippet(attributes);\n\n  const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    hasMain: true,\n  };\n};\n\nconst createUnpackedConvTransposeProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvTransposeAttributes,\n): ProgramInfoLoader => {\n  const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n  return {\n    ...metadata,\n    get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes),\n  };\n};\n\nconst convTranspose2DUnpacked = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: readonly Tensor[],\n  attributes: ConvTransposeAttributes,\n): Tensor => {\n  const result = inferenceHandler.run(\n    createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes),\n    inputs,\n  );\n  return result;\n};\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n    inputShape,\n    kernelShape,\n    attributes.dilations,\n    attributes.autoPad,\n    pads,\n    attributes.strides,\n    attributes.outputPadding,\n    outputShape,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, outputShape, cacheKey: attributes.cacheKey });\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> = (\n  node: Graph.Node,\n): ConvTransposeAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const outputPadding = attributes.getInts('output_padding', [0, 0]);\n  const outputShape = attributes.getInts('output_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    ...activationAttributes,\n  });\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: TransposeAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...transposeProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> = (\n  node: Graph.Node,\n): TransposeAttributes => createAttributeWithCacheKey({ perm: node.attributes.getInts('perm', []) });\n\nconst createTransposeProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  perm: number[],\n): ProgramInfo => {\n  const inputShape = input.dims;\n  perm = getAdjustedPerm(inputShape, perm);\n  const unpackedOutputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n  const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n  return {\n    ...transposeProgramMetadata,\n    output: { dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...inputShape.keys()].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nimport { transpose, TransposeAttributes } from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR' | 'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: DepthToSpaceAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const blocksize = attributes.blocksize;\n  const blocksizeSqr = blocksize * blocksize;\n  const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n  const firstReshapeShape =\n    attributes.mode === 'DCR'\n      ? [\n          inputs[0].dims[0],\n          blocksize,\n          blocksize,\n          inputs[0].dims[1] / blocksizeSqr,\n          inputs[0].dims[2],\n          inputs[0].dims[3],\n        ]\n      : [\n          inputs[0].dims[0],\n          inputs[0].dims[1] / blocksizeSqr,\n          blocksize,\n          blocksize,\n          inputs[0].dims[2],\n          inputs[0].dims[3],\n        ];\n\n  // const transpose = new WebGLTranspose();\n  // const attributes = new Attribute(undefined);\n  // attributes.set('perm', 'ints', transposePerm);\n  // transpose.initialize(attributes);\n\n  // First reshape\n  const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n  // transpose\n  const transposeAttributes: TransposeAttributes = { perm: transposePerm, cacheKey: `${transposePerm}` };\n  const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n  // Second reshape\n  const secondReshapeShape = [\n    inputs[0].dims[0],\n    inputs[0].dims[1] / blocksizeSqr,\n    inputs[0].dims[2] * blocksize,\n    inputs[0].dims[3] * blocksize,\n  ];\n  const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n  return [result];\n};\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> = (\n  node: Graph.Node,\n): DepthToSpaceAttributes => {\n  // processing node attributes\n  const blocksize = node.attributes.getInt('blocksize');\n  if (blocksize < 1) {\n    throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n  }\n  const mode = node.attributes.getString('mode', 'DCR');\n  if (mode !== 'DCR' && mode !== 'CRD') {\n    throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n  }\n  return { mode, blocksize };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axis: number,\n): Tensor[] => {\n  validateInputs(inputs, axis);\n\n  const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n  return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n};\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n  node.attributes.getInt('axis', 1); // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceHandler } from './backend';\nimport { Graph } from './graph';\nimport { Tensor } from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node | unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] = [\n  'float32',\n  'float64',\n  'int32',\n  'int16',\n  'int8',\n  'uint16',\n  'uint32',\n  'uint8',\n];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GatherAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes.axis);\n  const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n  return [output];\n};\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n  createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 0) });\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  axis: number,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  const indexDataShape = inputs[1].dims.slice();\n  const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n  axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n  const indexCopyOps: string[] = [];\n  for (let i = 0; i < outputShape.length; i++) {\n    // outputShape is divided into three parts: A, B, C\n    // |0        axis|  axis + indexDataShape.length |          end|\n    // |     A       |             B                 |      C      |\n    //\n    // inputIdx: [A, inputs[1][B], C]\n    if (i < axis) {\n      // A\n      outputShape[i] = inputShape[i];\n      indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n    } else {\n      if (i < axis + indexDataShape.length) {\n        // B\n        outputShape[i] = indexDataShape[i - axis];\n        indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n      } else {\n        // C\n        outputShape[i] = inputShape[i - indexDataShape.length + 1]; // skip 1 for axis\n        indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n      }\n    }\n  }\n\n  const orank = outputShape.length || 1;\n  const irank = inputShape.length;\n  const iDrank = indexDataShape.length || 1;\n  const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createGatherProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GatherAttributes,\n): ProgramInfoLoader => {\n  const metadata = { ...gatherProgramMetadata, cacheHint: attributes.cacheKey };\n  return { ...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis) };\n};\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { GemmUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean; // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: GemmAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n  return [output];\n};\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({ transA, transB, alpha, beta, isOptionalC });\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n  parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n  parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes:\n      inputs.length === 3\n        ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n        : [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey,\n  };\n\n  return { ...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes) };\n};\n\nconst createGemmProgramInfo = (\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  attributes: GemmAttributes,\n): ProgramInfo => {\n  const aShape = inputs[0].dims.slice();\n  const bShape = inputs[1].dims.slice();\n  const [M, N] = GemmUtil.getShapeOfGemmResult(\n    aShape,\n    attributes.transA,\n    bShape,\n    attributes.transB,\n    inputs.length === 3 ? inputs[2].dims : undefined,\n  );\n  const outputShape = [M, N];\n  if (!outputShape) {\n    throw new Error(\"Can't use gemm on the given tensors\");\n  }\n  let sharedDim = aShape[aShape.length - 1];\n  let line = '';\n  if (attributes.transA) {\n    sharedDim = aShape[0];\n  }\n  if (attributes.transA && attributes.transB) {\n    line = 'value += _A_T(a) * _B_T(b);';\n  } else if (attributes.transA && !attributes.transB) {\n    line = 'value += _A_T(a) * _B(b);';\n  } else if (!attributes.transA && attributes.transB) {\n    line = 'value += _A(a) * _B_T(b);';\n  } else if (!attributes.transA && !attributes.transB) {\n    line = 'value += _A(a) * _B(b);';\n  }\n  const rank = outputShape.length;\n  const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n  const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n  const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n  const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    variables: [\n      { name: 'alpha', type: 'float', data: attributes.alpha },\n      { name: 'beta', type: 'float', data: attributes.beta },\n    ],\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if (\n    (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n    (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n    (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')\n  ) {\n    throw new Error('Invalid input type.');\n  }\n\n  if (inputs[0].type !== inputs[1].type || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n  return [output];\n};\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> = (\n  node: Graph.Node,\n): ImageScalerAttributes => {\n  const scale = node.attributes.getFloat('scale');\n  const bias = node.attributes.getFloats('bias');\n  return createAttributeWithCacheKey({ scale, bias });\n};\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): ProgramInfo => {\n  const outputShape = inputs[0].dims.slice();\n  const rank = outputShape.length;\n  const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n  const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    variables: [\n      { name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias },\n      { name: 'scale', type: 'float', data: attributes.scale },\n    ],\n    shaderSource,\n  };\n};\n\nconst createImageScalerProgramInfoLoader = (\n  handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ImageScalerAttributes,\n): ProgramInfoLoader => {\n  const metadata = { ...imageScalerProgramMetadata, cacheHint: attributes.cacheKey };\n  return { ...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes) };\n};\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push('\\t' + `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push('\\t' + `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push('\\t' + `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push('\\t' + '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType } from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  epsilon: number,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n  const output = inferenceHandler.run(\n    createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n    [inputs[0], meanAndVariance, inputs[1], inputs[2]],\n  );\n  return [output];\n};\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n  node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension },\n    shaderSource,\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input),\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  metadata: ProgramMetadata,\n  input: Tensor,\n  epsilon: number,\n  meanAndVarianceShape: readonly number[],\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    meanAndVarianceShape,\n    TextureType.packedLastDimension,\n  );\n  const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n  const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n  return {\n    ...metadata,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    variables: [{ name: 'epsilon', type: 'float', data: epsilon }],\n    shaderSource,\n  };\n};\n\nconst createComputeOutputProgramInfoLoader = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  epsilon: number,\n  meanAndVarianceShape: readonly number[],\n): ProgramInfoLoader => {\n  const metadata = { ...computeOutputProgramMetadata, cacheHint: `${epsilon}` };\n  return {\n    ...metadata,\n    get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape),\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if (\n    (X.type !== 'float32' && X.type !== 'float64') ||\n    (scale.type !== 'float32' && scale.type !== 'float64') ||\n    (B.type !== 'float32' && B.type !== 'float64')\n  ) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramInfoLoader, TextureType } from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: LrnAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  // if (inferenceHandler.session.pack) {\n  //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n  //   inputs)];\n  // } else {\n  return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n  //}\n};\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({ alpha, beta, bias, size });\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: { dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return { ...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes) };\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl, Glsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: PadAttributes,\n): Tensor[] => {\n  validateInputsV2(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...padProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({ mode, value, pads });\n};\n\nexport const padV11: OperatorImplementation<string> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  mode: string,\n): Tensor[] => {\n  validateInputsV11(inputs);\n  const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n  return padV2(inferenceHandler, [inputs[0]], attrubutes);\n};\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n  node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  mode: string,\n): PadAttributes => {\n  if (\n    !inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n    (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))\n  ) {\n    throw new Error('dynamic pad attributes are not allowed');\n  }\n\n  const pads = Array.from(inputs[1].integerData);\n  const value = inputs.length >= 3 ? inputs[2].floatData[0] : 0.0;\n\n  return createAttributeWithCacheKey({ mode, pads, value });\n};\n\nconst createPadProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: PadAttributes,\n): ProgramInfo => {\n  const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n  const rank = outputShape.length;\n  const padFunction = getPadFunction(inferenceHandler, input, attributes);\n  const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n  return {\n    name: 'Pad',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n  value: number,\n): string => {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n\nconst getPadReflect = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n): string => {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n\nconst getPadEdge = (\n  glsl: Glsl,\n  shape: readonly number[],\n  strides: readonly number[],\n  width: number,\n  height: number,\n  pads: number[],\n): string => {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n  }\n  return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { PoolConvUtil, ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'AveragePool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: attributes.cacheKey,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> = (\n  node: Graph.Node,\n): AveragePoolAttributes => {\n  const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n  const ceilMode = node.attributes.getInt('ceil_mode', 0);\n  const countIncludePad = node.attributes.getInt('count_include_pad', 0) === 0 ? false : true;\n  const kernelShape = node.attributes.getInts('kernel_shape');\n  const strides = node.attributes.getInts('strides', []);\n  const pads = node.attributes.getInts('pads', []);\n\n  // TODO: support attribute 'ceil_mode'\n  if (ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({ autoPad, ceilMode, countIncludePad, kernelShape, strides, pads });\n};\n\nconst createAveragePoolProgramInfo = (\n  inputs: Tensor[],\n  metadata: ProgramMetadata,\n  isGlobalOperator: boolean,\n  attributes: AveragePoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    inputs,\n    attributes,\n    isGlobalOperator,\n  );\n  const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n  const op1 = 'value += _X(x);';\n  let op2 = '';\n  if (adjustedAttributes.countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n  const shaderSource = `\n        ${poolingCode}\n      `;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'GlobalAveragePool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: `${attributes.countIncludePad}`,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> = (\n  node: Graph.Node,\n): AveragePoolAttributes => {\n  const countIncludePad = node.attributes.getInt('count_include_pad', 0) === 0 ? false : true;\n  return createAttributeWithCacheKey({\n    autoPad: '',\n    ceilMode: 0,\n    countIncludePad,\n    kernelShape: [],\n    strides: [],\n    pads: [],\n  });\n};\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: MaxPoolAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const metadata = {\n    name: 'MaxPool',\n    inputNames: ['X'],\n    inputTypes: [TextureType.unpacked],\n    cacheHint: attributes.cacheKey,\n  };\n  const output = inferenceHandler.run(\n    { ...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes) },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> = (\n  node: Graph.Node,\n): MaxPoolAttributes => {\n  const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n  const ceilMode = node.attributes.getInt('ceil_mode', 0);\n  const kernelShape = node.attributes.getInts('kernel_shape');\n  const strides = node.attributes.getInts('strides', []);\n  const pads = node.attributes.getInts('pads', []);\n  const storageOrder = node.attributes.getInt('storage_order', 0);\n  const dilations = node.attributes.getInts('dilations', []);\n\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({\n    autoPad,\n    ceilMode,\n    countIncludePad: false,\n    kernelShape,\n    strides,\n    pads,\n    storageOrder,\n    dilations,\n  });\n};\n\nconst createMaxPoolProgramInfo = (\n  inputs: Tensor[],\n  metadata: ProgramMetadata,\n  isGlobalOperator: boolean,\n  attributes: MaxPoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    inputs,\n    attributes,\n    isGlobalOperator,\n  );\n  const op1 = `\n      value = max(_X(x), value);\n    `;\n  const op2 = '';\n  const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    ...metadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = (\n  inputs: Tensor[],\n  attributes: AveragePoolAttributes | MaxPoolAttributes,\n  isGlobalOperator: boolean,\n): [AveragePoolAttributes | MaxPoolAttributes, number[]] => {\n  const inputShape = inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n  const outputShape = PoolConvUtil.computePoolOutputShape(\n    isGlobalOperator,\n    inputShape,\n    strides,\n    dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, { kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey });\n  } else {\n    Object.assign(newAttributes, { kernelShape, strides, pads, cacheKey: attributes.cacheKey });\n  }\n  return [newAttributes, outputShape];\n};\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: '',\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...globalMaxPoolMetadata,\n      get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode = (\n  inputDims: readonly number[],\n  attributes: AveragePoolAttributes,\n  op1: string,\n  op2: string,\n  start: string,\n): string => {\n  const rank = inputDims.length;\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n    } else {\n      codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n      } else {\n        codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n      }\n      codeHEnd = `\n          }\n        `;\n    }\n\n    const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(attributes.pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(attributes.strides, 'strides');\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n    } else {\n      padCode = `\n          }\n          ${op1}\n        `;\n    }\n    const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n    return poolingCode;\n  }\n};\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n  name: string,\n  reduceOp: ReduceOp,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const reduceProgramMetadata = {\n    name,\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n    {\n      ...reduceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({ axes, keepDims });\n};\n\nconst createReduceProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n  _name: string,\n  reduceOp: ReduceOp,\n  reduceProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const outputShape: number[] = [];\n  const iRank = inputs[0].dims.length || 1;\n\n  const idxCopy = []; // copy output indexes to input indexes\n\n  const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n  const ops = reduceOp(inputs, axes);\n  let reduceOps = ops[1];\n\n  for (let k = 0; k < inputs[0].dims.length; k++) {\n    // if this axis is reduced\n    if (axes.indexOf(k) >= 0 || axes.length === 0) {\n      if (attributes.keepDims) {\n        outputShape.push(1);\n      } // else { remove the axis from outputShape; }\n\n      // loop over the d-th axis\n      reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n    } else {\n      idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n      outputShape.push(inputs[0].dims[k]);\n    }\n  }\n\n  const oRank = outputShape.length || 1;\n\n  const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n  return {\n    ...reduceProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n};\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`]; // ensure real number with `.`\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n};\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`); // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n};\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`); // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  };\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n};\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n};\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n};\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: ReduceAttributes,\n): Tensor[] => {\n  const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(\n    {\n      ...upsampleProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = opset >= 10;\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n    opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if (\n    [\n      'asymmetric',\n      'pytorch_half_pixel',\n      'tf_half_pixel_for_nn',\n      'align_corners',\n      'tf_crop_and_resize',\n      'half_pixel',\n    ].indexOf(coordinateTransformMode) === -1\n  ) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = coordinateTransformMode === 'tf_crop_and_resize';\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n    mode === 'nearest' && opset >= 11 ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n    opset < 11 ? true : mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor';\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx,\n  });\n};\n\nconst createUpsampleProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [inputWidth, inputHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    inputs[0].dims,\n    TextureType.unpacked,\n  );\n\n  const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n  const [outputWidth, outputHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    outputShape,\n    TextureType.unpacked,\n  );\n  const dim = outputShape.length;\n\n  const outputPitches = new Array<number>(dim);\n  const inputPitches = new Array<number>(dim);\n  let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n  for (let d = dim - 1; d >= 0; d--) {\n    outputPitches[d] = d === dim - 1 ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n    inputPitches[d] = d === dim - 1 ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n    precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n  }\n  const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n  const shaderSource =\n    attributes.mode === 'nearest'\n      ? // nearest\n        `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }`\n      : dim === 4\n        ? // bilinear 4D\n          `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }`\n        : // bilinear 2D\n          `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n  return {\n    ...upsampleProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n    variables: [\n      {\n        name: 'scales',\n        type: 'int',\n        arrayLength: attributes.scales.length,\n        data: attributes.scales.map((x) => Math.ceil(x)),\n      },\n    ],\n  };\n};\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (\n    !inputs ||\n    (attribute.opset < 9 && inputs.length !== 1) ||\n    (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n    (attribute.opset >= 11 && inputs.length < 2)\n  ) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\nimport { getCoordsDataType } from '../utils';\n\nimport { unpackFromChannel } from './packing-utils';\nimport { parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs } from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): Tensor[] => {\n  validateInputs(inputs, attributes);\n  const output = inferenceHandler.run(\n    {\n      ...resizeProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> = (\n  node: Graph.Node,\n): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: UpsampleAttributes,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n  const isSame = scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n  if (isSame) {\n    return {\n      ...resizeProgramMetadata,\n      output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n      hasMain: true,\n      shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`,\n    };\n  }\n\n  const dim = outputShape.length;\n  if (dim < 2) {\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\n  }\n\n  const outputHeight = outputShape[dim - 2];\n  const outputWidth = outputShape[dim - 1];\n\n  const inputShape = inputs[0].dims;\n  if (dim !== inputShape.length) {\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n  }\n  const inputHeight = inputShape[dim - 2];\n  const inputWidth = inputShape[dim - 1];\n\n  const scalesHeight = scales[dim - 2];\n  const scalesWidth = scales[dim - 1];\n\n  let getSourceFracIndex = '';\n\n  if (attributes.mode !== 'linear') {\n    // TODO: support other modes\n    throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n  }\n  switch (attributes.coordinateTransformMode) {\n    case 'asymmetric':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n      break;\n    case 'half_pixel':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n      break;\n    case 'pytorch_half_pixel':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n      break;\n    case 'align_corners':\n      getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n      break;\n    default:\n      // TODO:supporting other coordinateTransformModes\n      throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n  }\n\n  const coordsDataType = getCoordsDataType(dim);\n  const unpackChannel = unpackFromChannel();\n  const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n              scalesWidth\n            }));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n  return {\n    ...resizeProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.packed },\n    hasMain: true,\n    shaderSource,\n  };\n};\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[] | undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || xDims.map((dim, i) => Math.floor(dim * scales[i]));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize = (\n  yDims: readonly number[],\n  xDims: readonly number[],\n  mode: string,\n  isResize: boolean,\n): number[] => {\n  const length = xDims.length;\n  const scales = new Array<number>(length);\n\n  for (let i = 0, end = length; i < end; i++) {\n    if (xDims[i] === 0) {\n      if (yDims[i] !== 0) {\n        throw new Error('Input dim is zero but required output dim is non-zero.');\n      }\n      scales[i] = 1;\n    } else {\n      scales[i] = yDims[i] / xDims[i];\n    }\n  }\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const shape = (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { NUMBER_TYPES, OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SliceAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n    {\n      ...sliceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    inputs,\n  );\n  return [output];\n};\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({ starts, ends, axes });\n};\n\nconst createSliceProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: SliceAttributes,\n): ProgramInfo => {\n  const axes = attributes.axes.length === 0 ? input.dims.slice(0).map((_val, i) => i) : attributes.axes;\n  const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n  const starts = attributes.starts.map((start, i) => {\n    if (start > input.dims[normalizedAxes[i]] - 1) {\n      return input.dims[normalizedAxes[i]];\n    }\n    return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n  });\n  const ends = attributes.ends.map((end, i) => {\n    if (end > input.dims[normalizedAxes[i]] - 1) {\n      return input.dims[normalizedAxes[i]];\n    }\n    return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n  });\n\n  const outputShape = input.dims.slice();\n\n  const sliceOps: string[] = [];\n  for (let i = 0; i < normalizedAxes.length; i++) {\n    outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n    if (starts[i] > 0) {\n      sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n    } // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n  return {\n    ...sliceProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n    {\n      ...sliceProgramMetadata,\n      cacheHint: attributes.cacheKey,\n      get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes),\n    },\n    [inputs[0]],\n  );\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n): SliceAttributes => {\n  if (\n    !inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n    !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n    (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n    (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))\n  ) {\n    throw new Error('dynamic slice attributes are not allowed');\n  }\n\n  if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n    throw new Error('currently non-1 steps is not supported for Slice');\n  }\n\n  const starts = Array.from(inputs[1].integerData);\n  const ends = Array.from(inputs[2].integerData);\n  const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n  const cacheKey = `${axes};${starts};${ends}`;\n  return { starts, ends, axes, cacheKey };\n};\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nimport { transpose, TransposeAttributes } from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const inputShape = inputs[0].dims.slice();\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n  const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n  const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n  return output;\n};\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> = (\n  node: Graph.Node,\n): SoftmaxAttributes => createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 1) });\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> = (\n  node: Graph.Node,\n): SoftmaxAttributes => createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', -1) });\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const inputShape = inputs[0].dims.slice();\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const rank = inputShape.length;\n\n  const isTransposeRequired = axis !== rank - 1 ? true : false;\n  const transposedInputShape: number[] = [];\n  let perm: number[] = [];\n  let transposedInputs: Tensor[] = [];\n  let transposeAttribute: TransposeAttributes;\n\n  if (isTransposeRequired) {\n    perm = Array.from({ length: rank }).map((_, i) => i);\n\n    // swap the innermost dim with the dim corresponding to axis\n    perm[axis] = rank - 1;\n    perm[rank - 1] = axis;\n\n    perm.map((p) => transposedInputShape.push(inputShape[p]));\n\n    transposeAttribute = createAttributeWithCacheKey({ perm });\n    transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n  }\n\n  const logicalRowCount = isTransposeRequired\n    ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1)\n    : ShapeUtil.sizeToDimension(inputShape, rank - 1);\n  const featureCount = isTransposeRequired\n    ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1)\n    : ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n  const output = computeSoftmax(\n    inferenceHandler,\n    isTransposeRequired ? transposedInputs : inputs,\n    attributes,\n    logicalRowCount,\n    featureCount,\n  );\n\n  if (isTransposeRequired) {\n    const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n    return reversedOutput;\n  } else {\n    return output;\n  }\n};\n\nconst computeSoftmax = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SoftmaxAttributes,\n  logicalRowCount: number,\n  featureCount: number,\n): Tensor[] => {\n  const computeMaxProgramInfo = createComputeMaxProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    [logicalRowCount],\n  );\n  const max = inferenceHandler.run(\n    { ...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo },\n    inputs,\n  );\n\n  const computeScaleProgramInfo = createComputScaleProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    computeMaxProgramInfo.output.dims,\n    [logicalRowCount],\n  );\n  const scale = inferenceHandler.run(\n    { ...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo },\n    [inputs[0], max],\n  );\n\n  const softMaxProgramInfo = createSoftMaxProgramInfo(\n    inferenceHandler,\n    inputs[0],\n    logicalRowCount,\n    featureCount,\n    computeMaxProgramInfo.output.dims,\n    computeScaleProgramInfo.output.dims,\n  );\n  const output = inferenceHandler.run(\n    { ...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo },\n    [inputs[0], max, scale],\n  );\n  return [output];\n};\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  outputShape: number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = outputShape.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (outputShape.length !== 1) {\n    throw new Error('Dimensionality of the output should be 1');\n  }\n\n  if (outputShape[0] !== logicalRowCount) {\n    throw new Error('Shape of the output should be equal to logical row count');\n  }\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n  return {\n    ...softmaxComputeMaxProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  maxElementPerLogicalRow: readonly number[],\n  outputShape: number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = outputShape.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (outputShape.length !== 1) {\n    throw new Error('Dimensionality of the output should be 1');\n  }\n\n  if (outputShape[0] !== logicalRowCount) {\n    throw new Error('Shape of the output should be equal to logical row count');\n  }\n\n  if (maxElementPerLogicalRow.length !== 1) {\n    throw new Error('Dimensionality of the intermediate results should be 1');\n  }\n\n  if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n    throw new Error('Shape of the intermediate results should be equal to logical row count');\n  }\n\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n  return {\n    ...softmaxComputeScaleProgramMetadata,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst createSoftMaxProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  logicalRowCount: number,\n  featureCount: number,\n  maxElementPerLogicalRow: readonly number[],\n  normalizationPerLogicalRow: readonly number[],\n): ProgramInfo => {\n  const [textureWidth, textureHeight] = inferenceHandler.calculateTextureWidthAndHeight(\n    input.dims,\n    TextureType.unpacked,\n  );\n  const rank = input.dims.length;\n\n  if (logicalRowCount < 1 || featureCount < 1) {\n    throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n  }\n\n  if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n    throw new Error('Dimensionality of the intermediate results should be 1');\n  }\n\n  if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n    throw new Error('Shape of the intermediate results should be equal to logical row count');\n  }\n\n  const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n  return {\n    ...softmaxProgramMetadata,\n    output: { dims: input.dims, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../../../attribute-with-cache-key';\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil, SplitUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, TextureType } from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  attributes: SplitAttributes,\n): Tensor[] => {\n  validateInputs(inputs);\n\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n  const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n  const output: Tensor[] = [];\n  for (let i = 0; i < count; ++i) {\n    output.push(\n      inferenceHandler.run(\n        {\n          ...splitProgramMetadata,\n          cacheHint: `${attributes.cacheKey};${i}`,\n          get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i),\n        },\n        inputs,\n      ),\n    );\n  }\n\n  return output;\n};\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({ axis, split, numOutputs });\n};\n\nconst getProgramCount = (\n  _inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axis: number,\n  attributes: SplitAttributes,\n): number => {\n  const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n  return offsets.length;\n};\n\nconst createSplitProgramInfo = (\n  _inferenceHandler: WebGLInferenceHandler,\n  input: Tensor,\n  attributes: SplitAttributes,\n  axis: number,\n  index: number,\n): ProgramInfo => {\n  const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n  const offset = offsets[index];\n  const outputShape = shapes[index];\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n  return {\n    ...splitProgramMetadata,\n    cacheHint: `${attributes.cacheKey}:${index}`,\n    output: { dims: outputShape, type: input.type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (\n    inputs[0].type !== 'int8' &&\n    inputs[0].type !== 'uint8' &&\n    inputs[0].type !== 'int16' &&\n    inputs[0].type !== 'uint16' &&\n    inputs[0].type !== 'int32' &&\n    inputs[0].type !== 'uint32' &&\n    inputs[0].type !== 'float32' &&\n    inputs[0].type !== 'float64' &&\n    inputs[0].type !== 'bool'\n  ) {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axes: number[],\n): Tensor[] => {\n  validateInputs(inputs);\n  const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n  const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n  return [output];\n};\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n  node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from '../../../tensor';\nimport { getGlsl } from '../glsl-source';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((_v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked),\n  };\n\n  const output = inferenceHandler.run(\n    { ...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata) },\n    inputs,\n  );\n  return [output];\n};\n\nconst createSumProgramInfo = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  sumProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const outputShape = inputs[0].dims.slice();\n  const sumLine = inputs.map((_v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n  const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n  return {\n    ...sumProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    hasMain: true,\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NUMBER_TYPES } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { WebGLInferenceHandler } from '../inference-handler';\nimport { ProgramInfo, ProgramMetadata, TextureType } from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n    { ...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata) },\n    inputs,\n  );\n  return [output];\n};\n\nconst createTileProgramInfo = (\n  _handler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  tileProgramMetadata: ProgramMetadata,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims.slice();\n  const outputShape = new Array(inputShape.length);\n\n  const tileOps: string[] = [];\n  for (let i = 0; i < inputShape.length; i++) {\n    outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n    tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n  return {\n    ...tileProgramMetadata,\n    output: { dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked },\n    shaderSource,\n  };\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Graph } from '../../../graph';\nimport { OperatorImplementation, OperatorInitialization } from '../../../operators';\nimport { Tensor } from '../../../tensor';\nimport { ShapeUtil } from '../../../util';\nimport { WebGLInferenceHandler } from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> = (\n  inferenceHandler: WebGLInferenceHandler,\n  inputs: Tensor[],\n  axes: number[],\n): Tensor[] => {\n  validateInputs(inputs);\n  const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n  const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n  return [output];\n};\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n  node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { OpSet } from '../../opset';\n\nimport { batchNormalization, parseBatchNormalizationAttributes } from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport { cast, parseCastAttributes } from './ops/cast';\nimport { concat, parseConcatAttributes } from './ops/concat';\nimport { conv, parseConvAttributes } from './ops/conv';\nimport { convTranspose, parseConvTransposeAttributes } from './ops/conv-transpose';\nimport { depthToSpace, parseDepthToSpaceAttributes } from './ops/depth-to-space';\nimport { flatten, parseFlattenAttributes } from './ops/flatten';\nimport { gather, parseGatherAttributes } from './ops/gather';\nimport { gemm, parseGemmAttributesV11, parseGemmAttributesV7 } from './ops/gemm';\nimport { imageScaler, parseImageScalerAttributes } from './ops/image-scaler';\nimport { instanceNormalization, parseInstanceNormalizationAttributes } from './ops/instance-normalization';\nimport { lrn, parseLrnAttributes } from './ops/lrn';\nimport { matMul, parseMatMulAttributes } from './ops/matmul';\nimport { padV11, padV2, parsePadAttributesV11, parsePadAttributesV2 } from './ops/pad';\nimport {\n  averagePool,\n  globalAveragePool,\n  globalMaxPool,\n  maxPool,\n  parseAveragePoolAttributes,\n  parseGlobalAveragePoolAttributes,\n  parseMaxPoolAttributes,\n} from './ops/pool';\nimport {\n  parseReduceAttributes,\n  reduceLogSum,\n  reduceLogSumSquare,\n  reduceMax,\n  reduceMean,\n  reduceMin,\n  reduceProd,\n  reduceSum,\n} from './ops/reduce';\nimport { reshape } from './ops/reshape';\nimport { parseResizeAttributesV10, parseResizeAttributesV11, resize } from './ops/resize-packed';\nimport { shape } from './ops/shape';\nimport { parseSliceAttributes, slice, sliceV10 } from './ops/slice';\nimport { parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13 } from './ops/softmax';\nimport { parseSplitAttributes, split } from './ops/split';\nimport { parseSqueezeAttributes, squeeze, squeezeV13 } from './ops/squeeze';\nimport { sum } from './ops/sum';\nimport { tile } from './ops/tile';\nimport { parseTransposeAttributes, transpose } from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport { parseUnsqueezeAttributes, unsqueeze, unsqueezeV13 } from './ops/unsqueeze';\nimport { parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample } from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10], // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: { [name: string]: { params: Array<{ type: string; name: string } | null>; body: string } } = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n      .split(',')\n      .map((s) => {\n        const tokens = s.trim().split(' ');\n        if (tokens && tokens.length === 2) {\n          return { type: tokens[0], name: tokens[1] };\n        }\n        return null;\n      })\n      .filter((v) => v !== null);\n    inlineDefs[match[2]] = { params, body: match[4] };\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = type ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\nimport { assert } from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n          'TextureLayout',\n          `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`,\n        );\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n          'TextureLayout',\n          `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`,\n        );\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map((_d, i) =>\n        i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i],\n      );\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n      logShape[3] <= maxTextureSize\n    ) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n      logShape.length === 4 &&\n      logShape[0] <= maxTextureSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTextureSize\n    ) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map((d) => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): { newShape: number[]; keptDims: number[] } {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return { newShape, keptDims };\n}\n\nexport function parseAxisParam(axis: number | number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((_s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n    axis.every((ax) => ax >= -rank && ax < rank),\n    () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`,\n  );\n\n  // Check for only integers\n  assert(axis.every(isInt), () => 'All values in axis param must be integers but ' + `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map((a) => (a < 0 ? rank + a : a));\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ArrayUtil, BroadcastUtil, ShapeUtil } from '../../util';\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\nimport { getGlsl } from './glsl-source';\nimport { squeezeShape } from './texture-layout-strategy';\nimport { TextureLayout } from './types';\nimport {\n  generateShaderFuncNameFromInputSamplerName,\n  generateShaderFuncNameFromInputSamplerNameAtOutCoords,\n  getCoordsDataType,\n  getGlChannels,\n  getSqueezedParams,\n  squeezeInputShape,\n} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet(),\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): { [name: string]: GlslLibRoutine } {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `),\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): { [name: string]: GlslLibRoutine } {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `),\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): { [name: string]: GlslLibRoutine } {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] = this.getOutputPacked3DCoords(\n          outShape as [number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): { [name: string]: GlslLibRoutine } {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputUnpacked2DCoords(\n          outShape as [number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 3:\n        result[funcName] = this.getOutputUnpacked3DCoords(\n          outShape as [number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n          outShape as [number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n          outShape as [number, number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape as [number, number],\n        );\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches =\n        `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number],\n  ): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet = strides\n      .map((stride, i) => {\n        const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n        const line2 =\n          i === strides.length - 1\n            ? `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}`\n            : `index -= ${coordsToCompute[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] = this.getPackedSamplerAtOutputCoords(\n            outCoordFuncName,\n            inputLayout,\n            outputLayout,\n            samplerName,\n          );\n        } else {\n          result[outCoordFuncName] = this.getUnpackedSamplerAtOutputCoords(\n            outCoordFuncName,\n            inputLayout,\n            outputLayout,\n            samplerName,\n          );\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n    funcName: string,\n    inputLayout: TextureLayout,\n    outputLayout: TextureLayout,\n    name: string,\n  ): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' + 'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n    funcName: string,\n    inputLayout: TextureLayout,\n    outputLayout: TextureLayout,\n    name: string,\n  ): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const { newShape, keptDims } = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(source, [\n      'coordinates.uvFromFlat',\n      'coordinates.sampleTexture',\n      'coordinates.coordsToOffset',\n    ]);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordinates (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): { [name: string]: GlslLibRoutine } {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return { toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset']) };\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(this.getValueFromSingle(name, rank, layout.width, layout.height, false), [\n        `shapeUtils.indicesToOffset${funcName}`,\n        'coordinates.offsetToCoords',\n        'fragcolor.getColorAsFloat',\n      ]);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(this.getValueFromSingle(name, rank, layout.width, layout.height, true), [\n        `shapeUtils.indicesToOffset${funcName}`,\n        'coordinates.offsetToCoords',\n        'fragcolor.getColorAsFloat',\n      ]);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(\n    varName: string,\n    rank: number,\n    width: number,\n    height: number,\n    transpose: boolean,\n  ): string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(\n    varName: string,\n    rank: number,\n    width: number,\n    height: number,\n    transpose: boolean,\n  ): string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.encodeFloat32(), ...this.decodeFloat32() };\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  protected encodeFloat32(): { [name: string]: GlslLibRoutine } {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `),\n    };\n  }\n  protected decodeFloat32(): { [name: string]: GlslLibRoutine } {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `),\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): { [name: string]: GlslLibRoutine } {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `),\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): { [name: string]: GlslLibRoutine } {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `),\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\nimport { getGlsl } from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.setFragColor(), ...this.getColorAsFloat() };\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  protected setFragColor(): { [name: string]: GlslLibRoutine } {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n        `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n        ['encoding.encode'],\n      ),\n    };\n  }\n  protected getColorAsFloat(): { [name: string]: GlslLibRoutine } {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n        `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n        ['encoding.decode'],\n      ),\n    };\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices(),\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): { [name: string]: GlslLibRoutine } {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): { [name: string]: GlslLibRoutine } {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] = new GlslLibRoutine(\n        ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()),\n      );\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] = new GlslLibRoutine(\n        ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()),\n      );\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): { [name: string]: GlslLibRoutine } {\n    const result: { [name: string]: GlslLibRoutine } = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutine } from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): { [name: string]: string } {\n    return {};\n  }\n  getFunctions(): { [name: string]: GlslLibRoutine } {\n    return { ...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem() };\n  }\n  protected binaryVecFunctions(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: { [name: string]: string } = { add: '+=', sub: '-=', mul: '*=', div: '/=' };\n    const result: { [name: string]: GlslLibRoutine } = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return { copyVec: new GlslLibRoutine(body) };\n  }\n\n  protected setVecItem(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return { setVecItem: new GlslLibRoutine(body) };\n  }\n  protected getVecItem(): { [name: string]: GlslLibRoutine } {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return { getVecItem: new GlslLibRoutine(body) };\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { CoordsGlslLib } from './glsl-coordinate-lib';\nimport { GlslContext, GlslLib } from './glsl-definitions';\nimport { EncodingGlslLib } from './glsl-encoding-lib';\nimport { FragColorGlslLib } from './glsl-fragcolor-lib';\nimport { ShapeUtilsGlslLib } from './glsl-shape-utils-lib';\nimport { VecGlslLib } from './glsl-vec-lib';\n\nexport const glslRegistry: { [name: string]: new (context: GlslContext) => GlslLib } = {\n  encoding: EncodingGlslLib,\n  fragcolor: FragColorGlslLib,\n  vec: VecGlslLib,\n  shapeUtils: ShapeUtilsGlslLib,\n  coordinates: CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines } from './glsl-definitions';\nimport { replaceInlines } from './glsl-function-inliner';\nimport { glslRegistry } from './glsl-registered-libs';\nimport { getDefaultFragShaderMain, getFragShaderPreamble } from './glsl-source';\nimport { ProgramInfo, TextureLayout, VariableInfo } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: { [name: string]: GlslLib } = {};\n  readonly glslLibRoutineDependencyGraph: { [routineName: string]: GlslLibRoutineNode } = {};\n\n  constructor(\n    glContext: WebGLContext,\n    programInfo: ProgramInfo,\n    inputTextureLayouts: TextureLayout[],\n    outputTextureLayout: TextureLayout,\n  ) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach((classAndRoutine) => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n          `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`,\n        );\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { Logger, Profiler } from '../../instrument';\n\nimport { GlslPreprocessor } from './glsl-preprocessor';\nimport { getVertexShaderSource } from './glsl-source';\nimport { TextureLayoutStrategy } from './texture-layout-strategy';\nimport { Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo } from './types';\nimport { WebGLContext } from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>; // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n    public profiler: Readonly<Profiler>,\n    public glContext: WebGLContext,\n    public textureLayoutStrategy: TextureLayoutStrategy,\n  ) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact | undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event(\n      'op',\n      `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`,\n      () => {\n        const gl = this.glContext.gl;\n        const program = buildArtifact.program;\n        gl.useProgram(program);\n        try {\n          this.bindOutput(output);\n          if (!this.attributesBound) {\n            this.bindAttributes(buildArtifact.attribLocations);\n          }\n          this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n        } catch (err) {\n          Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n          throw err;\n        }\n        this.profiler.event('backend', 'GlContext.draw()', () => {\n          this.glContext.draw();\n        });\n      },\n      this.glContext,\n    );\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach((a) => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n          program,\n          preprocessor.context.programInfo.inputNames,\n          preprocessor.context.programInfo.variables,\n        ),\n        attribLocations: this.getAttribLocations(program),\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose(\n        'ProrgramManager',\n        `FragShader:\n${fragShaderScript}\n`,\n      );\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n      'ProrgramManager',\n      `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`,\n    );\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(\n    uniformLocations: Artifact.UniformLocations,\n    variables: ProgramVariable[],\n    textures: TextureData[],\n  ): void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const { name, type, location, arrayLength } of uniformLocations) {\n      const value = variables.find((v) => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord'),\n    };\n  }\n  getUniformLocations(\n    program: WebGLProgram,\n    samplers?: string[],\n    variables?: VariableInfo[],\n  ): Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({\n          name: sampler,\n          type: 'sampler2D',\n          location: this.getUniformLocation(program, sampler),\n        });\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({ ...variable, location: this.getUniformLocation(program, variable.name) });\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger, Profiler } from '../../instrument';\nimport { Tensor } from '../../tensor';\n\nimport { Encoder, EncoderUsage } from './texture-data-encoder';\nimport { TextureLayoutStrategy } from './texture-layout-strategy';\nimport { TextureData, TextureLayout } from './types';\nimport { WebGLContext } from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n    public glContext: WebGLContext,\n    public layoutStrategy: TextureLayoutStrategy,\n    public profiler: Readonly<Profiler>,\n    private config: TextureManagerConfig,\n  ) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n    dataType: Tensor.DataType,\n    layout: TextureLayout,\n    data?: Tensor.NumberType,\n    usage?: EncoderUsage,\n  ) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === EncoderUsage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string | undefined;\n    let inUseTextures: WebGLTexture[] | undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === EncoderUsage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n        td.texture,\n        td.width,\n        td.height,\n        dataSize,\n        this.toEncoderType(dataType),\n        channels!,\n      );\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>((resolve) => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n        td.texture,\n        td.width,\n        td.height,\n        dataSize,\n        this.toEncoderType(dataType),\n        channels!,\n      );\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach((resolve) => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string | undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(_dataType: Tensor.DataType, data: Tensor.NumberType | undefined): Encoder.DataArrayType | undefined {\n    if (!data) {\n      return undefined;\n    }\n    return data instanceof Float32Array ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SessionHandler } from '../../backend';\nimport { Graph } from '../../graph';\nimport { Logger } from '../../instrument';\nimport { Operator } from '../../operators';\nimport { OpSet, resolveOperator } from '../../opset';\nimport { Session } from '../../session';\nimport { Tensor } from '../../tensor';\nimport { WebGLBackend } from '../backend-webgl';\n\nimport { WebGLInferenceHandler } from './inference-handler';\nimport { WEBGL_OP_RESOLVE_RULES } from './op-resolve-rules';\nimport { ProgramManager } from './program-manager';\nimport { PreferLogicalStrategy, TextureLayoutStrategy } from './texture-layout-strategy';\nimport { TextureManager } from './texture-manager';\nimport { TextureData } from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(\n    public readonly backend: WebGLBackend,\n    public readonly context: Session.Context,\n  ) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(backend.glContext, this.layoutStrategy, this.context.profiler, {\n      reuseTextures: backend.textureCacheMode === 'full',\n    });\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph\n      .getValues()\n      .filter((v) => v.from === -1 && v.tensor)\n      .map((v) => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData | undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach((td) => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach((td) => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return { impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node };\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport { DataEncoder, Encoder, EncoderUsage } from './texture-data-encoder';\nimport { repeatedTry } from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync | null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean;\n  resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1 | 2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float | null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float | null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown | null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: { TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum } | null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1 | 2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0, // Level of detail.\n      encoder.internalFormat,\n      width,\n      height,\n      0, // Always 0 in OpenGL ES.\n      encoder.format,\n      encoder.textureType,\n      buffer,\n    );\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n    texture: WebGLTexture,\n    width: number,\n    height: number,\n    encoder: DataEncoder,\n    data: Encoder.DataArrayType,\n  ): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0, // level\n      0, // xoffset\n      0, // yoffset\n      width,\n      height,\n      encoder.format,\n      encoder.textureType,\n      buffer,\n    );\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n    texture: WebGLTexture,\n    width: number,\n    height: number,\n    dataSize: number,\n    dataType: Encoder.DataType,\n    channels: number,\n  ): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${n - gl.TEXTURE0}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(vertexShader: WebGLShader, fragShader: WebGLShader): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case gl.NO_ERROR:\n          return;\n        case gl.INVALID_ENUM:\n          label = 'INVALID_ENUM';\n          break;\n        case gl.INVALID_VALUE:\n          label = 'INVALID_VALUE';\n          break;\n        case gl.INVALID_OPERATION:\n          label = 'INVALID_OPERATION';\n          break;\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case gl.OUT_OF_MEMORY:\n          label = 'OUT_OF_MEMORY';\n          break;\n        case gl.CONTEXT_LOST_WEBGL:\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: EncoderUsage = EncoderUsage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === EncoderUsage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n            this.gl,\n            channels,\n            this.textureHalfFloatExtension!.HALF_FLOAT_OES,\n          );\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0, // upper left\n      -1.0,\n      -1.0,\n      0.0,\n      0.0,\n      0.0, // lower left\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      1.0, // upper right\n      1.0,\n      -1.0,\n      0.0,\n      1.0,\n      0.0, // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as { RGBA32F: number }).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture | null | undefined;\n    let frameBuffer: WebGLFramebuffer | null | undefined;\n    let vertexShader: WebGLShader | null | undefined;\n    let fragmentShader: WebGLShader | null | undefined;\n    let program: WebGLProgram | null | undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as { RGBA32F: number }).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false,\n      disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return { query, isFencePassed };\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>((resolve) => {\n      void this.addItemToPoll(\n        () => fenceContext.isFencePassed(),\n        () => resolve(),\n      );\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map((x) => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const { resolveFn } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({ isDoneFn, resolveFn });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Logger } from '../../instrument';\n\nimport { WebGLContext } from './webgl-context';\n\nconst cache: { [contextId: string]: WebGLContext } = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl' | 'webgl2'): WebGLContext {\n  let context: WebGLContext | undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl' | 'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false,\n  };\n  let gl: WebGLRenderingContext | null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || (canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n          'GlContextFactory',\n          `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`,\n        );\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: { new (width: number, height: number): HTMLCanvasElement };\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { Backend, SessionHandler } from '../backend';\nimport { Logger } from '../instrument';\nimport { Session } from '../session';\n\nimport { WebGLSessionHandler } from './webgl/session-handler';\nimport { WebGLContext } from './webgl/webgl-context';\nimport { createWebGLContext } from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl' | 'webgl2' | undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl' | 'webgl2' | undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number | undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number | undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly' | 'full' | undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly' | 'full' | undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean | undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean | undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean | undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean | undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      if (!env.webgl.context) {\n        Object.defineProperty(env.webgl, 'context', { value: this.glContext.gl });\n      }\n\n      Logger.verbose(\n        'WebGLBackend',\n        `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n          this.matmulMaxBatchSize\n        }; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`,\n      );\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebGLBackend } from './backends/backend-webgl';\nimport { Graph } from './graph';\nimport { Operator } from './operators';\nimport { OpSet } from './opset';\nimport { Session } from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean | Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: { [name: string]: Backend } = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string | readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend | undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n    'initialize' in o &&\n    typeof o.initialize === 'function' && // initialize()\n    'createSessionHandler' in o &&\n    typeof o.createSessionHandler === 'function' && // createSessionHandler()\n    'dispose' in o &&\n    typeof o.dispose === 'function' // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SessionHandler } from './backend';\nimport { Graph } from './graph';\nimport { Logger, Profiler } from './instrument';\nimport { Operator } from './operators';\nimport { Tensor } from './tensor';\n\nclass KernelOp {\n  constructor(\n    public op: Operator,\n    public node: Graph.Node,\n  ) {}\n}\n\nexport class ExecutionPlan {\n  constructor(\n    private graph: Graph,\n    ops: Operator[],\n    private profiler: Readonly<Profiler>,\n  ) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n            !this._values[input] && // not an initialized input\n            this.graph.getInputIndices().indexOf(input) === -1 // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map((i) => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(\n          `number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length\n          } expected: ${graphInputs.length}`,\n        );\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map((i) => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n          'ExecPlan',\n          `Running op:${thisOp.node.name} (${inputTensors\n            .map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`)\n            .join(', ')})`,\n        );\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () =>\n          thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context),\n        );\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((_output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor | undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\nimport { decodeUtf8String, LongUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[] | ortFbs.Attribute[] | null | undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n    key: string,\n    type: Attribute.DataType,\n    defaultValue?: V,\n  ): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto | ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto | ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = value as Array<number | Long | flatbuffers.Long>;\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto\n        ? Tensor.fromProto(value as onnx.ITensorProto)\n        : Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map((value) => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map((value) => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto | ortFbs.Attribute) {\n    return attr instanceof onnx.AttributeProto\n      ? this.getValueNoCheckFromOnnxFormat(attr)\n      : this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Attribute } from './attribute';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { Tensor } from './tensor';\nimport { LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto | ortFbs.Graph, initializer?: Graph.Initializer) =>\n    new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number; // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto | ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto | ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto | ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: { dims: ProtoUtil.tensorDimsFromProto(i.dims!) },\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!),\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0; ; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (\n            input === '' &&\n            (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n            nodeProto.opType === 'Resize'\n          ) {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = { shape: { dims }, tensorType: type };\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = { shape: { dims }, tensorType: type };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0; ; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach((i) => {\n      const data = this._allData[i];\n      data._to.forEach((j) => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error(\"from property of the Value object doesn't match index of Node being processed\");\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach((ind) => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach((node) => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specified node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error(\"The Value object doesn't have the current Node in it's 'to' property \");\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error(\"The Node object doesn't have the output Value in it's 'inputs' property \");\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error(\"Dropout nodes's second output should not be referenced by other nodes\");\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set('activation_params', 'floats', [\n                  child.attributes.getFloat('min'),\n                  child.attributes.getFloat('max'),\n                ]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n              child.inputs.length >= 3 &&\n              this._allData[child.inputs[1]].tensor !== undefined &&\n              this._allData[child.inputs[2]].tensor !== undefined\n            ) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0],\n                this._allData[child.inputs[2]].tensor!.floatData[0],\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', child.opType);\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { flatbuffers } from 'flatbuffers';\n\nimport { Graph } from './graph';\nimport { OpSet } from './opset';\nimport { onnxruntime } from './ort-schema/flatbuffers/ort-generated';\nimport { onnx } from './ort-schema/protobuf/onnx';\nimport { LongUtil } from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    let onnxError: Error | undefined;\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n        onnxError = e;\n      }\n    }\n\n    try {\n      this.loadFromOrtFormat(buf, graphInitializer);\n    } catch (e) {\n      if (isOrtFormat !== undefined) {\n        throw e;\n      }\n      // Tried both formats and failed (when isOrtFormat === undefined)\n      throw new Error(`Failed to load model as ONNX format: ${onnxError}\\nas ORT format: ${e}`);\n    }\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets = modelProto.opsetImport.map((i) => ({\n      domain: i.domain as string,\n      version: LongUtil.longToNumber(i.version!),\n    }));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({ domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!) });\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackend, SessionHandlerType } from './backend';\nimport { ExecutionPlan } from './execution-plan';\nimport { Graph } from './graph';\nimport { Profiler } from './instrument';\nimport { Model } from './model';\nimport { Operator } from './operators';\nimport { Tensor } from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = { profiler: this.profiler, graphInputTypes: [], graphInputDims: [] };\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string | ArrayBuffer | Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const { readFile } = require('node:fs/promises');\n          const buf = await readFile(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer = this.sessionHandler.transformGraph\n        ? (this.sessionHandler as Graph.Initializer)\n        : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor> | Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor> | Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (\n      !this.context.graphInputTypes ||\n      this.context.graphInputTypes.length === 0 ||\n      !this.context.graphInputDims ||\n      this.context.graphInputDims.length === 0\n    ) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n    graphInputDims: Array<readonly number[]>,\n    givenInputs: Tensor[],\n    noneDimSupported: boolean,\n  ) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(\n          `input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${actualDims.join(\n            ',',\n          )}]`,\n        );\n      }\n    }\n  }\n\n  private compareTensorDims(\n    expectedDims: readonly number[],\n    actualDims: readonly number[],\n    noneDimSupported: boolean,\n  ): boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession, InferenceSessionHandler, SessionHandler, Tensor } from 'onnxruntime-common';\n\nimport { Session } from './session';\nimport { Tensor as OnnxjsTensor } from './tensor';\n\nexport class OnnxjsSessionHandler implements InferenceSessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n    feeds: SessionHandler.FeedsType,\n    _fetches: SessionHandler.FetchesType,\n    _options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n          name,\n          new OnnxjsTensor(\n            feed.dims,\n            feed.type as OnnxjsTensor.DataType,\n            undefined,\n            undefined,\n            feed.data as OnnxjsTensor.NumberType,\n          ),\n        );\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport { Backend, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { Session } from './onnxjs/session';\nimport { OnnxjsSessionHandler } from './onnxjs/session-handler-inference';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/// <reference lib=\"webworker\" />\n\n//\n// * type hack for \"HTMLImageElement\"\n//\n// in typescript, the type of \"HTMLImageElement\" is defined in lib.dom.d.ts, which is conflict with lib.webworker.d.ts.\n// when we use webworker, the lib.webworker.d.ts will be used, which does not have HTMLImageElement defined.\n//\n// we will get the following errors complaining that HTMLImageElement is not defined:\n//\n// ====================================================================================================================\n//\n// ../common/dist/cjs/tensor-factory.d.ts:187:29 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 187     fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n// Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n//                                 ~~~~~~~~~~~~~~~~\n//\n// node_modules/@webgpu/types/dist/index.d.ts:83:7 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 83     | HTMLImageElement\n//          ~~~~~~~~~~~~~~~~\n//\n// ====================================================================================================================\n//\n// `HTMLImageElement` is only used in type declaration and not in real code. So we define it as `unknown` here to\n// bypass the type check.\n\n//\n// * type hack for \"document\"\n//\n// in typescript, the type of \"document\" is defined in lib.dom.d.ts, so it's not available in webworker.\n//\n// we will get the following errors complaining that document is not defined:\n//\n// ====================================================================================================================\n//\n// lib/wasm/wasm-utils-import.ts:7:33 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                   ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:61 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                               ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:88 - error TS2552: Cannot find name 'HTMLScriptElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                                                          ~~~~~~~~~~~~~~~~~\n// ====================================================================================================================\n//\n// `document` is used to get the current script URL, which is not available in webworker. This file is served as a\n// \"dual\" file for entries of both webworker and the esm module.\n//\ndeclare global {\n  type HTMLImageElement = unknown;\n  type HTMLScriptElement = { src?: string };\n  const document: undefined | { currentScript?: HTMLScriptElement };\n}\n\n/**\n * @summary\n *\n * This file is served as a \"dual\" file for both entries of the following:\n * - The proxy worker itself.\n *   - When used as a worker, it listens to the messages from the main thread and performs the corresponding operations.\n *   - Should be imported directly using `new Worker()` in the main thread.\n *\n * - The ESM module that creates the proxy worker (as a worker launcher).\n *   - When used as a worker launcher, it creates the proxy worker and returns it.\n *   - Should be imported using `import()` in the main thread, with the query parameter `import=1`.\n *\n * This file will be always compiling into ESM format.\n */\n\nimport type { OrtWasmMessage, SerializableTensorMetadata } from '../proxy-messages.js';\nimport {\n  createSession,\n  copyFromExternalBuffer,\n  endProfiling,\n  extractTransferableBuffers,\n  initEp,\n  initRuntime,\n  releaseSession,\n  run,\n} from '../wasm-core-impl.js';\nimport { initializeWebAssembly } from '../wasm-factory.js';\nimport { scriptSrc } from '../wasm-utils-import.js';\n\nconst WORKER_NAME = 'ort-wasm-proxy-worker';\nconst isProxyWorker = globalThis.self?.name === WORKER_NAME;\n\nif (isProxyWorker) {\n  // Worker thread\n  self.onmessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case 'init-wasm':\n          initializeWebAssembly(message!.wasm).then(\n            () => {\n              initRuntime(message!).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                },\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        case 'init-ep': {\n          const { epName, env } = message!;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'copy-from': {\n          const { buffer } = message!;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData } as OrtWasmMessage);\n          break;\n        }\n        case 'create': {\n          const { model, options } = message!;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata } as OrtWasmMessage);\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'release':\n          releaseSession(message!);\n          postMessage({ type });\n          break;\n        case 'run': {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message!;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== 'cpu')) {\n                postMessage({ type, err: 'Proxy does not support non-cpu tensor location.' });\n              } else {\n                postMessage(\n                  { type, out: outputs } as OrtWasmMessage,\n                  extractTransferableBuffers([...inputs, ...outputs] as SerializableTensorMetadata[]),\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'end-profiling':\n          endProfiling(message!);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err } as OrtWasmMessage);\n    }\n  };\n}\n\nexport default isProxyWorker\n  ? null\n  : (urlOverride?: string) =>\n      new Worker(urlOverride ?? scriptSrc!, { type: BUILD_DEFS.IS_ESM ? 'module' : 'classic', name: WORKER_NAME });\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { isNode } from './wasm-utils-env';\n\n/**\n * The classic script source URL. This is not always available in non ESModule environments.\n *\n * In Node.js, this is undefined.\n */\nexport const scriptSrc =\n  // if Nodejs, return undefined\n  isNode\n    ? undefined\n    : // if It's ESM, use import.meta.url\n      (BUILD_DEFS.ESM_IMPORT_META_URL ??\n      // use `document.currentScript.src` if available\n      (typeof document !== 'undefined'\n        ? (document.currentScript as HTMLScriptElement)?.src\n        : // use `self.location.href` if available\n          typeof self !== 'undefined'\n          ? self.location?.href\n          : undefined));\n\n/**\n * The origin of the current location.\n *\n * In Node.js, this is undefined.\n */\nconst origin = isNode || typeof location === 'undefined' ? undefined : location.origin;\n\n/**\n * Check if the given filename with prefix is from the same origin.\n */\nconst isSameOrigin = (filename: string, prefixOverride?: string) => {\n  try {\n    const baseUrl = prefixOverride ?? scriptSrc;\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.origin === origin;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Normalize the inputs to an absolute URL with the given prefix override. If failed, return undefined.\n */\nconst normalizeUrl = (filename: string, prefixOverride?: string) => {\n  const baseUrl = prefixOverride ?? scriptSrc;\n  try {\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.href;\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * Create a fallback URL if an absolute URL cannot be created by the normalizeUrl function.\n */\nconst fallbackUrl = (filename: string, prefixOverride?: string) => `${prefixOverride ?? './'}${filename}`;\n\n/**\n * This helper function is used to preload a module from a URL.\n *\n * If the origin of the worker URL is different from the current origin, the worker cannot be loaded directly.\n * See discussions in https://github.com/webpack-contrib/worker-loader/issues/154\n *\n * In this case, we will fetch the worker URL and create a new Blob URL with the same origin as a workaround.\n *\n * @param absoluteUrl - The absolute URL to preload.\n *\n * @returns - A promise that resolves to a new Blob URL\n */\nconst preload = async (absoluteUrl: string): Promise<string> => {\n  const response = await fetch(absoluteUrl, { credentials: 'same-origin' });\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n\n/**\n * This helper function is used to dynamically import a module from a URL.\n *\n * The build script has special handling for this function to ensure that the URL is not bundled into the final output.\n *\n * @param url - The URL to import.\n *\n * @returns - A promise that resolves to the default export of the module.\n */\nconst dynamicImportDefault = async <T>(url: string): Promise<T> =>\n  (await import(/* webpackIgnore: true */ url)).default;\n\n/**\n * The proxy worker factory imported from the proxy worker module.\n *\n * This is only available when the WebAssembly proxy is not disabled.\n */\nconst createProxyWorker: ((urlOverride?: string) => Worker) | undefined =\n  // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n  BUILD_DEFS.DISABLE_WASM_PROXY ? undefined : require('./proxy-worker/main').default;\n\n/**\n * Import the proxy worker.\n *\n * This function will perform the following steps:\n * 1. If a preload is needed, it will preload the module and return the object URL.\n * 2. Use the proxy worker factory to create the proxy worker.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The proxy worker.\n */\nexport const importProxyWorker = async (): Promise<[undefined | string, Worker]> => {\n  if (!scriptSrc) {\n    throw new Error('Failed to load proxy worker: cannot determine the script source URL.');\n  }\n\n  // If the script source is from the same origin, we can use the embedded proxy module directly.\n  if (isSameOrigin(scriptSrc)) {\n    return [undefined, createProxyWorker!()];\n  }\n\n  // Otherwise, need to preload\n  const url = await preload(scriptSrc);\n  return [url, createProxyWorker!(url)];\n};\n\n/**\n * The embedded WebAssembly module.\n *\n * This is only available in ESM and when embedding is not disabled.\n */\nconst embeddedWasmModule: EmscriptenModuleFactory<OrtWasmModule> | undefined =\n  BUILD_DEFS.IS_ESM && BUILD_DEFS.DISABLE_DYNAMIC_IMPORT\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n      require(\n        !BUILD_DEFS.DISABLE_JSEP\n          ? '../../dist/ort-wasm-simd-threaded.jsep.mjs'\n          : '../../dist/ort-wasm-simd-threaded.mjs',\n      ).default\n    : undefined;\n\n/**\n * Import the WebAssembly module.\n *\n * This function will perform the following steps:\n * 1. If BUILD_DEFS.DISABLE_DYNAMIC_IMPORT is true, use the embedded module.\n * 2. If a preload is needed, it will preload the module and return the object URL.\n * 3. Otherwise, it will perform a dynamic import of the module.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The default export of the module, which is a factory function to create the WebAssembly module.\n */\nexport const importWasmModule = async (\n  urlOverride: string | undefined,\n  prefixOverride: string | undefined,\n  isMultiThreaded: boolean,\n): Promise<[undefined | string, EmscriptenModuleFactory<OrtWasmModule>]> => {\n  if (BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    return [undefined, embeddedWasmModule!];\n  } else {\n    const wasmModuleFilename = !BUILD_DEFS.DISABLE_JSEP\n      ? 'ort-wasm-simd-threaded.jsep.mjs'\n      : 'ort-wasm-simd-threaded.mjs';\n    const wasmModuleUrl = urlOverride ?? normalizeUrl(wasmModuleFilename, prefixOverride);\n    // need to preload if all of the following conditions are met:\n    // 1. not in Node.js.\n    //    - Node.js does not have the same origin policy for creating workers.\n    // 2. multi-threaded is enabled.\n    //    - If multi-threaded is disabled, no worker will be created. So we don't need to preload the module.\n    // 3. the absolute URL is available.\n    //    - If the absolute URL is failed to be created, the origin cannot be determined. In this case, we will not\n    //    preload the module.\n    // 4. the worker URL is not from the same origin.\n    //    - If the worker URL is from the same origin, we can create the worker directly.\n    const needPreload = !isNode && isMultiThreaded && wasmModuleUrl && !isSameOrigin(wasmModuleUrl, prefixOverride);\n    const url = needPreload\n      ? await preload(wasmModuleUrl)\n      : (wasmModuleUrl ?? fallbackUrl(wasmModuleFilename, prefixOverride));\n    return [needPreload ? url : undefined, await dynamicImportDefault<EmscriptenModuleFactory<OrtWasmModule>>(url)];\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { importWasmModule } from './wasm-utils-import';\n\nlet wasm: OrtWasmModule | undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16,\n        2, 0, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async (flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  let numThreads = flags.numThreads!;\n\n  // ensure SIMD is supported\n  if (!isSimdSupported()) {\n    throw new Error('WebAssembly SIMD is not supported in the current environment.');\n  }\n\n  // check if multi-threading is supported\n  const multiThreadSupported = isMultiThreadSupported();\n  if (numThreads > 1 && !multiThreadSupported) {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'env.wasm.numThreads is set to ' +\n          numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.',\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      'WebAssembly multi-threading is not supported in the current environment. ' + 'Falling back to single-threading.',\n    );\n\n    // set flags.numThreads to 1 so that OrtInit() will not create a global thread pool.\n    flags.numThreads = numThreads = 1;\n  }\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const mjsPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.mjs;\n  const mjsPathOverride = (mjsPathOverrideFlag as URL)?.href ?? mjsPathOverrideFlag;\n  const wasmPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.wasm;\n  const wasmPathOverride = (wasmPathOverrideFlag as URL)?.href ?? wasmPathOverrideFlag;\n  const wasmBinaryOverride = flags.wasmBinary;\n\n  const [objectUrl, ortWasmFactory] = await importWasmModule(mjsPathOverride, wasmPrefixOverride, numThreads > 1);\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }),\n    );\n  }\n\n  // promise for module initialization\n  tasks.push(\n    new Promise((resolve, reject) => {\n      const config: Partial<OrtWasmModule> = {\n        /**\n         * The number of threads. WebAssembly will create (Module.numThreads - 1) workers. If it is 1, no worker will be\n         * created.\n         */\n        numThreads,\n      };\n\n      if (wasmBinaryOverride) {\n        /**\n         * Set a custom buffer which contains the WebAssembly binary. This will skip the wasm file fetching.\n         */\n        config.wasmBinary = wasmBinaryOverride;\n      } else if (wasmPathOverride || wasmPrefixOverride) {\n        /**\n         * A callback function to locate the WebAssembly file. The function should return the full path of the file.\n         *\n         * Since Emscripten 3.1.58, this function is only called for the .wasm file.\n         */\n        config.locateFile = (fileName, scriptDirectory) =>\n          wasmPathOverride ?? (wasmPrefixOverride ?? scriptDirectory) + fileName;\n      }\n\n      ortWasmFactory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        },\n      );\n    }),\n  );\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    // TODO: currently \"PThread.terminateAllThreads()\" is not exposed in the wasm module.\n    //       And this function is not yet called by any code.\n    //       If it is needed in the future, we should expose it in the wasm module and uncomment the following line.\n\n    // wasm?.PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getInstance } from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions = (\n  options: Record<string, unknown>,\n  prefix: string,\n  seen: WeakSet<Record<string, unknown>>,\n  handler: ExtraOptionsHandler,\n): void => {\n  if (typeof options == 'object' && options !== null) {\n    if (seen.has(options)) {\n      throw new Error('Circular reference in options');\n    } else {\n      seen.add(options);\n    }\n  }\n\n  Object.entries(options).forEach(([key, value]) => {\n    const name = prefix ? prefix + key : key;\n    if (typeof value === 'object') {\n      iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      handler(name, value.toString());\n    } else if (typeof value === 'boolean') {\n      handler(name, value ? '1' : '0');\n    } else {\n      throw new Error(`Can't handle extra config type: ${typeof value}`);\n    }\n  });\n};\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2; // Default to warning\n    } else if (\n      typeof options.logSeverityLevel !== 'number' ||\n      !Number.isInteger(options.logSeverityLevel) ||\n      options.logSeverityLevel < 0 ||\n      options.logSeverityLevel > 4\n    ) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0; // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n      runOptions.logSeverityLevel!,\n      runOptions.logVerbosityLevel!,\n      !!runOptions.terminate!,\n      tagDataOffset,\n    );\n    if (runOptionsHandle === 0) {\n      checkLastError(\"Can't create run options.\");\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string | unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential' | 'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (\n    options.executionProviders &&\n    options.executionProviders.some((ep) => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')\n  ) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders = (\n  sessionOptionsHandle: number,\n  executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n  allocs: number[],\n): void => {\n  for (const ep of executionProviders) {\n    let epName = typeof ep === 'string' ? ep : ep.name;\n\n    // check EP name\n    switch (epName) {\n      case 'webnn':\n        epName = 'WEBNN';\n        if (typeof ep !== 'string') {\n          const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n          // const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          if (deviceType) {\n            const keyDataOffset = allocWasmString('deviceType', allocs);\n            const valueDataOffset = allocWasmString(deviceType, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'deviceType' - ${deviceType}.`);\n            }\n          }\n        }\n        break;\n      case 'webgpu':\n        epName = 'JS';\n        if (typeof ep !== 'string') {\n          const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n          if (webgpuOptions?.preferredLayout) {\n            if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n              throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n            }\n            const keyDataOffset = allocWasmString('preferredLayout', allocs);\n            const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n            }\n          }\n        }\n        break;\n      case 'wasm':\n      case 'cpu':\n        continue;\n      default:\n        throw new Error(`not supported execution provider: ${epName}`);\n    }\n\n    const epNameDataOffset = allocWasmString(epName, allocs);\n    if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n      checkLastError(`Can't append execution provider: ${epName}.`);\n    }\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n      typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2; // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0; // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset =\n      typeof sessionOptions.optimizedModelFilePath === 'string'\n        ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs)\n        : 0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n      graphOptimizationLevel,\n      !!sessionOptions.enableCpuMemArena,\n      !!sessionOptions.enableMemPattern,\n      executionMode,\n      !!sessionOptions.enableProfiling,\n      0,\n      logIdDataOffset,\n      logSeverityLevel,\n      logVerbosityLevel,\n      optimizedModelFilePathOffset,\n    );\n    if (sessionOptionsHandle === 0) {\n      checkLastError(\"Can't create session options.\");\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n          `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`,\n        );\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16,\n\n  // 4-bit data-types\n  uint4 = 21,\n  int4 = 22,\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n    case 'int4':\n      return DataType.int4;\n    case 'uint4':\n      return DataType.uint4;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n    case DataType.int4:\n      return 'int4';\n    case DataType.uint4:\n      return 'uint4';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor size in bytes by the given data type and dimensions\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const calculateTensorSizeInBytes = (\n  dateType: number,\n  dimsOrSize: readonly number[] | number,\n): number | undefined => {\n  const elementSize = [\n    -1, // undefined = 0\n    4, // float = 1\n    1, // uint8 = 2\n    1, // int8 = 3\n    2, // uint16 = 4\n    2, // int16 = 5\n    4, // int32 = 6\n    8, // int64 = 7\n    -1, // string = 8\n    1, // bool = 9\n    2, // float16 = 10\n    8, // double = 11\n    4, // uint32 = 12\n    8, // uint64 = 13\n    -1, // complex64 = 14\n    -1, // complex128 = 15\n    -1, // bfloat16 = 16\n    -1, // FLOAT8E4M3FN = 17\n    -1, // FLOAT8E4M3FNUZ = 18\n    -1, // FLOAT8E5M2 = 19\n    -1, // FLOAT8E5M2FNUZ = 20\n    0.5, // uint4 = 21\n    0.5, // int4 = 22\n  ][dateType];\n\n  const size = typeof dimsOrSize === 'number' ? dimsOrSize : dimsOrSize.reduce((a, b) => a * b, 1);\n  return elementSize > 0 ? Math.ceil(size * elementSize) : undefined;\n};\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (\n  type: Tensor.Type,\n):\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor => {\n  switch (type) {\n    case 'float16':\n      // allow Float16Array polyfill.\n      return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n    case 'float32':\n      return Float32Array;\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int16':\n      return Int16Array;\n    case 'int32':\n      return Int32Array;\n    case 'bool':\n      return Uint8Array;\n    case 'float64':\n      return Float64Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'uint64':\n      return BigUint64Array;\n    default:\n      throw new Error(`unsupported type: ${type}`);\n  }\n};\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Check whether the given tensor type is supported by WebNN MLTensor\n */\nexport const isMLTensorSupportedType = (type: Tensor.Type): type is Tensor.MLTensorDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint64' ||\n  type === 'int8' ||\n  type === 'uint8' ||\n  type === 'bool';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    case 'ml-tensor':\n      return 5;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation | undefined =>\n  (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer', 'ml-tensor'] as const)[location];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { isNode } from './wasm-utils-env';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async (file: string | Blob | ArrayBufferLike | Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (isNode) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        const { readFile } = require('node:fs/promises');\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const { createReadStream } = require('node:fs');\n          const stream = createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"jsep/webnn/webnn.d.ts\" />\n\nimport { Env, InferenceSession, Tensor } from 'onnxruntime-common';\n\nimport {\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport { setRunOptions } from './run-options';\nimport { setSessionOptions } from './session-options';\nimport {\n  calculateTensorSizeInBytes,\n  dataLocationStringToEnum,\n  isGpuBufferSupportedType,\n  isMLTensorSupportedType,\n  logLevelStringToEnum,\n  tensorDataTypeEnumToString,\n  tensorDataTypeStringToEnum,\n  tensorTypeToTypedArrayConstructor,\n} from './wasm-common';\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError } from './wasm-utils';\nimport { loadFile } from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` is\n * called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` is called. Unlike the first 3 steps (they only called once),\n * this step will be done for each session. In this step, onnxruntime-web does the followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError(\"Can't initialize onnxruntime.\");\n  }\n};\n\n/**\n * initialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async (env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async (env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (\n          powerPreference !== undefined &&\n          powerPreference !== 'low-power' &&\n          powerPreference !== 'high-performance'\n        ) {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({ powerPreference, forceFallbackAdapter });\n        if (!adapter) {\n          throw new Error(\n            'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.',\n          );\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (\n          typeof adapter.limits !== 'object' ||\n          typeof adapter.features !== 'object' ||\n          typeof adapter.requestDevice !== 'function'\n        ) {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as { ml: unknown }).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu' | 'cpu-pinned' | 'gpu-buffer' | 'ml-tensor';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer', 'ml-tensor'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number,\n  inputNamesUTF8Encoded: number[],\n  outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState | null,\n  enableGraphCapture: boolean,\n  inputOutputBound: boolean,\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError(\"Can't get session input/output count.\");\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async (\n  modelData: Uint8Array | SerializableInternalBuffer,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(\n          loadFile(typeof file === 'string' ? file : file.data).then((data) => {\n            wasm.mountExternalData!(path, data);\n          }),\n        );\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    for (const provider of options?.executionProviders ?? []) {\n      const providerName = typeof provider === 'string' ? provider : provider.name;\n      if (providerName === 'webnn') {\n        wasm.shouldTransferToMLTensor = false;\n        if (wasm.currentContext) {\n          throw new Error('WebNN execution provider is already set.');\n        }\n        if (typeof provider !== 'string') {\n          const webnnOptions = provider as InferenceSession.WebNNExecutionProviderOption;\n          const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const gpuDevice = (webnnOptions as InferenceSession.WebNNOptionsWebGpu)?.gpuDevice;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          const numThreads = (webnnOptions as InferenceSession.WebNNContextOptions)?.numThreads;\n          const powerPreference = (webnnOptions as InferenceSession.WebNNContextOptions)?.powerPreference;\n          if (context) {\n            wasm.currentContext = context as MLContext;\n          } else if (gpuDevice) {\n            wasm.currentContext = await navigator.ml.createContext(gpuDevice);\n          } else {\n            wasm.currentContext = await navigator.ml.createContext({ deviceType, numThreads, powerPreference });\n          }\n        } else {\n          wasm.currentContext = await navigator.ml.createContext();\n        }\n        break;\n      }\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError(\"Can't create a session.\");\n    }\n\n    // clear current MLContext after session creation\n    if (wasm.currentContext) {\n      wasm.jsepRegisterMLContext!(sessionHandle, wasm.currentContext);\n      wasm.currentContext = undefined;\n      wasm.shouldTransferToMLTensor = true;\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an input name.\");\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an output name.\");\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_JSEP) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location =\n          typeof options?.preferredOutputLocation === 'string'\n            ? options.preferredOutputLocation\n            : (options?.preferredOutputLocation?.[nameString] ?? 'cpu');\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer' && location !== 'ml-tensor') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(\n            `Not supported preferred output location: ${location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`,\n          );\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preferred to be on GPU.\n    let bindingState: IOBindingState | null = null;\n    if (!BUILD_DEFS.DISABLE_JSEP && outputPreferredLocations.some((l) => l === 'gpu-buffer' || l === 'ml-tensor')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError(\"Can't create IO binding.\");\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(sessionHandle, [\n      sessionHandle,\n      inputNamesUTF8Encoded,\n      outputNamesUTF8Encoded,\n      bindingState,\n      enableGraphCapture,\n      false,\n    ]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      wasm._OrtReleaseBinding(ioBindingHandle);\n    }\n\n    if (sessionHandle !== 0) {\n      wasm._OrtReleaseSession(sessionHandle);\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor = (\n  tensor: TensorMetadata | null,\n  tensorHandles: number[],\n  allocs: number[],\n  sessionId: number,\n  index: number,\n  enableGraphCapture = false,\n): void => {\n  if (!tensor) {\n    tensorHandles.push(0);\n    return;\n  }\n\n  const wasm = getInstance();\n\n  const dataType = tensor[0];\n  const dims = tensor[1];\n  const location = tensor[3];\n\n  let rawData: number;\n  let dataByteLength: number;\n\n  if (dataType === 'string' && (location === 'gpu-buffer' || location === 'ml-tensor')) {\n    throw new Error('String tensor is not supported on GPU.');\n  }\n\n  if (enableGraphCapture && location !== 'gpu-buffer') {\n    throw new Error(\n      `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`,\n    );\n  }\n\n  if (location === 'gpu-buffer') {\n    const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerBuffer = wasm.jsepRegisterBuffer;\n    if (!registerBuffer) {\n      throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n    }\n    rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n  } else if (location === 'ml-tensor') {\n    const mlTensor = tensor[2].mlTensor as MLTensor;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerMLTensor = wasm.jsepRegisterMLTensor;\n    if (!registerMLTensor) {\n      throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n    }\n    rawData = registerMLTensor(mlTensor, tensorDataTypeStringToEnum(dataType), dims);\n  } else {\n    const data = tensor[2];\n\n    if (Array.isArray(data)) {\n      // string tensor\n      dataByteLength = 4 * data.length;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      let dataIndex = rawData / 4;\n      for (let i = 0; i < data.length; i++) {\n        if (typeof data[i] !== 'string') {\n          throw new TypeError(`tensor data at index ${i} is not a string`);\n        }\n        wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n      }\n    } else {\n      dataByteLength = data.byteLength;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n    }\n  }\n\n  const stack = wasm.stackSave();\n  const dimsOffset = wasm.stackAlloc(4 * dims.length);\n  try {\n    let dimIndex = dimsOffset / 4;\n    dims.forEach((d) => (wasm.HEAP32[dimIndex++] = d));\n    const tensor = wasm._OrtCreateTensor(\n      tensorDataTypeStringToEnum(dataType),\n      rawData,\n      dataByteLength,\n      dimsOffset,\n      dims.length,\n      dataLocationStringToEnum(location),\n    );\n    if (tensor === 0) {\n      checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n    }\n    tensorHandles.push(tensor);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * perform inference run\n */\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputTensors: TensorMetadata[],\n  outputIndices: number[],\n  outputTensors: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    // WebNN backend needs the active session to check MLTensors with the current context.\n    wasm.jsepOnRunStart?.(sessionHandle);\n\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n        inputTensors[i],\n        inputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n        outputTensors[i],\n        outputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputCount + outputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState && !inputOutputBound) {\n      const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(\n          `input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`,\n        );\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3]; // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode = wasm._OrtBindOutput(\n            handle,\n            outputNamesUTF8Encoded[index],\n            0,\n            outputPreferredLocationsEncoded[index],\n          );\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        true,\n      ]);\n    }\n\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n        sessionHandle,\n        ioBindingState.handle,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    } else {\n      errorCode = await wasm._OrtRun(\n        sessionHandle,\n        inputNamesOffset,\n        inputValuesOffset,\n        inputCount,\n        outputNamesOffset,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type | undefined,\n        dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n          tensor,\n          tensorDataOffset,\n          tensorDataOffset + 4,\n          tensorDataOffset + 8,\n          tensorDataOffset + 12,\n        );\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer' || preferredLocation === 'ml-tensor') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const bufferSize = calculateTensorSizeInBytes(dataType, size);\n            if (bufferSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, bufferSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'gpu-buffer',\n            ]);\n          } else if (preferredLocation === 'ml-tensor' && size > 0) {\n            const ensureTensor = wasm.jsepEnsureTensor;\n            if (!ensureTensor) {\n              throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n            }\n            const tensorSize = calculateTensorSizeInBytes(dataType, size);\n            if (tensorSize === undefined || !isMLTensorSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // If the graph has been partitioned, the output tensor may have not been created. For this reason, we use\n            // ensureTensor to get/create the MLTensor. In which case, we don't need to copy the data if a new tensor\n            // has been created.\n            const mlTensor = await ensureTensor(dataOffset, dataType, dims, false);\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                mlTensor,\n                download: wasm.jsepCreateMLTensorDownloader!(dataOffset, type),\n                dispose: () => {\n                  wasm.jsepReleaseTensorId!(dataOffset);\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'ml-tensor',\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(\n              wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength),\n            );\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        false,\n      ]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach((p) => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach((p) => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError(\"Can't get an profile file name.\");\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env, InferenceSession } from 'onnxruntime-common';\n\nimport {\n  OrtWasmMessage,\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport { initializeWebAssembly } from './wasm-factory';\nimport { importProxyWorker } from './wasm-utils-import';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker | undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\nlet temporaryObjectUrl: string | undefined;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      if (temporaryObjectUrl) {\n        URL.revokeObjectURL(temporaryObjectUrl);\n        temporaryObjectUrl = undefined;\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nexport const initializeWebAssemblyAndOrtRuntime = async (): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initWasm()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initWasm()' failed.\");\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      void importProxyWorker().then(([objectUrl, worker]) => {\n        try {\n          proxyWorker = worker;\n          proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n          proxyWorker.onmessage = onProxyWorkerMessage;\n          initWasmCallbacks = [resolve, reject];\n          const message: OrtWasmMessage = { type: 'init-wasm', in: env };\n          proxyWorker.postMessage(message);\n          temporaryObjectUrl = objectUrl;\n        } catch (e) {\n          reject(e);\n        }\n      }, reject);\n    });\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async (epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'init-ep', in: { epName, env } };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async (buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'copy-from', in: { buffer } };\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession = async (\n  model: SerializableInternalBuffer | Uint8Array,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check unsupported options\n    if (options?.preferredOutputLocation) {\n      throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      enqueueCallbacks('create', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'create', in: { model, options: { ...options } } };\n      const transferable: Transferable[] = [];\n      if (model instanceof Uint8Array) {\n        transferable.push(model.buffer);\n      }\n      proxyWorker!.postMessage(message, transferable);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'release', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputs: TensorMetadata[],\n  outputIndices: number[],\n  outputs: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some((t) => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some((t) => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[]; // every input is on CPU.\n      const message: OrtWasmMessage = {\n        type: 'run',\n        in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options },\n      };\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'end-profiling', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  InferenceSession,\n  InferenceSessionHandler,\n  SessionHandler,\n  Tensor,\n  TRACE_FUNC_BEGIN,\n  TRACE_FUNC_END,\n} from 'onnxruntime-common';\n\nimport { SerializableInternalBuffer, TensorMetadata } from './proxy-messages';\nimport { copyFromExternalBuffer, createSession, endProfiling, releaseSession, run } from './proxy-wrapper';\nimport { isGpuBufferSupportedType, isMLTensorSupportedType } from './wasm-common';\nimport { isNode } from './wasm-utils-env';\nimport { loadFile } from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, 'gpu-buffer'];\n    case 'ml-tensor':\n      return [tensor.type, tensor.dims, { mlTensor: tensor.mlTensor }, 'ml-tensor'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const { gpuBuffer, download, dispose } = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });\n    }\n    case 'ml-tensor': {\n      const dataType = tensor[0];\n      if (!isMLTensorSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing MLTensor tensor`);\n      }\n      const { mlTensor, download, dispose } = tensor[2];\n      return Tensor.fromMLTensor(mlTensor, { dataType, dims: tensor[1], download, dispose });\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string | Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (isNode) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor | null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs = inputArray.map((t, i) =>\n      encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`),\n    );\n    const outputs = outputArray.map((t, i) =>\n      t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null,\n    );\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend, env, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { initializeOrtEp, initializeWebAssemblyAndOrtRuntime } from './wasm/proxy-wrapper';\nimport { OnnxruntimeWebAssemblySessionHandler } from './wasm/session-handler-inference';\nimport { scriptSrc } from './wasm/wasm-utils-import';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (env.wasm.simd === false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated property \"env.wasm.simd\" is set to false. ' +\n        'non-SIMD build is no longer provided, and this setting will be ignored.',\n    );\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // The following logic only applies when `ort.env.wasm.numThreads` is not set by user. We will always honor user's\n    // setting if it is provided.\n\n    // Browser: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not\n    // work. In this case, we will set numThreads to 1.\n    //\n    // There is an exception: when the browser is configured to force-enable SharedArrayBuffer (e.g. Chromuim with\n    // --enable-features=SharedArrayBuffer), it is possible that `self.crossOriginIsolated` is false and\n    // SharedArrayBuffer is available at the same time. This is usually for testing. In this case,  we will still set\n    // numThreads to 1 here. If we want to enable multi-threading in test, we should set `ort.env.wasm.numThreads` to a\n    // value greater than 1.\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      env.wasm.numThreads = 1;\n    } else {\n      const numCpuLogicalCores =\n        typeof navigator === 'undefined' ? require('node:os').cpus().length : navigator.hardwareConcurrency;\n      env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n    }\n  }\n\n  if (!BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    // overwrite wasm paths override if not set\n    if (env.wasm.wasmPaths === undefined && scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n      env.wasm.wasmPaths = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n    }\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(\n    path: string,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(\n    buffer: Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport { registerBackend, env } from 'onnxruntime-common';\nimport { version } from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', { value: version, enumerable: true });\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.20.1';\n", null, null, null, null, null, "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=common.js.map", null, null, null, null, null, null, null, null],
  "mappings": "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",
  "names": ["backends", "backendsSortedByPriority", "registerBackend", "tryResolveAndInitializeBackend", "resolveBackendAndExecutionProviders", "init_backend_impl", "__esmMin", "name", "backend", "priority", "currentBackend", "i", "backendName", "backendInfo", "isInitializing", "e", "options", "eps", "backendHints", "backendNames", "errors", "availableBackendNames", "resolveResult", "err", "filteredEps", "target", "prop", "init_backend", "version", "init_version", "logLevelValue", "env", "init_env_impl", "value", "init_env", "tensorToDataURL", "tensorToImageData", "init_tensor_conversion_impl", "tensor", "canvas", "pixels2DContext", "width", "height", "inputformat", "norm", "normMean", "normBias", "stride", "rTensorPointer", "gTensorPointer", "bTensorPointer", "aTensorPointer", "j", "R", "G", "B", "A", "image", "channels", "step", "rImagePointer", "gImagePointer", "bImagePointer", "aImagePointer", "bufferToTensor", "tensorFromImage", "tensorFromTexture", "tensorFromGpuBuffer", "tensorFromMLTensor", "tensorFromPinnedBuffer", "init_tensor_factory_impl", "init_tensor_impl", "buffer", "outputformat", "float32Data", "Tensor", "isHTMLImageEle", "isImageDataEle", "isImageBitmap", "isString", "data", "bufferToTensorOptions", "createCanvas", "createCanvasContext", "tempCanvas", "resolve", "reject", "context", "newImage", "img", "texture", "download", "dispose", "dims", "gpuBuffer", "dataType", "mlTensor", "type", "NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP", "NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP", "isTypedArrayChecked", "checkTypedArray", "init_tensor_impl_type_mapping", "isBigInt64ArrayAvailable", "isBigUint64ArrayAvailable", "isFloat16ArrayAvailable", "calculateSize", "tensorReshape", "init_tensor_utils_impl", "size", "dim", "arg0", "arg1", "arg2", "expectedTypedArrayConstructor", "maybeDims", "typedArrayConstructor", "firstElementType", "mappedType", "releaseData", "init_tensor", "TRACE", "TRACE_FUNC", "TRACE_FUNC_BEGIN", "TRACE_FUNC_END", "init_trace", "deviceType", "label", "msg", "extraMsg", "stack", "hasTraceFunc", "InferenceSession", "init_inference_session_impl", "_InferenceSession", "handler", "feeds", "fetches", "isFetchesEmpty", "isFetches", "arg1Keys", "v", "results", "returnValue", "key", "result", "arg3", "filePathOrUint8Array", "byteOffset", "byteLength", "optionsWithValidatedEPs", "init_inference_session", "init_tensor_conversion", "init_tensor_factory", "init_onnx_model", "init_onnx_value", "noBackendErrMsg", "TrainingSession", "init_training_session_impl", "_TrainingSession", "hasOptimizerModel", "hasEvalModel", "trainingOptions", "sessionOptions", "evalModel", "optimizerModel", "inputNames", "outputNames", "trainableOnly", "array", "paramsSize", "init_training_session", "esm_exports", "__export", "init_esm", "log", "createCategorizedLogger", "logInternal", "category", "severity", "content", "_stack", "config", "LOGGER_CONFIG_MAP", "SEVERITY_VALUE", "LOGGER_PROVIDER_MAP", "NoOpLoggerProvider", "ConsoleLoggerProvider", "LOGGER_DEFAULT_CONFIG", "Logger", "Event", "EventRecord", "Profiler", "now", "init_instrument", "_severity", "_content", "_category", "verbose", "info", "warning", "error", "fatal", "reset", "set", "previousConfig", "setWithEnv", "startTime", "endCallback", "timer", "ctx", "endTime", "maxNumberEvents", "flushBatchSize", "flushIntervalInMilliseconds", "func", "event", "isPromise", "res", "reason", "eventRes", "currentTime", "previousPointer", "resolveOperator", "node", "opsets", "rules", "rule", "opType", "domain", "versionSelector", "opImpl", "opInit", "opset", "matchSelector", "selector", "rangeStart", "pair", "rangeEnd", "init_opset", "require_guid", "__commonJSMin", "exports", "Guid", "guid", "count", "out", "other", "Long", "low", "high", "unsigned", "isLong", "obj", "ctz32", "c", "fromInt", "cachedObj", "cache", "UINT_CACHE", "fromBits", "INT_CACHE", "fromNumber", "UZERO", "ZERO", "TWO_PWR_64_DBL", "MAX_UNSIGNED_VALUE", "TWO_PWR_63_DBL", "MIN_VALUE", "MAX_VALUE", "TWO_PWR_32_DBL", "lowBits", "highBits", "fromString", "str", "radix", "p", "radixToPower", "pow_dbl", "power", "fromValue", "val", "wasm", "TWO_PWR_16_DBL", "TWO_PWR_24_DBL", "TWO_PWR_24", "ONE", "UONE", "NEG_ONE", "LongPrototype", "long_default", "init_long", "radixLong", "div", "rem1", "rem", "remDiv", "intval", "digits", "bit", "thisNeg", "otherNeg", "addend", "a48", "a32", "a16", "a00", "b48", "b32", "b16", "b00", "c48", "c32", "c16", "c00", "subtrahend", "multiplier", "divisor", "approx", "halfThis", "log2", "delta", "approxRes", "approxRem", "numBits", "b", "le", "hi", "lo", "bytes", "flatbuffers", "init_flatbuffers", "opt_initial_size", "initial_size", "forceDefaults", "additional_bytes", "align_size", "old_buf_size", "byte_size", "voffset", "defaultValue", "bb", "new_buf_size", "nbb", "offset", "numfields", "vtableloc", "trimmed_size", "standard_fields", "len", "existing_vtable", "vt1", "outer_loop", "vt2", "root_table", "opt_file_identifier", "opt_size_prefix", "size_prefix", "file_identifier", "table", "field", "table_start", "vtable_start", "ok", "elem_size", "num_elems", "alignment", "s", "utf8", "codePoint", "a", "position", "bb_pos", "vtable_offset", "vtable", "t", "opt_encoding", "length", "d", "ident", "onnxruntime", "init_ort_generated", "experimental", "fbs", "AttributeType", "DimensionValueType", "TensorDataType", "NodeType", "TypeInfoValue", "Shape", "index", "builder", "dimOffset", "numElems", "Dimension", "optionalEncoding", "valueOffset", "denotationOffset", "DimensionValue", "dimType", "dimValue", "dimParamOffset", "TensorTypeAndShape", "elemType", "shapeOffset", "MapType", "keyType", "valueTypeOffset", "SequenceType", "elemTypeOffset", "EdgeEnd", "node_index", "src_arg_index", "dst_arg_index", "NodeEdge", "nodeIndex", "inputEdgesOffset", "outputEdgesOffset", "Node", "nameOffset", "docStringOffset", "domainOffset", "sinceVersion", "opTypeOffset", "executionProviderTypeOffset", "inputsOffset", "outputsOffset", "attributesOffset", "inputArgCountsOffset", "implicitInputsOffset", "ValueInfo", "typeOffset", "TypeInfo", "valueType", "OperatorSetId", "dimsOffset", "rawDataOffset", "stringDataOffset", "SparseTensor", "valuesOffset", "indicesOffset", "Attribute", "f", "sOffset", "tOffset", "gOffset", "floatsOffset", "intsOffset", "stringsOffset", "tensorsOffset", "graphsOffset", "Graph", "initializersOffset", "nodeArgsOffset", "nodesOffset", "maxNodeIndex", "nodeEdgesOffset", "sparseInitializersOffset", "Model", "irVersion", "opsetImportOffset", "producerNameOffset", "producerVersionOffset", "modelVersion", "graphOffset", "graphDocStringOffset", "KernelCreateInfos", "nodeIndicesOffset", "kernelDefHashesOffset", "SubGraphSessionState", "graphIdOffset", "sessionStateOffset", "SessionState", "kernelsOffset", "subGraphSessionStatesOffset", "ortVersionOffset", "modelOffset", "require_aspromise", "module", "asPromise", "fn", "params", "pending", "require_base64", "base64", "string", "n", "b64", "s64", "start", "end", "parts", "chunk", "invalidEncoding", "require_eventemitter", "EventEmitter", "evt", "listeners", "args", "require_float", "factory", "f32", "f8b", "writeFloat_f32_cpy", "buf", "pos", "writeFloat_f32_rev", "readFloat_f32_cpy", "readFloat_f32_rev", "writeFloat_ieee754", "writeUint", "sign", "exponent", "mantissa", "writeUintLE", "writeUintBE", "readFloat_ieee754", "readUint", "uint", "readUintLE", "readUintBE", "f64", "writeDouble_f64_cpy", "writeDouble_f64_rev", "readDouble_f64_cpy", "readDouble_f64_rev", "writeDouble_ieee754", "off0", "off1", "readDouble_ieee754", "require_inquire", "require_utf8", "c1", "c2", "require_pool", "pool", "alloc", "slice", "SIZE", "MAX", "slab", "require_longbits", "LongBits", "util", "zero", "zeroHash", "charCodeAt", "hash", "mask", "part0", "part1", "part2", "require_minimal", "Buffer", "sizeOrArray", "bits", "merge", "dst", "src", "ifNotSet", "keys", "newError", "CustomError", "message", "properties", "fieldNames", "fieldMap", "encoding", "require_writer", "Writer", "BufferWriter", "Op", "noop", "State", "writer", "create", "writeByte", "writeVarint32", "VarintOp", "writeVarint64", "writeFixed32", "writeBytes", "head", "tail", "BufferWriter_", "require_writer_buffer", "writeStringBuffer", "require_reader", "Reader", "BufferReader", "indexOutOfRange", "reader", "writeLength", "create_array", "readLongVarint", "readFixed32_end", "readFixed64", "nativeBuffer", "wireType", "BufferReader_", "require_reader_buffer", "require_service", "Service", "rpcImpl", "requestDelimited", "responseDelimited", "rpcCall", "method", "requestCtor", "responseCtor", "request", "callback", "self", "response", "endedByRPC", "require_rpc", "rpc", "require_roots", "require_index_minimal", "protobuf", "configure", "require_onnx", "$protobuf", "$Reader", "$Writer", "$util", "$root", "onnx", "valuesById", "values", "AttributeProto", "tag", "end2", "object", "long", "typeUrlPrefix", "ValueInfoProto", "NodeProto", "TrainingInfoProto", "ModelProto", "StringStringEntryProto", "TensorAnnotation", "GraphProto", "TensorProto", "Segment", "SparseTensorProto", "TensorShapeProto", "$oneOfFields", "TypeProto", "Sequence", "Map", "Optional", "OperatorSetIdProto", "FunctionProto", "assert", "expr", "decodeUtf8String", "import_onnx", "ArrayUtil", "MatMulUtil", "BroadcastUtil", "GemmUtil", "ProtoUtil", "LongUtil", "ShapeUtil", "SplitUtil", "PoolConvUtil", "MIN_CLIP", "MAX_CLIP", "init_util", "n1", "n2", "dimsA", "dimsB", "outputShape", "aRank", "bRank", "_BroadcastUtil", "adims", "bdims", "isMatMul", "arank", "brank", "crank", "cdims", "cShapeMatMul", "aLen", "bLen", "broadcastedIndices", "originalShape", "originalIndices", "op", "inplace", "resultType", "outputIndices", "originalIndicesA", "originalIndicesB", "valA", "valB", "isAScalar", "isBScalar", "rest", "shape", "finalShape", "inputRank", "finalRank", "inputShape", "inRank", "leftShape", "transLeft", "rightShape", "transRight", "biasShape", "M", "K", "N", "kDim", "_ProtoUtil", "typeProto", "attributes", "_ShapeUtil", "axis", "rank", "strides", "indices", "tensorRank", "axes", "x", "axisToIncrementOn", "k", "originalDims", "shapeHints", "nDims", "reshapedDims", "unknownDimension", "newTensorSize", "oldTensorSize", "perm", "pad", "shape1", "shape2", "total", "y", "right", "outputDims", "inSqueezeList", "inputDimsIterator", "_SplitUtil", "split", "numOutputs", "shapes", "offsets", "numElementsAlongAxis", "_PoolConvUtil", "isGlobalOperator", "inputDims", "kernelShape", "dilations", "pads", "autoPad", "filterDims", "inSize", "dilation", "kernel", "padHeadIndex", "padTailIndex", "dkernel", "padNeeded", "sizeof", "sizeofProto", "createView", "dataBuffer", "dataviewConstructor", "longToNumber", "ortFbs", "readProto", "view", "import_guid_typescript", "_Tensor", "dataProvider", "asyncDataProvider", "dataId", "empty", "constructor", "tensorProto", "dataDest", "dataSource", "elementSize", "element", "ortTensor", "getGlsl", "GLSL_ES_2_0", "GLSL_ES_3_0", "getVertexShaderSource", "glsl", "getFragShaderPreamble", "getDefaultFragShaderMain", "outputShapeLength", "init_glsl_source", "init_types", "repeatedTry", "checkFn", "delayFn", "_counter", "maxCounter", "tryCount", "tryFn", "nextBackoff", "generateShaderFuncNameFromInputSamplerName", "samplerName", "generateShaderFuncNameFromInputSamplerNameAtOutCoords", "squeezeInputShape", "squeezedShape", "newInputShape", "getSqueezedParams", "keptDims", "getCoordsDataType", "getGlChannels", "init_utils", "getVecChannels", "getChannels", "unpackFromChannel", "init_packing_utils", "getOutOfBoundsCondition", "cond", "getOutput", "coord00", "coord01", "coord10", "coord11", "D", "getSetup", "rows", "cols", "packProgramMetadata", "createPackProgramInfo", "createPackProgramInfoLoader", "init_pack", "input", "outputRank", "coordsDataType", "setup", "reversedInputWH", "outOfBoundsCondition", "output", "shaderSource", "processDims3D", "batch", "isReshapeCheap", "isCheapReshape", "getReshapedInputCoords", "coords", "line1", "line2", "getFlattenedIndexFrom3D", "createPackedReshape3DProgramMetadata", "createPackedReshape3DProgramInfo", "createPackedReshape3DProgramInfoLoader", "init_reshape_packed", "outputShape3D", "input3D", "metadata", "inputShape3D", "squeezedOutputShape", "mainLoop", "outputCoords", "encodeAsUint8", "init_uint8_encode", "inferenceHandler", "programInfo", "getSourceCoords", "unpackProgramMetadata", "createUnpackProgramInfo", "createUnpackProgramInfoLoader", "init_unpack", "innerDims", "unpackChannel", "sourceCoords", "RedFloat32DataEncoder", "RGBAFloatDataEncoder", "Uint8DataEncoder", "init_texture_data_encoder", "gl", "textureSize", "source", "dataSize", "_value", "textureType", "dest", "_textureSize", "createTextureLayoutFromTextureType", "calculateTextureWidthAndHeight", "createTextureLayoutFromShape", "init_texture_layout", "textureLayoutStrategy", "channel", "isPacked", "reverseWH", "breakAxis", "unpackedShape", "layout", "prefs", "inferredDims", "getProgramInfoUniqueKey", "WebGLInferenceHandler", "init_inference_handler", "inputTextureDatas", "inputs", "session", "program", "artifact", "outputTextureLayout", "outputTextureData", "td", "adjustedKernelShape", "adjustedLayout", "numFeatureMaps", "oldRowSize", "newRowSize", "newSize", "oldOffset", "newOffset", "unpackedTextureLayout", "unpackedTextureData", "usage", "inputTD", "newTextureLayout", "squeezedInputShape", "squeezedInputTensor", "squeezedOutputTensor", "tensorId", "textureData", "_id", "AttributeWithCacheKeyImpl", "createAttributeWithCacheKey", "init_attribute_with_cache_key", "attribute", "batchNormalizationProgramMetadata", "batchNormalization", "parseBatchNormalizationAttributes", "createBatchNormalizationProgramInfo", "validateInputs", "init_batch_normalization", "epsilon", "momentum", "spatial", "scaleWidth", "scaleHeight", "X", "scale", "mean", "var_", "GlslContext", "GlslLib", "GlslLibRoutine", "GlslLibRoutineNode", "TopologicalSortGlslRoutines", "init_glsl_definitions", "glContext", "inputTextureLayouts", "routineBody", "dependencies", "nodes", "cycleCheck", "alreadyTraversed", "graphNodes", "root", "glslAdd", "glslDiv", "glslMul", "glslSub", "glslEqual", "glslGreater", "glslLess", "glslAnd", "glslOr", "glslXor", "glslPow", "glslBuiltinBinary", "glslPRelu", "fname", "createBinaryProgramInfoLoader", "createBinaryProgramInfo", "add", "and", "equal", "greater", "less", "mul", "or", "pow", "pRelu", "sub", "xor", "init_binary_op", "glslFunc", "outputTensorType", "cacheKey", "isBroadcast", "usePackedTexture", "calculatedShape", "aBcast", "bBcast", "cast", "parseCastAttributes", "init_cast", "to", "createPackedConcatProgramMetadata", "createPackedConcatProgramInfo", "createPackedConcatProgramInfoLoader", "getShiftedChannelsSnippet", "init_concat_packed", "inputCount", "cacheHint", "_v", "dataNShape", "axisIndex", "dtype", "lastChannels", "allChannels", "getValueSnippet", "shift", "lastIndex", "channelIdx", "idx", "concat", "createUnpackedConcatProgramMetadata", "createUnpackedConcatProgramInfo", "createUnpackedConcatProgramInfoLoader", "getTextureIndexWhereDataResidesLinearSearch", "getTextureIndexWhereDataResidesBinarySearch", "getFetchDataFromCorrectTextureMethod", "getGetSizeInConcatAxisValueFromIndexMethod", "parseConcatAttributes", "init_concat", "_handler", "sizeInConcatAxis", "previousSum", "getTextureIndexWhereDataResidesMethod", "fetchDataFromCorrectTextureMethod", "getSizeInConcatAxisValueFromIndexMethod", "numberOfTensors", "codeLines", "inputType", "inputDimensionality", "glslAbs", "glslBuiltinUnary", "glslAcos", "glslAsin", "glslAtan", "glslCeil", "glslCos", "glslElu", "alpha", "glslExp", "glslFloor", "glslClip", "min", "max", "glslIdentity", "glslLeakyRelu", "glslLog", "glslNeg", "glslNot", "glslSin", "glslRelu", "glslSigmoid", "glslSqrt", "glslTan", "glslTanh", "createElementwiseProgramInfo", "createElementwiseProgramInfoLoader", "abs", "acos", "asin", "atan", "clip", "parseClipAttributes", "clipV11", "generateClipAttributesFromInputs", "ceil", "cos", "elu", "parseEluAttributes", "exp", "floor", "identity", "leakyRelu", "parseLeakyReluAttributes", "neg", "not", "relu", "sigmoid", "sin", "sqrt", "tan", "tanh", "init_unary_op", "getActivationSnippet", "activationName", "activationFunction", "applyActivation", "parseInternalActivationAttributes", "init_fuse_utils", "activation", "clipMin", "clipMax", "createUnpackedGroupedConvProgramMetadata", "createUnpackedGroupedConvProgramInfo", "createUnpackedGroupedConvProgramInfoLoader", "init_conv_grouped", "init_conv", "hasBias", "processBias", "xShape", "wShape", "outputChannelsPerGroup", "calculateOutputShape", "createPackedIm2ColProgramMetadata", "createPackedIm2ColProgramInfo", "createPackedIm2ColProgramInfoLoader", "init_im2col_pack", "w", "xshape", "wshape", "rowDim", "colDim", "im2colShape", "kernelSize", "unrolled", "row", "col", "createMatmulProgramInfo", "activationAttributes", "aShape", "bShape", "allGlChannels", "getBiasForMatmulSnippet", "getBiasForMatmul", "sharedDim", "createMatmulProgramInfoLoader", "createMatmulProgramMetadata", "inShape", "outShape", "unpackedCoordsSnippet", "outRank", "rankDiff", "_s", "coordsSnippet", "isInputScalar", "matMul", "parseMatMulAttributes", "init_matmul", "init_matmul_pack", "createPackedMatmulProgramInfoLoader", "getBcastSamplerForMatmul", "unpackedACoordsSnippet", "unpackedBCoordsSnippet", "inAShape", "inBShape", "inARank", "inBRank", "rankADiff", "rankBDiff", "broadcastADims", "broadcastBDims", "coordsASnippet", "coordsBSnippet", "swapDimSnippet", "getA", "getB", "createPackedMatmulProgramMetadata", "createPackedMatmulProgramInfo", "sharedDimIndex", "getBcastedSamplerForMatmulSnippet", "getSamplerAInLoopSnippet", "getSamplerBInLoopSnippet", "getOutputCoordsSnippet", "conv2DPacked", "init_conv_pack", "kshape", "im2colOutput", "kernelReshaped", "matmulInputs", "matmulOutput", "createIm2ColProgramMetadata", "createIm2ColProgramInfo", "createIm2ColProgramInfoLoader", "calculateIm2ColDims", "init_im2col", "_inferenceHandler", "im2colDims", "createDotProductProgramMetadata", "createDotProductProgramInfo", "createDotProductProgramInfoLoader", "init_dot_product", "kWidth", "kHeight", "im2colStrides", "im2colWidth", "im2colHeight", "initValue", "conv", "conv2d", "conv2DUnpackedPointwise", "conv2DUnpacked", "getAdjustedConvAttributes", "parseConvAttributes", "adjustPads", "batchSize", "inputSpatialShape", "spatialRank", "outChannels", "dilatedKernelShape", "outputSpatialShape", "adjustedAttributes", "packMode", "isPointwise", "reshapedX", "reshapedK", "xIm2Col", "dotProductInputs", "newAttributes", "group", "dataChannel", "filterInChannel", "computeTotalPad", "distributePadding", "calculateOutputShapeAndPads", "convTranspose", "convTranspose2d", "createConvTransposeProgramMetadata", "createUnpackedConvTransposeProgramInfo", "createUnpackedConvTransposeProgramInfoLoader", "convTranspose2DUnpacked", "getAdjustedConvTransposeAttributes", "parseConvTransposeAttributes", "init_conv_transpose", "inDim", "adj", "outSize", "totalPad", "smallPad", "outputPadding", "updateShape", "valueInit", "inputChannelsPerGroup", "featureMaps", "transposeProgramMetadata", "transpose", "parseTransposeAttributes", "createTransposeProgramInfo", "getAdjustedPerm", "getOutputShape", "getPermFunctionBody", "init_transpose", "unpackedOutputShape", "reverseFunc", "depthToSpace", "parseDepthToSpaceAttributes", "init_depth_to_space", "blocksize", "blocksizeSqr", "transposePerm", "firstReshapeShape", "firstReshapedTensor", "transposeAttributes", "transposeOutput", "secondReshapeShape", "mode", "flatten", "parseFlattenAttributes", "init_flatten", "r", "NUMBER_TYPES", "init_operators", "gather", "parseGatherAttributes", "gatherProgramMetadata", "createGatherProgramInfo", "createGatherProgramInfoLoader", "init_gather", "indexDataShape", "indexCopyOps", "orank", "irank", "iDrank", "gemm", "parseGemmAttributes", "parseGemmAttributesV7", "parseGemmAttributesV11", "createGemmProgramInfoLoader", "createGemmProgramInfo", "init_gemm", "isOptionalC", "transA", "transB", "beta", "line", "declareC", "broadcastC", "calculateC", "imageScaler", "parseImageScalerAttributes", "imageScalerProgramMetadata", "createImageScalerProgramInfo", "createImageScalerProgramInfoLoader", "createGetBiasMethod", "init_image_scaler", "bias", "numChannels", "instanceNormalization", "parseInstanceNormalizationAttributes", "meanAndVarianceProgramMetadata", "createMeanAndVarianceProgramInfo", "createMeanAndVarianceProgramInfoLoader", "computeOutputProgramMetadata", "createComputeOutputProgramInfo", "createComputeOutputProgramInfoLoader", "init_instance_normalization", "meanAndVariance", "xDims", "channelSize", "meanAndVarianceShape", "textureWidth", "textureHeight", "meanAndVarianceWidth", "meanAndVarianceHeight", "createLrnProgramInfo", "C", "from", "lrnProgramMetadata", "createLrnProgramInfoLoader", "lrn", "parseLrnAttributes", "init_lrn", "padProgramMetadata", "padV2", "parsePadAttributesV2", "padV11", "parsePadAttributesV11", "generatePadAttributesFromInputs", "createPadProgramInfo", "validateInputsV2", "validateInputsV11", "getPadFunction", "getPadConstant", "getPadReflect", "getPadEdge", "init_pad", "attrubutes", "block", "averagePool", "parseAveragePoolAttributes", "createAveragePoolProgramInfo", "globalAveragePool", "parseGlobalAveragePoolAttributes", "maxPool", "parseMaxPoolAttributes", "createMaxPoolProgramInfo", "getAdjustedPoolAttributesAndOutputShape", "globalMaxPoolAttributes", "globalMaxPoolMetadata", "globalMaxPool", "generatePoolingCode", "copyArray", "offsetToIndices", "init_pool", "ceilMode", "countIncludePad", "op1", "op2", "storageOrder", "hasDilations", "kw", "sw", "pwStart", "pwEnd", "dimW", "codeW", "codeH", "codeHEnd", "kh", "sh", "phStart", "phEnd", "dimH", "kernelStrides", "stridesRank", "padsRank", "offsetToIndicesFunction", "copyInputDims", "copyPads", "copyKernelStrides", "copyStrides", "hasPads", "sum", "cur", "padCode", "arrayName", "reduce", "parseReduceAttributes", "createReduceProgramInfo", "reduceSum", "reduceMean", "reduceMax", "reduceMin", "reduceProd", "reduceLogSum", "reduceLogSumSquare", "init_reduce", "reduceOp", "reduceProgramMetadata", "keepDims", "_name", "iRank", "idxCopy", "ops", "reduceOps", "idxZero", "reshape", "init_reshape", "upsampleProgramMetadata", "upsample", "parseUpsampleAttributesV7", "parseUpsampleAttributesV9", "parseUpsampleAttributes", "createUpsampleProgramInfo", "scalesValidation", "init_upsample", "isResize", "scales", "extrapolationValue", "coordinateTransformMode", "needRoiInput", "useExtrapolation", "nearestMode", "cubicCoefficientA", "excludeOutside", "useNearest2xOptimization", "roiInputIdx", "scalesInputIdx", "sizesInputIdx", "inputWidth", "inputHeight", "outputWidth", "outputHeight", "outputPitches", "inputPitches", "precalculatedPitches", "getInputFloatFunction", "resizeProgramMetadata", "resize", "parseResizeAttributesV10", "parseResizeAttributesV11", "createPackedResizeProgramInfo", "prepareInputs", "parseScalesData", "parseScalesDataFromOutputSize", "init_resize_packed", "scalesHeight", "scalesWidth", "getSourceFracIndex", "outputSizes", "scalesTensor", "sizesTensor", "yDims", "init_shape", "sliceProgramMetadata", "parseSliceAttributes", "createSliceProgramInfo", "sliceV10", "generateSliceAttributesFromInputs", "validateInputsV10", "init_slice", "starts", "ends", "_val", "normalizedAxes", "sliceOps", "softmaxComputeMaxProgramMetadata", "softmaxComputeScaleProgramMetadata", "softmaxProgramMetadata", "softmax", "parseSoftmaxAttributes", "parseSoftmaxAttributesV13", "softmaxV13", "computeSoftmax", "createComputeMaxProgramInfo", "createComputScaleProgramInfo", "createSoftMaxProgramInfo", "init_softmax", "logicalRowCount", "featureCount", "isTransposeRequired", "transposedInputShape", "transposedInputs", "transposeAttribute", "_", "computeMaxProgramInfo", "computeScaleProgramInfo", "softMaxProgramInfo", "maxElementPerLogicalRow", "normalizationPerLogicalRow", "splitProgramMetadata", "parseSplitAttributes", "getProgramCount", "createSplitProgramInfo", "init_split", "squeeze", "squeezeV13", "parseSqueezeAttributes", "validateInputsV13", "init_squeeze", "createSumProgramInfo", "init_sum", "sumProgramMetadata", "tile", "createTileProgramInfo", "init_tile", "tileProgramMetadata", "tileOps", "unsqueeze", "unsqueezeV13", "parseUnsqueezeAttributes", "init_unsqueeze", "WEBGL_OP_RESOLVE_RULES", "init_op_resolve_rules", "replaceInlines", "script", "inlineDefs", "match", "INLINE_FUNC_DEF_REGEX", "tokens", "regexString", "FUNC_CALL_REGEX", "regex", "variable", "declLine", "newBody", "paramRedecLine", "replacement", "init_glsl_function_inliner", "squeezeShape", "newShape", "isEmptyArray", "parseAxisParam", "ax", "isInt", "sizeFromShape", "sizeToSquarishShape", "PreferLogicalStrategy", "init_texture_layout_strategy", "maxTextureSize", "wh", "wsize", "hsize", "logShape", "_d", "CoordsGlslLib", "init_glsl_coordinate_lib", "funcName", "outputLayout", "outTexShape", "floatTextureSetRGBASource", "floatTextureSetRGBAFuncName", "floatTextureSetRSource", "floatTextureSetRFuncName", "_shape", "texShape", "packedTexShape", "texelsInLogicalRow", "texelsInBatch", "texelsInBatchN", "batches", "coordsToCompute", "coordsFromIndexSnippet", "inputLayout", "outCoordFuncName", "texFuncSnippet", "broadcastDims", "fields", "isOutputScalar", "swapLastDimsSnippet", "inTexShape", "texNumR", "texNumC", "packedSampler", "valuesPerRow", "newInputLayout", "samplerRoutine", "tNumR", "tNumC", "stride0", "stride1", "routine", "revDims", "stride2", "stride3", "stride4", "xScale", "yScale", "stridesBlock", "body", "varName", "EncodingGlslLib", "init_glsl_encoding_lib", "_EncodingGlslLib", "endianness", "FragColorGlslLib", "init_glsl_fragcolor_lib", "ShapeUtilsGlslLib", "init_glsl_shape_utils_lib", "_ShapeUtilsGlslLib", "shapeInit", "VecGlslLib", "init_glsl_vec_lib", "nameOp", "assignmentBlock", "glslRegistry", "init_glsl_registered_libs", "GlslPreprocessor", "init_glsl_preprocessor", "lib", "map", "libName", "routinesInLib", "currentNode", "routinesIncluded", "routines", "classAndRoutine", "samplers", "variables", "uniformLines", "sampler", "ProgramManager", "init_program_manager", "profiler", "buildArtifact", "preprocessor", "fragScript", "fragShaderScript", "vertexShaderScript", "fragShader", "attribLocations", "positionHandle", "textureCoordHandle", "uniformLocations", "textures", "texturePosition", "location", "arrayLength", "uniformHandle", "reference", "TextureManager", "init_texture_manager", "layoutStrategy", "textureDataType", "encoder", "inUseTextures", "idleTextures", "subscribers", "tensorData", "deleteTexture", "_dataType", "WebGLSessionHandler", "init_session_handler", "graph", "initializers", "linearSearchLastTrue", "arr", "WebGLContext", "init_webgl_context", "vertexShader", "shaderType", "shader", "unit", "geometry", "fb", "internalFormat", "frameBuffer", "isComplete", "fragmentShader", "gl2", "ext", "query", "available", "disjoint", "timeElapsed", "fenceContext", "isFencePassed", "status", "resolveFn", "isDoneFn", "createWebGLContext", "contextId", "offscreenCanvas", "createOffscreenCanvas", "createNewWebGLContext", "contextAttributes", "ca", "init_webgl_context_factory", "WebGLBackend", "init_backend_webgl", "resolveBackend", "hint", "hints", "backendHint", "backendsCache", "tryLoadBackend", "backendObj", "isBackend", "init", "o", "KernelOp", "ExecutionPlan", "init_execution_plan", "resolved", "sessionHandler", "modelInputs", "graphInputs", "sequence", "graphValues", "rear", "thisOpIndex", "thisOp", "inputList", "inputTensors", "outputList", "downstreamNodes", "_output", "currentDownstreamNodeIndex", "currentDownstreamNode", "outputIndex", "outputTensor", "init_attribute", "_Attribute", "attr", "valueAndType", "attrType", "numberValue", "maybeLong", "ints", "strings", "tensors", "Value", "GraphImpl", "init_graph", "graphProto", "initializer", "valueInfo", "_nodeProto", "graphInitializer", "dataIndices", "nodesIndices", "inputValueNames", "currentIndex", "nodeProto", "pick", "dataIndex", "inputName", "outputName", "starters", "nodesStack", "nodesState", "outgoingEdgeIndex", "downstreamNodeIndex", "newIndices", "nodePossition", "ind", "currentData", "inputValueIndex", "outputValueIndex", "nodesConsumingOutput", "delIndex", "replaceIndex", "next", "child", "init_model", "isOrtFormat", "onnxError", "modelProto", "ortModel", "opsetId", "Session", "init_session", "arg", "modelProtoBlob", "outputTensors", "modelInputNames", "sortedInputs", "sortedInputsIndex", "modelInputIndices", "modelValues", "graphInputDims", "graphInput", "graphInputTypes", "givenInputs", "expectedType", "actualType", "noneDimSupported", "expectedDims", "actualDims", "modelOutputNames", "OnnxjsSessionHandler", "init_session_handler_inference", "_fetches", "_options", "inputMap", "feed", "outputMap", "backend_onnxjs_exports", "onnxjsBackend", "OnnxjsBackend", "init_backend_onnxjs", "pathOrBuffer", "init_wasm_utils_env", "main_exports", "main_default", "WORKER_NAME", "isProxyWorker", "init_main", "init_wasm_core_impl", "init_wasm_factory", "init_wasm_utils_import", "ev", "initializeWebAssembly", "initRuntime", "epName", "initEp", "bufferData", "copyFromExternalBuffer", "model", "createSession", "sessionMetadata", "releaseSession", "sessionId", "inputIndices", "run", "outputs", "extractTransferableBuffers", "endProfiling", "urlOverride", "scriptSrc", "origin", "isSameOrigin", "normalizeUrl", "fallbackUrl", "preload", "dynamicImportDefault", "createProxyWorker", "importProxyWorker", "importWasmModule", "filename", "prefixOverride", "baseUrl", "absoluteUrl", "blob", "url", "isMultiThreaded", "wasmModuleFilename", "wasmModuleUrl", "needPreload", "initialized", "initializing", "aborted", "isMultiThreadSupported", "isSimdSupported", "getInstance", "flags", "timeout", "numThreads", "multiThreadSupported", "wasmPaths", "wasmPrefixOverride", "mjsPathOverrideFlag", "mjsPathOverride", "wasmPathOverrideFlag", "wasmPathOverride", "wasmBinaryOverride", "objectUrl", "ortWasmFactory", "isTimeout", "tasks", "fileName", "scriptDirectory", "what", "allocWasmString", "iterateExtraOptions", "checkLastError", "init_wasm_utils", "allocs", "dataLength", "dataOffset", "prefix", "seen", "paramsOffset", "errorCode", "errorMessagePointer", "errorMessage", "setRunOptions", "init_run_options", "runOptionsHandle", "runOptions", "tagDataOffset", "keyDataOffset", "valueDataOffset", "getGraphOptimzationLevel", "getExecutionMode", "appendDefaultOptions", "setExecutionProviders", "setSessionOptions", "init_session_options", "graphOptimizationLevel", "executionMode", "ep", "sessionOptionsHandle", "executionProviders", "webgpuOptions", "epNameDataOffset", "logIdDataOffset", "logSeverityLevel", "logVerbosityLevel", "optimizedModelFilePathOffset", "tensorDataTypeStringToEnum", "tensorDataTypeEnumToString", "calculateTensorSizeInBytes", "tensorTypeToTypedArrayConstructor", "logLevelStringToEnum", "isGpuBufferSupportedType", "isMLTensorSupportedType", "dataLocationStringToEnum", "init_wasm_common", "dateType", "dimsOrSize", "logLevel", "loadFile", "init_wasm_utils_load_file", "file", "readFile", "createReadStream", "stream", "chunks", "contentLengthHeader", "fileSize", "pages", "done", "chunkSize", "initOrt", "activeSessions", "getSessionInputOutputCount", "prepareInputOutputTensor", "loggingLevel", "sessionHandle", "modelDataOffset", "modelData", "modelDataLength", "ioBindingHandle", "inputNamesUTF8Encoded", "outputNamesUTF8Encoded", "loadingPromises", "path", "provider", "webnnOptions", "gpuDevice", "powerPreference", "outputCount", "enableGraphCapture", "outputPreferredLocations", "nameString", "bindingState", "ioBindingState", "tensorHandles", "rawData", "dataByteLength", "registerBuffer", "registerMLTensor", "dimIndex", "inputOutputBound", "runOptionsAllocs", "inputTensorHandles", "outputTensorHandles", "inputOutputAllocs", "beforeRunStack", "inputValuesOffset", "inputNamesOffset", "outputValuesOffset", "outputNamesOffset", "inputValuesIndex", "inputNamesIndex", "outputValuesIndex", "outputNamesIndex", "beforeGetTensorDataStack", "tensorDataOffset", "keepOutputTensor", "tensorDataIndex", "dimsLength", "preferredLocation", "stringData", "maxBytesToRead", "getBuffer", "bufferSize", "ensureTensor", "profileFileName", "buffers", "isProxy", "proxyWorker", "temporaryObjectUrl", "initWasmCallbacks", "queuedCallbacks", "enqueueCallbacks", "ensureWorker", "onProxyWorkerMessage", "initializeWebAssemblyAndOrtRuntime", "initializeOrtEp", "init_proxy_wrapper", "callbacks", "queue", "worker", "transferable", "serializableInputs", "encodeTensorMetadata", "decodeTensorMetadata", "OnnxruntimeWebAssemblySessionHandler", "getName", "inputArray", "kvp", "outputArray", "resultMap", "backend_wasm_exports", "OnnxruntimeWebAssemblyBackend", "initializeFlags", "wasmBackend", "init_backend_wasm", "numCpuLogicalCores", "lib_exports", "lib_default", "exports", "exports", "exports", "Message", "exports", "exports", "exports", "_h", "_c", "_a", "exports", "_a", "exports", "exports", "exports", "exports", "ort", "msg", "audio", "sr", "exports", "j", "exports", "ort", "exports"]
}
